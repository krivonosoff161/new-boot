#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –∑–∞–≥–ª—É—à–µ–∫ –∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""
import os
import re

def count_stubs_in_file(filepath):
    """–ü–æ–¥—Å—á–µ—Ç –∑–∞–≥–ª—É—à–µ–∫ –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        stubs = {
            'todo': len(re.findall(r'TODO|FIXME', content, re.IGNORECASE)),
            'stub': len(re.findall(r'–∑–∞–≥–ª—É—à–∫–∞|stub|placeholder|mock|dummy|fake', content, re.IGNORECASE)),
            'not_implemented': len(re.findall(r'NotImplementedError|NotImplemented|raise NotImplementedError', content, re.IGNORECASE)),
            'empty_returns': len(re.findall(r'return None|return 0|return \{\}|return \[\]|return ""|return \'\'', content)),
            'pass_statements': len(re.findall(r'^\s*pass\s*$', content, re.MULTILINE)),
            'commented_blocks': len(re.findall(r'^\s*#.*[a-zA-Z]', content, re.MULTILINE))
        }
        return stubs
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return {'todo': 0, 'stub': 0, 'not_implemented': 0, 'empty_returns': 0, 'pass_statements': 0, 'commented_blocks': 0}

def scan_directory(directory):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≥–ª—É—à–µ–∫"""
    total_stubs = {'todo': 0, 'stub': 0, 'not_implemented': 0, 'empty_returns': 0, 'pass_statements': 0, 'commented_blocks': 0}
    files_with_stubs = 0
    file_details = []
    
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(('.py', '.html', '.js', '.css')):
                filepath = os.path.join(root, file)
                stubs = count_stubs_in_file(filepath)
                
                if any(stubs.values()):
                    files_with_stubs += 1
                    file_details.append({
                        'file': filepath,
                        'stubs': stubs
                    })
                    
                    for key in total_stubs:
                        total_stubs[key] += stubs[key]
    
    return total_stubs, files_with_stubs, file_details

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–ì–õ–£–®–ï–ö –ò –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–• –ú–ï–°–¢")
    print("=" * 60)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    stubs, files, details = scan_directory('src')
    
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏: {files}")
    print(f"üìù TODO/FIXME: {stubs['todo']}")
    print(f"üîß –ó–∞–≥–ª—É—à–∫–∏ (stub/placeholder/mock): {stubs['stub']}")
    print(f"‚ùå NotImplementedError: {stubs['not_implemented']}")
    print(f"üîÑ –ü—É—Å—Ç—ã–µ return: {stubs['empty_returns']}")
    print(f"‚è∏Ô∏è  pass statements: {stubs['pass_statements']}")
    print(f"üí¨ –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {stubs['commented_blocks']}")
    print(f"üìä –í–°–ï–ì–û –ó–ê–ì–õ–£–®–ï–ö: {sum(stubs.values())}")
    
    print("\n" + "=" * 60)
    print("üìã –¢–û–ü-10 –§–ê–ô–õ–û–í –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –ó–ê–ì–õ–£–®–ï–ö:")
    print("=" * 60)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≥–ª—É—à–µ–∫
    sorted_files = sorted(details, key=lambda x: sum(x['stubs'].values()), reverse=True)
    
    for i, file_info in enumerate(sorted_files[:10]):
        total = sum(file_info['stubs'].values())
        print(f"{i+1:2d}. {file_info['file']}")
        print(f"    –í—Å–µ–≥–æ –∑–∞–≥–ª—É—à–µ–∫: {total}")
        print(f"    TODO: {file_info['stubs']['todo']}, –ó–∞–≥–ª—É—à–∫–∏: {file_info['stubs']['stub']}, "
              f"NotImplemented: {file_info['stubs']['not_implemented']}, "
              f"–ü—É—Å—Ç—ã–µ return: {file_info['stubs']['empty_returns']}, "
              f"pass: {file_info['stubs']['pass_statements']}, "
              f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {file_info['stubs']['commented_blocks']}")
        print()
    
    print("=" * 60)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if stubs['todo'] > 0:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {stubs['todo']} TODO/FIXME - –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
    
    if stubs['not_implemented'] > 0:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {stubs['not_implemented']} NotImplementedError - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–ª—É—à–∫–∏")
    
    if stubs['empty_returns'] > 20:
        print(f"üîÑ –ú–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö return ({stubs['empty_returns']}) - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
    
    if stubs['commented_blocks'] > 100:
        print(f"üí¨ –ú–Ω–æ–≥–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ ({stubs['commented_blocks']}) - –Ω—É–∂–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å")
    
    print(f"\nüìä –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {max(0, 100 - (sum(stubs.values()) / 10)):.1f}%")

if __name__ == "__main__":
    main()

