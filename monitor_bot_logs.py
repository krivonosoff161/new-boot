#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–æ–≤
"""

import os
import time
import glob
from datetime import datetime

def monitor_bot_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    print("üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í –ë–û–¢–û–í")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥ —Ñ–∞–π–ª—ã –±–æ—Ç–æ–≤
    log_files = glob.glob('logs/bots/bot_*.log')
    
    if not log_files:
        print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤: {len(log_files)}")
    for log_file in log_files:
        print(f"   - {log_file}")
    
    print("\nüîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
    print("‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-" * 50)
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
    file_positions = {}
    for log_file in log_files:
        file_positions[log_file] = 0
    
    try:
        while True:
            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            f.seek(file_positions[log_file])
                            new_lines = f.readlines()
                            
                            if new_lines:
                                file_positions[log_file] = f.tell()
                                
                                for line in new_lines:
                                    line = line.strip()
                                    if line:
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç—É
                                        if 'ERROR' in line or '‚ùå' in line:
                                            print(f"üî¥ {line}")
                                        elif 'WARNING' in line or '‚ö†Ô∏è' in line:
                                            print(f"üü° {line}")
                                        elif 'INFO' in line or '‚úÖ' in line or 'üöÄ' in line:
                                            print(f"üü¢ {line}")
                                        else:
                                            print(f"‚ö™ {line}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")
            
            time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def show_latest_logs(log_file=None, lines=50):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞"""
    
    if log_file is None:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª
        log_files = glob.glob('logs/bots/bot_*.log')
        if not log_files:
            print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        log_file = max(log_files, key=os.path.getmtime)
    
    print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –∏–∑ {log_file}:")
    print("-" * 50)
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
            
            for line in last_lines:
                line = line.strip()
                if line:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç—É
                    if 'ERROR' in line or '‚ùå' in line:
                        print(f"üî¥ {line}")
                    elif 'WARNING' in line or '‚ö†Ô∏è' in line:
                        print(f"üü° {line}")
                    elif 'INFO' in line or '‚úÖ' in line or 'üöÄ' in line:
                        print(f"üü¢ {line}")
                    else:
                        print(f"‚ö™ {line}")
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == '--latest':
            lines = int(sys.argv[2]) if len(sys.argv) > 2 else 50
            show_latest_logs(lines=lines)
        elif sys.argv[1] == '--monitor':
            monitor_bot_logs()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python monitor_bot_logs.py --latest [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫]")
            print("  python monitor_bot_logs.py --monitor")
    else:
        show_latest_logs()

if __name__ == "__main__":
    main()

