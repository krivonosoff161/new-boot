#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
Enhanced Trading System v3.0
"""

import os
import json
from datetime import datetime
from pathlib import Path

class ReadinessChecker:
    def __init__(self):
        self.project_root = os.getcwd()
        self.issues = []
        self.warnings = []
        self.recommendations = []
        
    def check_backup_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏
            test_file = "test_write_permission.tmp"
            with open(test_file, "w") as f:
                f.write("test")
            os.remove(test_file)
            print("‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–æ–∑–º–æ–∂–Ω–∞")
        except Exception as e:
            self.issues.append(f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}")
            return False
        
        return True
    
    def check_file_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ–∞–π–ª–æ–≤...")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        files_to_check = [
            "web_interface/app.py",
            "enhanced/security_system_v3.py",
            "enhanced/enhanced_controller.py",
            "enhanced/enhanced_grid_bot.py",
            "enhanced/enhanced_scalp_bot.py"
        ]
        
        missing_files = []
        for file_path in files_to_check:
            if not os.path.exists(file_path):
                missing_files.append(file_path)
        
        if missing_files:
            self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        else:
            print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        return len(missing_files) == 0
    
    def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        db_files = [
            "web_interface/secure_users.db",
            "web_interface/users.db"
        ]
        
        for db_file in db_files:
            if os.path.exists(db_file):
                try:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    if os.path.getsize(db_file) > 0:
                        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è")
                    else:
                        self.warnings.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –ø—É—Å—Ç–∞—è")
                except Exception as e:
                    self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {db_file}: {e}")
            else:
                self.warnings.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def check_configuration_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config_files = [
            "config/bot_config.json"
        ]
        
        for config_file in config_files:
            if os.path.exists(config_file):
                try:
                    with open(config_file, "r", encoding="utf-8") as f:
                        json.load(f)
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_file} –≤–∞–ª–∏–¥–Ω–∞")
                except Exception as e:
                    self.issues.append(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}: {e}")
            else:
                self.warnings.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def check_duplicate_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã"""
        print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤...")
        
        # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
        potential_duplicates = {
            "app.py": ["web_interface/app.py", "web_interface/app_backup.py", "web_interface/app_simple.py"],
            "users.db": ["web_interface/secure_users.db", "web_interface/users.db"],
            "start.py": ["start.py", "start_system.py"]
        }
        
        duplicates_found = []
        for base_name, candidates in potential_duplicates.items():
            existing_files = [f for f in candidates if os.path.exists(f)]
            if len(existing_files) > 1:
                duplicates_found.append(f"{base_name}: {', '.join(existing_files)}")
        
        if duplicates_found:
            self.warnings.append(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã: {'; '.join(duplicates_found)}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def check_directory_structure(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        expected_dirs = [
            "web_interface",
            "enhanced", 
            "config",
            "logs",
            "user_data"
        ]
        
        missing_dirs = []
        for dir_name in expected_dirs:
            if not os.path.exists(dir_name):
                missing_dirs.append(dir_name)
        
        if missing_dirs:
            self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")
        else:
            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
    
    def check_python_environment(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        try:
            import sys
            python_version = sys.version_info
            if python_version.major >= 3 and python_version.minor >= 8:
                print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è {python_version.major}.{python_version.minor} –ø–æ–¥—Ö–æ–¥–∏—Ç")
            else:
                self.issues.append(f"Python –≤–µ—Ä—Å–∏—è {python_version.major}.{python_version.minor} —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è. –ù—É–∂–Ω–∞ 3.8+")
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python: {e}")
    
    def check_required_packages(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
        
        required_packages = [
            "flask",
            "ccxt", 
            "numpy",
            "cryptography",
            "python-telegram-bot"
        ]
        
        missing_packages = []
        for package in required_packages:
            try:
                __import__(package)
            except ImportError:
                missing_packages.append(package)
        
        if missing_packages:
            self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
        print("="*60)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.issues:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, issue in enumerate(self.issues, 1):
                print(f"  {i}. {issue}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.warnings:
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for i, warning in enumerate(self.warnings, 1):
                print(f"  {i}. {warning}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.recommendations:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(self.recommendations, 1):
                print(f"  {i}. {rec}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        print(f"\nüìà –°–¢–ê–¢–£–° –ì–û–¢–û–í–ù–û–°–¢–ò:")
        if not self.issues:
            print("‚úÖ –ì–û–¢–û–í –ö –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
            print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python reorganize_project.py")
        else:
            print("‚ùå –ù–ï –ì–û–¢–û–í –ö –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
            print("   –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "issues": self.issues,
            "warnings": self.warnings,
            "recommendations": self.recommendations,
            "ready": len(self.issues) == 0
        }
        
        with open("readiness_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: readiness_report.json")
    
    def run_checks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
        print("="*60)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_backup_availability()
        self.check_file_dependencies()
        self.check_database_integrity()
        self.check_configuration_files()
        self.check_duplicate_files()
        self.check_directory_structure()
        self.check_python_environment()
        self.check_required_packages()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = ReadinessChecker()
    checker.run_checks()

if __name__ == "__main__":
    main()








