#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ç—á–µ–π –≤ Enhanced Trading System v3.0
–°–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—á–∏
"""

import os
import shutil
import json
from datetime import datetime
from pathlib import Path

class PatchCreator:
    def __init__(self):
        self.patches_dir = "patches"
        self.project_root = os.getcwd()
        
    def create_patch(self, patch_type, description, files_to_change=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ç—á
        
        Args:
            patch_type: 'feature', 'bugfix', 'hotfix', 'refactor'
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            files_to_change: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –ø–∞—Ç—á–∞
        timestamp = datetime.now().strftime("%Y-%m-%d")
        safe_description = description.lower().replace(" ", "_").replace("-", "_")
        patch_name = f"{timestamp}_{safe_description}"
        patch_path = os.path.join(self.patches_dir, patch_name)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞—Ç—á–∞
        self._create_patch_structure(patch_path, patch_type, description)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ–ø–∏—Ä—É–µ–º –∏—Ö
        if files_to_change:
            self._copy_files_to_patch(patch_path, files_to_change)
        
        print(f"‚úÖ –ü–∞—Ç—á —Å–æ–∑–¥–∞–Ω: {patch_path}")
        print(f"üìù –¢–∏–ø: {patch_type}")
        print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        return patch_path
    
    def _create_patch_structure(self, patch_path, patch_type, description):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ –ø–∞—Ç—á–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(patch_path, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
        subdirs = ["files", "tests", "rollback", "docs"]
        for subdir in subdirs:
            os.makedirs(os.path.join(patch_path, subdir), exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º README.md –¥–ª—è –ø–∞—Ç—á–∞
        readme_content = f"""# –ü–∞—Ç—á: {description}

**–¢–∏–ø:** {patch_type}  
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}  
**–ê–≤—Ç–æ—Ä:** [–í–∞—à–µ –∏–º—è]

## üìã –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

[–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∏ –∑–∞—á–µ–º]

## üéØ –¶–µ–ª–∏

- [ ] –¶–µ–ª—å 1
- [ ] –¶–µ–ª—å 2
- [ ] –¶–µ–ª—å 3

## üìÅ –ò–∑–º–µ–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã

- `files/` - –ö–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
- `tests/` - –¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ç—á–∞
- `rollback/` - –°–∫—Ä–∏–ø—Ç—ã –æ—Ç–∫–∞—Ç–∞
- `docs/` - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –ü–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º:
- [ ] –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
- [ ] –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ staging

### –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ–≥–∏
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

## üîÑ –û—Ç–∫–∞—Ç

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫:
1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –æ—Ç–∫–∞—Ç–∞ –∏–∑ `rollback/`
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å

## üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—É

**–ú–æ–¥—É–ª–∏:** [–°–ø–∏—Å–æ–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –º–æ–¥—É–ª–µ–π]  
**API:** [–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ API]  
**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** [–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î]  
**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** [–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ]

## ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç

- [ ] –ö–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω
- [ ] –¢–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- [ ] –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
- [ ] –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞
- [ ] –ü–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞ –≥–æ—Ç–æ–≤
- [ ] –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
"""
        
        with open(os.path.join(patch_path, "README.md"), "w", encoding="utf-8") as f:
            f.write(readme_content)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = {
            "patch_name": patch_name,
            "type": patch_type,
            "description": description,
            "created_at": datetime.now().isoformat(),
            "status": "draft",
            "files_changed": [],
            "tests": [],
            "rollback_scripts": []
        }
        
        with open(os.path.join(patch_path, "metadata.json"), "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    def _copy_files_to_patch(self, patch_path, files_to_change):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞—Ç—á"""
        
        files_dir = os.path.join(patch_path, "files")
        
        for file_path in files_to_change:
            if os.path.exists(file_path):
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ –ø–∞—Ç—á–µ
                dest_path = os.path.join(files_dir, file_path)
                dest_dir = os.path.dirname(dest_path)
                os.makedirs(dest_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(file_path, dest_path)
                print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_path}")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def create_hotfix(self, description, critical_files):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–æ—á–Ω—ã–π –ø–∞—Ç—á"""
        return self.create_patch("hotfix", description, critical_files)
    
    def create_feature(self, description, feature_files):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—á —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"""
        return self.create_patch("feature", description, feature_files)
    
    def create_bugfix(self, description, bug_files):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞"""
        return self.create_patch("bugfix", description, bug_files)
    
    def list_patches(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ç—á–µ–π"""
        if not os.path.exists(self.patches_dir):
            print("üìÅ –ü–∞–ø–∫–∞ patches –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        patches = []
        for item in os.listdir(self.patches_dir):
            patch_path = os.path.join(self.patches_dir, item)
            if os.path.isdir(patch_path):
                metadata_file = os.path.join(patch_path, "metadata.json")
                if os.path.exists(metadata_file):
                    with open(metadata_file, "r", encoding="utf-8") as f:
                        metadata = json.load(f)
                    patches.append(metadata)
        
        if not patches:
            print("üìÅ –ü–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π:")
        print("=" * 80)
        
        for patch in sorted(patches, key=lambda x: x["created_at"], reverse=True):
            status_emoji = {
                "draft": "üìù",
                "testing": "üß™", 
                "ready": "‚úÖ",
                "applied": "üöÄ",
                "rolled_back": "üîÑ"
            }.get(patch["status"], "‚ùì")
            
            print(f"{status_emoji} {patch['patch_name']}")
            print(f"   –¢–∏–ø: {patch['type']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {patch['description']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {patch['status']}")
            print(f"   –°–æ–∑–¥–∞–Ω: {patch['created_at']}")
            print()

def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—á–∞"""
    creator = PatchCreator()
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è Enhanced Trading System v3.0")
    print("=" * 60)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–∞—Ç—á–∞
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ç—á–∞:")
    print("1. feature - –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
    print("2. bugfix - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞")
    print("3. hotfix - –°—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("4. refactor - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
    print("5. list - –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—á–∏")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    
    if choice == "5":
        creator.list_patches()
        return
    
    patch_types = {
        "1": "feature",
        "2": "bugfix", 
        "3": "hotfix",
        "4": "refactor"
    }
    
    if choice not in patch_types:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    patch_type = patch_types[choice]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = input(f"\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ {patch_type}: ").strip()
    if not description:
        print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    files_input = input("–§–∞–π–ª—ã: ").strip()
    
    files_to_change = []
    if files_input:
        files_to_change = [f.strip() for f in files_input.split(",") if f.strip()]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á
    patch_path = creator.create_patch(patch_type, description, files_to_change)
    
    print(f"\n‚úÖ –ü–∞—Ç—á —Å–æ–∑–¥–∞–Ω: {patch_path}")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ files/")
    print("2. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç—ã –≤ –ø–∞–ø–∫–µ tests/")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç–∫–∞—Ç–∞ –≤ –ø–∞–ø–∫–µ rollback/")
    print("4. –û–±–Ω–æ–≤–∏—Ç–µ README.md –ø–∞—Ç—á–∞")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print("6. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–∞—Ç—á")

if __name__ == "__main__":
    main()








