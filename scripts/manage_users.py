#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.database.models import User, db
from src.database.database import init_db
from werkzeug.security import generate_password_hash
import argparse

def create_user(username, email, password, role='user'):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            username=username,
            email=email,
            password_hash=generate_password_hash(password),
            role=role,
            is_active=True
        )
        
        db.session.add(user)
        db.session.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìß Email: {email}")
        print(f"   üîë –†–æ–ª—å: {role}")
        print(f"   üÜî ID: {user.id}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.session.rollback()
        return False

def list_users():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = User.query.all()
        if not users:
            print("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("=" * 60)
        for user in users:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            print(f"ID: {user.id:3d} | {user.username:15s} | {user.email:25s} | {user.role:10s} | {status}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def deactivate_user(username):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.query.filter_by(username=username).first()
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        user.is_active = False
        db.session.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.session.rollback()
        return False

def activate_user(username):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.query.filter_by(username=username).first()
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        user.is_active = True
        db.session.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.session.rollback()
        return False

def change_user_role(username, new_role):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.query.filter_by(username=username).first()
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        old_role = user.role
        user.role = new_role
        db.session.commit()
        
        print(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_role} ‚Üí {new_role}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        db.session.rollback()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_parser = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_parser.add_argument('username', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_parser.add_argument('email', help='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_parser.add_argument('password', help='–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_parser.add_argument('--role', default='user', choices=['user', 'admin'], help='–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    
    # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
    deactivate_parser = subparsers.add_parser('deactivate', help='–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    deactivate_parser.add_argument('username', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è
    activate_parser = subparsers.add_parser('activate', help='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    activate_parser.add_argument('username', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
    role_parser = subparsers.add_parser('role', help='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    role_parser.add_argument('username', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    role_parser.add_argument('new_role', choices=['user', 'admin'], help='–ù–æ–≤–∞—è —Ä–æ–ª—å')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    if args.command == 'create':
        create_user(args.username, args.email, args.password, args.role)
    elif args.command == 'list':
        list_users()
    elif args.command == 'deactivate':
        deactivate_user(args.username)
    elif args.command == 'activate':
        activate_user(args.username)
    elif args.command == 'role':
        change_user_role(args.username, args.new_role)

if __name__ == '__main__':
    main()





