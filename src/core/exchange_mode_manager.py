#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exchange Mode Manager
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–∞–º–∏ (–¥–µ–º–æ/—Ä–µ–∞–ª—å–Ω—ã–µ)
"""

import json
import os
from typing import Dict, Any, Optional
from loguru import logger

class ExchangeModeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–∞–º–∏
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–µ–º–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
    - –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    
    def __init__(self, config_path: str = "data/exchange_modes.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤
        """
        self.config_path = config_path
        self.modes = self._load_modes()
        self._ensure_config_exists()
        
        logger.info("‚úÖ Exchange Mode Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _ensure_config_exists(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not os.path.exists(self.config_path):
            os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
            
            default_config = {
                "exchanges": {
                    "okx": {
                        "demo": {
                            "sandbox": False,  # OKX –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç sandbox
                            "options": {
                                "sandboxMode": True,
                                "defaultType": "spot",
                                "demo": True
                            },
                            "urls": {
                                "api": {
                                    "public": "https://www.okx.com",
                                    "private": "https://www.okx.com"
                                }
                            }
                        },
                        "live": {
                            "sandbox": False,
                            "options": {
                                "sandboxMode": False,
                                "defaultType": "spot",
                                "demo": False
                            },
                            "urls": {
                                "api": {
                                    "public": "https://www.okx.com",
                                    "private": "https://www.okx.com"
                                }
                            }
                        }
                    },
                    "binance": {
                        "demo": {
                            "sandbox": True,
                            "options": {
                                "defaultType": "spot"
                            }
                        },
                        "live": {
                            "sandbox": False,
                            "options": {
                                "defaultType": "spot"
                            }
                        }
                    },
                    "bybit": {
                        "demo": {
                            "sandbox": True,
                            "options": {
                                "defaultType": "spot"
                            }
                        },
                        "live": {
                            "sandbox": False,
                            "options": {
                                "defaultType": "spot"
                            }
                        }
                    }
                },
                "default_mode": "demo"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–º–æ —Ä–µ–∂–∏–º
            }
            
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤: {self.config_path}")
    
    def _load_modes(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤: {e}")
            return {}
    
    def _save_modes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤"""
        try:
            os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.modes, f, indent=2, ensure_ascii=False)
            logger.debug("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤: {e}")
    
    def get_exchange_config(self, exchange_name: str, mode: str = "demo") -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–∏—Ä–∂–∏
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (okx, binance, bybit)
            mode: –†–µ–∂–∏–º (demo, live, sandbox)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è ccxt
        """
        try:
            # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤: sandbox -> demo
            if mode == "sandbox":
                mode = "demo"
            
            if exchange_name not in self.modes.get("exchanges", {}):
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞: {exchange_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                return self._get_default_config(exchange_name, mode)
            
            exchange_modes = self.modes["exchanges"][exchange_name]
            
            if mode not in exchange_modes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º {mode} –¥–ª—è {exchange_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo")
                mode = "demo"
            
            config = exchange_modes[mode].copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º enableRateLimit –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            config.setdefault("enableRateLimit", True)
            
            logger.debug(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {exchange_name} ({mode}): {config}")
            return config
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {exchange_name} ({mode}): {e}")
            return self._get_default_config(exchange_name, mode)
    
    def _get_default_config(self, exchange_name: str, mode: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if mode == "demo":
            return {
                "sandbox": True,
                "enableRateLimit": True,
                "options": {
                    "defaultType": "spot"
                }
            }
        else:
            return {
                "sandbox": False,
                "enableRateLimit": True,
                "options": {
                    "defaultType": "spot"
                }
            }
    
    def create_exchange_instance(self, exchange_name: str, api_key: str, secret: str, 
                               passphrase: str = None, mode: str = "demo") -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∏—Ä–∂–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            api_key: API –∫–ª—é—á
            secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            passphrase: –ü–∞—Ä–æ–ª—å (–¥–ª—è OKX)
            mode: –†–µ–∂–∏–º (demo, live, sandbox)
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏ ccxt
        """
        try:
            import ccxt
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤: sandbox -> demo
            if mode == "sandbox":
                mode = "demo"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self.get_exchange_config(exchange_name, mode)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            config.update({
                'apiKey': api_key,
                'secret': secret
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º passphrase/password –¥–ª—è OKX
            if passphrase:
                if exchange_name == 'okx':
                    config['password'] = passphrase  # OKX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'password'
                else:
                    config['passphrase'] = passphrase  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç 'passphrase'
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –±–∏—Ä–∂–∏
            if exchange_name in ccxt.exchanges:
                exchange_class = getattr(ccxt, exchange_name)
                exchange = exchange_class(config)
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä {exchange_name} –≤ —Ä–µ–∂–∏–º–µ {mode}")
                logger.debug(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
                return exchange
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {exchange_name}: {e}")
            raise
    
    def set_default_mode(self, mode: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Args:
            mode: –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (demo, live)
        """
        if mode not in ["demo", "live"]:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: {mode}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo' –∏–ª–∏ 'live'")
            return
        
        self.modes["default_mode"] = mode
        self._save_modes()
        logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {mode}")
    
    def get_default_mode(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.modes.get("default_mode", "demo")
    
    def get_supported_exchanges(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂"""
        return list(self.modes.get("exchanges", {}).keys())
    
    def get_exchange_modes(self, exchange_name: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –±–∏—Ä–∂–∏"""
        if exchange_name in self.modes.get("exchanges", {}):
            return list(self.modes["exchanges"][exchange_name].keys())
        return ["demo", "live"]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def update_exchange_config(self, exchange_name: str, mode: str, config: Dict[str, Any]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∏—Ä–∂–∏
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            mode: –†–µ–∂–∏–º
            config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        try:
            if "exchanges" not in self.modes:
                self.modes["exchanges"] = {}
            
            if exchange_name not in self.modes["exchanges"]:
                self.modes["exchanges"][exchange_name] = {}
            
            self.modes["exchanges"][exchange_name][mode] = config
            self._save_modes()
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {exchange_name} ({mode})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {exchange_name} ({mode}): {e}")
    
    def get_mode_info(self, exchange_name: str, mode: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∂–∏–º–µ
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            mode: –†–µ–∂–∏–º
            
        Returns:
            –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        """
        if mode == "demo":
            return f"üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º {exchange_name.upper()}: –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"
        elif mode == "live":
            return f"üí∞ –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º {exchange_name.upper()}: —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏"
        else:
            return f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º {mode} –¥–ª—è {exchange_name}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
exchange_mode_manager = ExchangeModeManager()
