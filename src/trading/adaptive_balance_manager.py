#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Adaptive Balance Manager v3.0
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –ª—é–±—ã–µ —Å—É–º–º—ã
"""

import asyncio
import time
import logging
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
import ccxt.async_support as ccxt
from dotenv import load_dotenv

load_dotenv()

@dataclass
class UserCapital:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ø–∏—Ç–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    total_balance_usd: float
    available_balance_usd: float
    reserved_balance_usd: float
    active_in_grid: float
    active_in_scalp: float
    currencies: Dict[str, float]  # {currency: amount}
    last_update: datetime
    risk_level: str  # 'conservative', 'balanced', 'aggressive'

@dataclass
class BalanceAllocation:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    grid_allocation: float
    scalp_allocation: float
    reserve_allocation: float
    min_order_size: float
    max_positions_grid: int
    max_positions_scalp: int
    recommended_pairs: List[str]

class AdaptiveBalanceManager:
    """
    Adaptive Balance Manager v3.0
    
    –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏:
    - üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ª—é–±—ã–µ —Å—É–º–º—ã ($50 - $100,000+)
    - üéØ –ó–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ (–∞–∫—Ç–∏–≤–Ω–∞—è/—Ä–µ–∑–µ—Ä–≤–Ω–∞—è/–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω—ã)
    - ü§ñ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    - üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    - ‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è—Ö
    """
    
    def __init__(self, exchange, config: Dict[str, Any]):
        self.exchange = exchange
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_capitals: Dict[int, UserCapital] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.cache_ttl = 60  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        self.min_total_balance = 25.0  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.reserve_percentage = 0.10  # 10% —Ä–µ–∑–µ—Ä–≤
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.min_grid_balance = 50.0
        self.min_scalp_balance = 30.0
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—É–º–º–∞–º
        self.allocation_profiles = {
            'micro': {'range': (25, 100), 'grid': 0.50, 'scalp': 0.35, 'reserve': 0.15},
            'small': {'range': (100, 500), 'grid': 0.60, 'scalp': 0.25, 'reserve': 0.15},
            'medium': {'range': (500, 2000), 'grid': 0.65, 'scalp': 0.25, 'reserve': 0.10},
            'large': {'range': (2000, 10000), 'grid': 0.70, 'scalp': 0.20, 'reserve': 0.10},
            'whale': {'range': (10000, float('inf')), 'grid': 0.75, 'scalp': 0.15, 'reserve': 0.10}
        }
        
        self.logger.info("üöÄ Adaptive Balance Manager v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_user_capital(self, user_id: int, force_refresh: bool = False) -> UserCapital:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
            
        Returns:
            UserCapital: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ø–∏—Ç–∞–ª–µ
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if not force_refresh and user_id in self.user_capitals:
            cached = self.user_capitals[user_id]
            if (datetime.now() - cached.last_update).total_seconds() < self.cache_ttl:
                return cached
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            is_demo_mode = os.getenv('DEMO_MODE', 'false').lower() == 'true'
            
            if is_demo_mode:
                # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å $1,471.28
                balance_data = {
                    'total': {
                        'USDT': 1471.28,
                        'BTC': 0.0,
                        'ETH': 0.0,
                        'BNB': 0.0
                    }
                }
                self.logger.info("üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å $1,471.28")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Å –±–∏—Ä–∂–∏
                balance_data = await self.exchange.fetch_balance()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD
            total_usd = 0.0
            currencies = {}
            
            for currency, amounts in balance_data['total'].items():
                if amounts > 0:
                    currencies[currency] = amounts
                    
                    if currency == 'USDT':
                        total_usd += amounts
                    else:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD —á–µ—Ä–µ–∑ USDT –ø–∞—Ä—É
                        try:
                            ticker = await self.exchange.fetch_ticker(f"{currency}/USDT")
                            usd_value = amounts * ticker['last']
                            total_usd += usd_value
                        except:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            pass
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            risk_level = self._determine_risk_level(user_id, total_usd)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            user_capital = UserCapital(
                user_id=user_id,
                total_balance_usd=total_usd,
                available_balance_usd=total_usd * (1 - self.reserve_percentage),
                reserved_balance_usd=total_usd * self.reserve_percentage,
                active_in_grid=0.0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                active_in_scalp=0.0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                currencies=currencies,
                last_update=datetime.now(),
                risk_level=risk_level
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.user_capitals[user_id] = user_capital
            
            self.logger.info(f"üí∞ –ö–∞–ø–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ${total_usd:.2f}")
            return user_capital
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞–ø–∏—Ç–∞–ª
            return UserCapital(
                user_id=user_id,
                total_balance_usd=0.0,
                available_balance_usd=0.0,
                reserved_balance_usd=0.0,
                active_in_grid=0.0,
                active_in_scalp=0.0,
                currencies={},
                last_update=datetime.now(),
                risk_level='conservative'
            )
    
    def get_optimal_allocation(self, user_capital: UserCapital) -> BalanceAllocation:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
        
        Args:
            user_capital: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ø–∏—Ç–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            BalanceAllocation: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        """
        
        total_balance = user_capital.total_balance_usd
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = self._get_allocation_profile(total_balance)
        
        # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        grid_allocation = total_balance * profile['grid']
        scalp_allocation = total_balance * profile['scalp']
        reserve_allocation = total_balance * profile['reserve']
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        if grid_allocation < self.min_grid_balance:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è Grid - –æ—Ç–¥–∞–µ–º –≤—Å–µ Scalp
            scalp_allocation += grid_allocation
            grid_allocation = 0.0
            
        if scalp_allocation < self.min_scalp_balance:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è Scalp - –æ—Ç–¥–∞–µ–º –≤—Å–µ Grid
            grid_allocation += scalp_allocation
            scalp_allocation = 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        min_order_size = max(10.0, total_balance * 0.02)  # –ú–∏–Ω–∏–º—É–º $10 –∏–ª–∏ 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É–º–º—ã
        max_positions_grid = min(20, max(3, int(grid_allocation / 200)))
        max_positions_scalp = min(10, max(2, int(scalp_allocation / 100)))
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
        if total_balance < 200:
            recommended_pairs = ["BTC/USDT"]  # –¢–æ–ª—å–∫–æ BTC –¥–ª—è –º–∞–ª—ã—Ö —Å—É–º–º
        elif total_balance < 1000:
            recommended_pairs = ["BTC/USDT", "ETH/USDT"]
        elif total_balance < 5000:
            recommended_pairs = ["BTC/USDT", "ETH/USDT", "BNB/USDT"]
        else:
            recommended_pairs = ["BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "XRP/USDT"]
        
        return BalanceAllocation(
            grid_allocation=grid_allocation,
            scalp_allocation=scalp_allocation,
            reserve_allocation=reserve_allocation,
            min_order_size=min_order_size,
            max_positions_grid=max_positions_grid,
            max_positions_scalp=max_positions_scalp,
            recommended_pairs=recommended_pairs
        )
    
    def _get_allocation_profile(self, balance: float) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å—É–º–º—ã"""
        for profile_name, profile_data in self.allocation_profiles.items():
            min_range, max_range = profile_data['range']
            if min_range <= balance < max_range:
                return profile_data
        
        # Fallback –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å—É–º–º
        return self.allocation_profiles['whale']
    
    def _determine_risk_level(self, user_id: int, balance: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if balance < 200:
            return 'conservative'  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è –º–∞–ª—ã—Ö —Å—É–º–º
        elif balance < 2000:
            return 'balanced'      # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å—É–º–º
        else:
            return 'aggressive'    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º
    
    async def check_balance_changes(self, user_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
        """
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª
        current_capital = await self.get_user_capital(user_id, force_refresh=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if user_id not in self.user_capitals:
            return {"status": "first_check", "capital": current_capital}
        
        previous_capital = self.user_capitals[user_id]
        balance_change = current_capital.total_balance_usd - previous_capital.total_balance_usd
        
        result = {
            "status": "checked",
            "capital": current_capital,
            "balance_change": balance_change,
            "notifications": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (>5% –∏–ª–∏ >$50)
        if abs(balance_change) > max(50, previous_capital.total_balance_usd * 0.05):
            if balance_change > 0:
                # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                result["notifications"].append({
                    "type": "deposit",
                    "message": f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${balance_change:.2f}! –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!",
                    "recommendations": self._get_deposit_recommendations(current_capital)
                })
            else:
                # –°–Ω—è—Ç–∏–µ –∏–ª–∏ —É–±—ã—Ç–∫–∏
                result["notifications"].append({
                    "type": "withdrawal",
                    "message": f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ ${abs(balance_change):.2f}",
                    "recommendations": self._get_reduction_recommendations(current_capital)
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        old_profile = self._get_allocation_profile(previous_capital.total_balance_usd)
        new_profile = self._get_allocation_profile(current_capital.total_balance_usd)
        
        if old_profile != new_profile:
            result["notifications"].append({
                "type": "profile_change",
                "message": f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è! –ù–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!",
                "old_profile": old_profile,
                "new_profile": new_profile
            })
        
        return result
    
    def _get_deposit_recommendations(self, capital: UserCapital) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        recommendations = []
        allocation = self.get_optimal_allocation(capital)
        
        if allocation.grid_allocation >= self.min_grid_balance and capital.active_in_grid == 0:
            recommendations.append(f"üîÑ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω Grid Bot! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º ${allocation.grid_allocation:.0f}")
        
        if allocation.scalp_allocation >= self.min_scalp_balance and capital.active_in_scalp == 0:
            recommendations.append(f"‚ö° –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω Scalp Bot! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º ${allocation.scalp_allocation:.0f}")
        
        if len(allocation.recommended_pairs) > len(self._get_current_pairs(capital.user_id)):
            new_pairs = len(allocation.recommended_pairs) - len(self._get_current_pairs(capital.user_id))
            recommendations.append(f"üìà –î–æ—Å—Ç—É–ø–Ω–æ {new_pairs} –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä!")
        
        return recommendations
    
    def _get_reduction_recommendations(self, capital: UserCapital) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        recommendations = []
        allocation = self.get_optimal_allocation(capital)
        
        if capital.total_balance_usd < self.min_grid_balance:
            recommendations.append("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Grid Bot - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        
        if capital.total_balance_usd < self.min_scalp_balance:
            recommendations.append("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Scalp Bot - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        
        if capital.total_balance_usd < self.min_total_balance:
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç")
        
        return recommendations
    
    def _get_current_pairs(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        return ["BTC/USDT"]
    
    async def update_active_allocations(self, user_id: int, grid_active: float, scalp_active: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö"""
        if user_id in self.user_capitals:
            self.user_capitals[user_id].active_in_grid = grid_active
            self.user_capitals[user_id].active_in_scalp = scalp_active
    
    def get_balance_summary(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        if user_id not in self.user_capitals:
            return {"error": "–î–∞–Ω–Ω—ã–µ –æ –∫–∞–ø–∏—Ç–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        capital = self.user_capitals[user_id]
        allocation = self.get_optimal_allocation(capital)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_name = None
        for name, profile in self.allocation_profiles.items():
            min_range, max_range = profile['range']
            if min_range <= capital.total_balance_usd < max_range:
                profile_name = name
                break
        
        return {
            "user_id": user_id,
            "total_balance": capital.total_balance_usd,
            "available_balance": capital.available_balance_usd,
            "reserved_balance": capital.reserved_balance_usd,
            "profile": profile_name,
            "risk_level": capital.risk_level,
            "allocation": {
                "grid": allocation.grid_allocation,
                "scalp": allocation.scalp_allocation,
                "reserve": allocation.reserve_allocation
            },
            "trading_params": {
                "min_order_size": allocation.min_order_size,
                "max_positions_grid": allocation.max_positions_grid,
                "max_positions_scalp": allocation.max_positions_scalp,
                "recommended_pairs": allocation.recommended_pairs
            },
            "active_usage": {
                "grid": capital.active_in_grid,
                "scalp": capital.active_in_scalp,
                "total_used": capital.active_in_grid + capital.active_in_scalp
            },
            "utilization": {
                "grid_percent": (capital.active_in_grid / allocation.grid_allocation * 100) if allocation.grid_allocation > 0 else 0,
                "scalp_percent": (capital.active_in_scalp / allocation.scalp_allocation * 100) if allocation.scalp_allocation > 0 else 0,
                "total_percent": ((capital.active_in_grid + capital.active_in_scalp) / capital.available_balance_usd * 100) if capital.available_balance_usd > 0 else 0
            }
        }
    
    def can_allocate(self, user_id: int, strategy: str, amount: float) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            strategy: 'grid' –∏–ª–∏ 'scalp'
            amount: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞
            
        Returns:
            Tuple[bool, str]: (–º–æ–∂–Ω–æ –ª–∏ –≤—ã–¥–µ–ª–∏—Ç—å, –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞)
        """
        
        if user_id not in self.user_capitals:
            return False, "–î–∞–Ω–Ω—ã–µ –æ –∫–∞–ø–∏—Ç–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        capital = self.user_capitals[user_id]
        allocation = self.get_optimal_allocation(capital)
        
        if strategy == 'grid':
            max_available = allocation.grid_allocation - capital.active_in_grid
            if amount <= max_available:
                return True, "OK"
            else:
                return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Grid: –¥–æ—Å—Ç—É–ø–Ω–æ ${max_available:.2f}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ ${amount:.2f}"
        
        elif strategy == 'scalp':
            max_available = allocation.scalp_allocation - capital.active_in_scalp
            if amount <= max_available:
                return True, "OK"
            else:
                return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Scalp: –¥–æ—Å—Ç—É–ø–Ω–æ ${max_available:.2f}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ ${amount:.2f}"
        
        return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
    
    async def allocate_capital(self, user_id: int, strategy: str, amount: float) -> bool:
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        can_allocate, reason = self.can_allocate(user_id, strategy, amount)
        
        if not can_allocate:
            self.logger.warning(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å ${amount:.2f} –¥–ª—è {strategy}: {reason}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if strategy == 'grid':
            self.user_capitals[user_id].active_in_grid += amount
        elif strategy == 'scalp':
            self.user_capitals[user_id].active_in_scalp += amount
        
        self.logger.info(f"‚úÖ –í—ã–¥–µ–ª–µ–Ω–æ ${amount:.2f} –¥–ª—è {strategy} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    
    async def release_capital(self, user_id: int, strategy: str, amount: float) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        if user_id not in self.user_capitals:
            return False
        
        if strategy == 'grid':
            self.user_capitals[user_id].active_in_grid = max(0, 
                self.user_capitals[user_id].active_in_grid - amount)
        elif strategy == 'scalp':
            self.user_capitals[user_id].active_in_scalp = max(0, 
                self.user_capitals[user_id].active_in_scalp - amount)
        
        self.logger.info(f"‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${amount:.2f} –æ—Ç {strategy} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏"""
        total_users = len(self.user_capitals)
        total_capital = sum(cap.total_balance_usd for cap in self.user_capitals.values())
        total_active = sum(cap.active_in_grid + cap.active_in_scalp for cap in self.user_capitals.values())
        
        profile_distribution = {}
        for capital in self.user_capitals.values():
            profile = None
            for name, profile_data in self.allocation_profiles.items():
                min_range, max_range = profile_data['range']
                if min_range <= capital.total_balance_usd < max_range:
                    profile = name
                    break
            
            if profile:
                profile_distribution[profile] = profile_distribution.get(profile, 0) + 1
        
        return {
            "total_users": total_users,
            "total_capital_usd": total_capital,
            "total_active_usd": total_active,
            "utilization_percent": (total_active / total_capital * 100) if total_capital > 0 else 0,
            "profile_distribution": profile_distribution,
            "average_balance": total_capital / total_users if total_users > 0 else 0
        }


