#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Adaptive Capital Distributor - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –ø–ª–∞–≤–∞—é—â–∏–º –ø—Ä–æ—Ñ–∏—Ç–æ–º
"""

import asyncio
import time
import json
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

from src.core.log_helper import build_logger

class TradingMode(Enum):
    """–†–µ–∂–∏–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    CONSERVATIVE = "conservative"  # 1 –ø–∞—Ä–∞, $400+ –Ω–∞ –ø–∞—Ä—É, –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–æ 5%
    AGGRESSIVE = "aggressive"     # 2-3 –ø–∞—Ä—ã, $200+ –Ω–∞ –ø–∞—Ä—É, –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–æ 8%
    AUTOMATIC = "automatic"       # –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞

@dataclass
class PairAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    symbol: str
    volatility: float  # 3-6% –≤ –¥–µ–Ω—å
    liquidity: float   # >$5M –≤ –¥–µ–Ω—å
    trend: float       # –ë–æ–∫–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ —Å –ª–µ–≥–∫–∏–º —Ç—Ä–µ–Ω–¥–æ–º
    correlation: float # <0.5 —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–∏
    atr: float         # Average True Range
    rsi: float         # RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    volume: float      # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    risk_score: float  # –û–±—â–∏–π —Ä–∏—Å–∫ (0-1)
    profit_potential: float  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏ (0-1)

@dataclass
class CapitalAllocation:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    symbol: str
    allocated_amount: float
    min_amount: float
    max_amount: float
    risk_level: str
    profit_target: float
    stop_loss: float
    trailing_stop: bool
    position_size: float

class AdaptiveCapitalDistributor:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–∏–º –ø—Ä–æ—Ñ–∏—Ç–æ–º"""
    
    def __init__(self, exchange, user_id: int, config: Dict[str, Any]):
        self.ex = exchange
        self.user_id = user_id
        self.config = config
        self.logger = build_logger(f"adaptive_capital_distributor_{user_id}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_modes = {
            TradingMode.CONSERVATIVE: {
                'min_pairs': 1,
                'max_pairs': 1,
                'min_capital_per_pair': 400.0,
                'max_drawdown_pct': 5.0,
                'volatility_range': (2.0, 4.0),
                'correlation_limit': 0.5
            },
            TradingMode.AGGRESSIVE: {
                'min_pairs': 2,
                'max_pairs': 3,
                'min_capital_per_pair': 200.0,
                'max_drawdown_pct': 8.0,
                'volatility_range': (4.0, 8.0),
                'correlation_limit': 0.7
            },
            TradingMode.AUTOMATIC: {
                'min_pairs': 1,
                'max_pairs': 5,
                'min_capital_per_pair': 200.0,
                'max_drawdown_pct': 6.0,
                'volatility_range': (1.0, 10.0),  # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                'correlation_limit': 0.8  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
        self.floating_profit_config = {
            'min_profit_for_trailing': 50.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            'trailing_stop_pct': 0.02,        # 2% —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
            'partial_close_pct': 0.5,         # –ó–∞–∫—Ä—ã–≤–∞—Ç—å 50% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
            'profit_target_pct': 0.1,         # 10% —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏
            'reinvestment_threshold': 200.0   # –ü–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        # –ö—ç—à –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä
        self._pair_analysis_cache = {}
        self._cache_ttl = 3600  # 1 —á–∞—Å
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        self._allocation_history = []
        self._profit_tracking = {}
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        self._adaptive_thresholds = {
            'balance_400_800': {'pairs': 1, 'min_capital': 400},
            'balance_800_1500': {'pairs': 2, 'min_capital': 200},
            'balance_1500_3000': {'pairs': 3, 'min_capital': 200},
            'balance_3000_plus': {'pairs': 4, 'min_capital': 200}
        }

    async def analyze_trading_pairs(self, symbols: List[str]) -> List[PairAnalysis]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –æ—Ç–±–æ—Ä–∞"""
        try:
            current_time = time.time()
            valid_analyses = []
            
            for symbol in symbols:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                cache_key = f"{symbol}_{current_time // self._cache_ttl}"
                if cache_key in self._pair_analysis_cache:
                    analysis = self._pair_analysis_cache[cache_key]
                    if current_time - analysis.get('timestamp', 0) < self._cache_ttl:
                        valid_analyses.append(analysis['data'])
                        continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É
                analysis = await self._analyze_single_pair(symbol)
                if analysis:
                    self._pair_analysis_cache[cache_key] = {
                        'data': analysis,
                        'timestamp': current_time
                    }
                    valid_analyses.append(analysis)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É –ø—Ä–∏–±—ã–ª–∏
            valid_analyses.sort(key=lambda x: x.profit_potential, reverse=True)
            
            self.logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(valid_analyses)} –ø–∞—Ä –∏–∑ {len(symbols)}")
            return valid_analyses
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä: {e}")
            return []

    async def _analyze_single_pair(self, symbol: str) -> Optional[PairAnalysis]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 4 —á–∞—Å–∞
            ohlcv = self.ex.fetch_ohlcv(symbol, '1h', limit=4)
            if len(ohlcv) < 4:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            prices = [candle[4] for candle in ohlcv]  # Close prices
            volatility = self._calculate_volatility(prices)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–æ–±—ä–µ–º)
            volumes = [candle[5] for candle in ohlcv]
            avg_volume = sum(volumes) / len(volumes)
            liquidity = avg_volume * prices[-1]  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ USD
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥
            trend = self._calculate_trend(prices)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR
            atr = self._calculate_atr(ohlcv)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
            rsi = self._calculate_rsi(prices)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–∏
            correlation = await self._calculate_correlation(symbol, prices)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫-—Å–∫–æ—Ä
            risk_score = self._calculate_risk_score(volatility, atr, rsi)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏
            profit_potential = self._calculate_profit_potential(
                volatility, liquidity, trend, risk_score
            )
            
            return PairAnalysis(
                symbol=symbol,
                volatility=volatility,
                liquidity=liquidity,
                trend=trend,
                correlation=correlation,
                atr=atr,
                rsi=rsi,
                volume=avg_volume,
                risk_score=risk_score,
                profit_potential=profit_potential
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã {symbol}: {e}")
            return None

    def _calculate_volatility(self, prices: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(prices) < 2:
            return 0.0
        
        returns = []
        for i in range(1, len(prices)):
            ret = (prices[i] - prices[i-1]) / prices[i-1]
            returns.append(ret)
        
        if not returns:
            return 0.0
        
        mean_return = sum(returns) / len(returns)
        variance = sum((r - mean_return) ** 2 for r in returns) / len(returns)
        volatility = (variance ** 0.5) * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        return volatility

    def _calculate_trend(self, prices: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ (0-1, –≥–¥–µ 0.5 = –±–æ–∫–æ–≤–æ–π)"""
        if len(prices) < 2:
            return 0.5
        
        first_price = prices[0]
        last_price = prices[-1]
        price_change = (last_price - first_price) / first_price
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1 (0.5 = –±–æ–∫–æ–≤–æ–π)
        trend = 0.5 + (price_change * 10)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        trend = max(0.0, min(1.0, trend))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        
        return trend

    def _calculate_atr(self, ohlcv: List[List]) -> float:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        if len(ohlcv) < 2:
            return 0.0
        
        true_ranges = []
        for i in range(1, len(ohlcv)):
            high = ohlcv[i][2]
            low = ohlcv[i][3]
            prev_close = ohlcv[i-1][4]
            
            tr1 = high - low
            tr2 = abs(high - prev_close)
            tr3 = abs(low - prev_close)
            
            true_range = max(tr1, tr2, tr3)
            true_ranges.append(true_range)
        
        if not true_ranges:
            return 0.0
        
        atr = sum(true_ranges) / len(true_ranges)
        return atr

    def _calculate_rsi(self, prices: List[float], period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç RSI"""
        if len(prices) < period + 1:
            return 50.0
        
        gains = []
        losses = []
        
        for i in range(1, len(prices)):
            change = prices[i] - prices[i-1]
            if change > 0:
                gains.append(change)
                losses.append(0)
            else:
                gains.append(0)
                losses.append(abs(change))
        
        if len(gains) < period:
            return 50.0
        
        avg_gain = sum(gains[-period:]) / period
        avg_loss = sum(losses[-period:]) / period
        
        if avg_loss == 0:
            return 100.0
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return rsi

    async def _calculate_correlation(self, symbol: str, prices: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        # —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞
        return 0.3  # –ó–∞–≥–ª—É—à–∫–∞

    def _calculate_risk_score(self, volatility: float, atr: float, rsi: float) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞ (0-1)"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (3-6% = 0.3-0.6)
        vol_score = min(1.0, volatility / 10.0)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ATR
        atr_score = min(1.0, atr / 100.0)
        
        # RSI —Ä–∏—Å–∫ (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
        rsi_risk = abs(rsi - 50) / 50.0
        
        # –û–±—â–∏–π —Ä–∏—Å–∫
        risk_score = (vol_score + atr_score + rsi_risk) / 3.0
        return min(1.0, risk_score)

    def _calculate_profit_potential(self, volatility: float, liquidity: float, 
                                  trend: float, risk_score: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø—Ä–∏–±—ã–ª–∏ (0-1)"""
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (3-6%)
        vol_score = 1.0 if 3.0 <= volatility <= 6.0 else 0.5
        
        # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å >$5M
        liq_score = 1.0 if liquidity > 5000000 else 0.3
        
        # –¢—Ä–µ–Ω–¥ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0.4-0.6 = –±–æ–∫–æ–≤–æ–π —Å –ª–µ–≥–∫–∏–º —Ç—Ä–µ–Ω–¥–æ–º)
        trend_score = 1.0 if 0.4 <= trend <= 0.6 else 0.5
        
        # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ = –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        risk_score_inverted = 1.0 - risk_score
        
        # –û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        profit_potential = (vol_score + liq_score + trend_score + risk_score_inverted) / 4.0
        return min(1.0, profit_potential)

    async def select_optimal_pairs(self, analyses: List[PairAnalysis], 
                                 mode: TradingMode, total_capital: float = None) -> List[PairAnalysis]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        try:
            # –î–ª—è —Ä–µ–∂–∏–º–∞ AUTOMATIC –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if mode == TradingMode.AUTOMATIC and total_capital:
                mode_config = self.get_adaptive_mode_config(total_capital)
                self.logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∞ ${total_capital:.2f}")
            else:
                mode_config = self.trading_modes[mode]
            
            selected_pairs = []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            vol_min, vol_max = mode_config['volatility_range']
            min_liquidity = mode_config.get('liquidity_threshold', 1000000)
            correlation_limit = mode_config['correlation_limit']
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ä–µ–∂–∏–º–∞
            for analysis in analyses:
                self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {analysis.symbol}: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {analysis.volatility:.2f}%, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ${analysis.liquidity:,.0f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if not (vol_min <= analysis.volatility <= vol_max):
                    self.logger.warning(f"‚ùå {analysis.symbol}: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {analysis.volatility:.2f}% –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {vol_min}-{vol_max}%")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                if analysis.liquidity < min_liquidity:
                    self.logger.warning(f"‚ùå {analysis.symbol}: –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ${analysis.liquidity:,.0f} < ${min_liquidity:,.0f}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
                if self._check_correlation_limit(analysis, selected_pairs, correlation_limit):
                    self.logger.warning(f"‚ùå {analysis.symbol}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {correlation_limit}")
                    continue
                
                selected_pairs.append(analysis)
                self.logger.info(f"‚úÖ {analysis.symbol}: –≤—ã–±—Ä–∞–Ω–∞ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis.volatility:.2f}%, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${analysis.liquidity:,.0f})")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
                if len(selected_pairs) >= mode_config['max_pairs']:
                    break
            
            # Fallback –¥–ª—è —Ä–µ–∂–∏–º–∞ automatic - –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
            if mode == TradingMode.AUTOMATIC and len(selected_pairs) == 0 and len(analyses) > 0:
                self.logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                # –ë–µ—Ä–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É –ø—Ä–∏–±—ã–ª–∏
                fallback_pairs = sorted(analyses, key=lambda x: x.profit_potential, reverse=True)
                selected_pairs = fallback_pairs[:mode_config['max_pairs']]
                self.logger.info(f"üîÑ Fallback: –≤—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É –ø—Ä–∏–±—ã–ª–∏")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            if mode == TradingMode.AUTOMATIC:
                self.logger.info(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ AUTOMATIC:")
                self.logger.info(f"   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {mode_config['volatility_range'][0]}-{mode_config['volatility_range'][1]}%")
                self.logger.info(f"   üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: >${min_liquidity:,}")
                self.logger.info(f"   üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: <{correlation_limit}")
                self.logger.info(f"   üìà –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä: {mode_config['max_pairs']}")
                self.logger.info(f"   üéØ –¢–∏—Ä –∫–∞–ø–∏—Ç–∞–ª–∞: {mode_config.get('tier', 'unknown')}")
            
            self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode.value}")
            return selected_pairs
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä: {e}")
            return []

    def _check_correlation_limit(self, new_pair: PairAnalysis, 
                               existing_pairs: List[PairAnalysis], 
                               limit: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
        for existing in existing_pairs:
            if abs(new_pair.correlation - existing.correlation) > limit:
                return True
        return False

    async def distribute_capital_adaptively(self, mode: TradingMode, 
                                          selected_pairs: List[PairAnalysis]) -> Dict[str, CapitalAllocation]:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            total_capital = await self.get_total_capital()
            if total_capital <= 0:
                self.logger.warning("‚ö†Ô∏è –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª —Ä–∞–≤–µ–Ω –Ω—É–ª—é")
                return {}
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ AUTOMATIC –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if mode == TradingMode.AUTOMATIC:
                mode_config = self.get_adaptive_mode_config(total_capital)
                self.logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∞ ${total_capital:.2f}")
            else:
                mode_config = self.trading_modes[mode]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            pair_count = mode_config['max_pairs']
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            pairs_to_use = selected_pairs[:pair_count]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            allocations = {}
            
            for i, pair in enumerate(pairs_to_use):
                # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                base_allocation = total_capital / len(pairs_to_use)
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è "–ª—É—á—à–µ–π" –ø–∞—Ä—ã (60/40)
                if i == 0:
                    allocation = base_allocation * 1.2
                else:
                    allocation = base_allocation * 0.8
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
                min_capital = mode_config['min_capital_per_pair']
                if allocation < min_capital:
                    allocation = min_capital
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
                risk_level = mode_config.get('risk_level', 'medium')
                profit_target = allocation * 0.1  # 10% —Ü–µ–ª—å
                stop_loss = allocation * (mode_config['max_drawdown_pct'] / 100)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                allocation_obj = CapitalAllocation(
                    symbol=pair.symbol,
                    allocated_amount=allocation,
                    min_amount=min_capital,
                    max_amount=allocation * 2.0,
                    risk_level=risk_level,
                    profit_target=profit_target,
                    stop_loss=stop_loss,
                    trailing_stop=True,
                    position_size=allocation / pair.atr if pair.atr > 0 else 0
                )
                
                allocations[pair.symbol] = allocation_obj
                
                self.logger.info(f"üí∞ {pair.symbol}: ${allocation:.2f} "
                               f"(—Ä–∏—Å–∫: {risk_level}, —Ü–µ–ª—å: ${profit_target:.2f})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._allocation_history.append({
                'timestamp': datetime.now().isoformat(),
                'mode': mode.value,
                'total_capital': total_capital,
                'tier': mode_config.get('tier', 'unknown'),
                'allocations': {k: v.allocated_amount for k, v in allocations.items()}
            })
            
            return allocations
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
            return {}

    def _determine_pair_count(self, total_capital: float, mode: TradingMode) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        if total_capital < 400:
            return 1
        elif total_capital < 800:
            return 1
        elif total_capital < 1500:
            return 2
        elif total_capital < 3000:
            return 3
        else:
            return 4

    def _determine_risk_level(self, pair: PairAnalysis, mode: TradingMode) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –¥–ª—è –ø–∞—Ä—ã"""
        if pair.risk_score < 0.3:
            return "low"
        elif pair.risk_score < 0.6:
            return "medium"
        else:
            return "high"

    async def get_total_capital(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        try:
            if not self.ex:
                return 0.0
            
            balance = self.ex.fetch_balance({'type': 'spot'})
            total_usdt = float(balance.get('total', {}).get('USDT', 0.0))
            
            if total_usdt <= 0:
                self.logger.warning("‚ö†Ô∏è –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –≤ USDT —Ä–∞–≤–µ–Ω –Ω—É–ª—é")
                return 0.0
            
            self.logger.info(f"üí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_usdt:.2f} USDT")
            return total_usdt
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
            return 0.0

    async def update_floating_profit(self, symbol: str, current_price: float, 
                                   allocation: CapitalAllocation) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞"""
        try:
            if symbol not in self._profit_tracking:
                self._profit_tracking[symbol] = {
                    'entry_price': current_price,
                    'max_profit': 0.0,
                    'trailing_active': False,
                    'partial_closed': False
                }
            
            tracking = self._profit_tracking[symbol]
            entry_price = tracking['entry_price']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å
            current_profit = (current_price - entry_price) / entry_price * allocation.allocated_amount
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            if current_profit > tracking['max_profit']:
                tracking['max_profit'] = current_profit
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
            if (current_profit >= self.floating_profit_config['min_profit_for_trailing'] and 
                not tracking['trailing_active']):
                tracking['trailing_active'] = True
                self.logger.info(f"üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥ –¥–ª—è {symbol} –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ ${current_profit:.2f}")
            
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
            if (current_profit >= allocation.profit_target and 
                not tracking['partial_closed']):
                tracking['partial_closed'] = True
                self.logger.info(f"üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {symbol} –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ ${current_profit:.2f}")
            
            # –†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
            if current_profit >= self.floating_profit_config['reinvestment_threshold']:
                self.logger.info(f"üîÑ –†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol} –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ ${current_profit:.2f}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            return {
                'current_profit': current_profit,
                'max_profit': tracking['max_profit'],
                'trailing_active': tracking['trailing_active'],
                'partial_closed': tracking['partial_closed'],
                'profit_pct': (current_profit / allocation.allocated_amount) * 100
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è {symbol}: {e}")
            return {}

    async def get_allocation_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é"""
        try:
            total_allocated = sum(
                allocation.allocated_amount 
                for allocation in self._allocation_history[-1].get('allocations', {}).values()
            ) if self._allocation_history else 0
            
            active_pairs = len(self._profit_tracking)
            total_profit = sum(
                tracking.get('max_profit', 0) 
                for tracking in self._profit_tracking.values()
            )
            
            return {
                'total_allocated': total_allocated,
                'active_pairs': active_pairs,
                'total_profit': total_profit,
                'allocation_history': self._allocation_history[-5:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                'profit_tracking': self._profit_tracking
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {}

    def get_trading_mode_recommendation(self, total_capital: float) -> TradingMode:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        if total_capital < 800:
            return TradingMode.CONSERVATIVE
        elif total_capital < 2000:
            return TradingMode.AUTOMATIC
        else:
            return TradingMode.AGGRESSIVE

    def get_adaptive_mode_config(self, total_capital: float, market_conditions: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ - —É–≤–µ–ª–∏—á–µ–Ω—ã –ª–∏–º–∏—Ç—ã –ø–∞—Ä
        capital_tiers = [
            {'min': 0, 'max': 400, 'tier': 'micro', 'pairs': 2, 'min_capital': 200, 'risk': 'low'},
            {'min': 400, 'max': 800, 'tier': 'small', 'pairs': 3, 'min_capital': 200, 'risk': 'low'},
            {'min': 800, 'max': 1500, 'tier': 'medium', 'pairs': 4, 'min_capital': 200, 'risk': 'medium'},
            {'min': 1500, 'max': 3000, 'tier': 'large', 'pairs': 5, 'min_capital': 200, 'risk': 'medium'},
            {'min': 3000, 'max': 5000, 'tier': 'xlarge', 'pairs': 6, 'min_capital': 200, 'risk': 'high'},
            {'min': 5000, 'max': float('inf'), 'tier': 'mega', 'pairs': 8, 'min_capital': 200, 'risk': 'high'}
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏—Ä –∫–∞–ø–∏—Ç–∞–ª–∞
        current_tier = None
        for tier in capital_tiers:
            if tier['min'] <= total_capital < tier['max']:
                current_tier = tier
                break
        
        if not current_tier:
            current_tier = capital_tiers[-1]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏—Ä–∞
        adaptive_config = {
            'tier': current_tier['tier'],
            'min_pairs': current_tier['pairs'],
            'max_pairs': current_tier['pairs'],
            'min_capital_per_pair': current_tier['min_capital'],
            'risk_level': current_tier['risk'],
            'volatility_range': self._get_volatility_range(current_tier['risk']),
            'correlation_limit': self._get_correlation_limit(current_tier['risk']),
            'liquidity_threshold': self._get_liquidity_threshold(current_tier['tier']),
            'max_drawdown_pct': self._get_drawdown_limit(current_tier['risk'])
        }
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
        if market_conditions:
            adaptive_config = self._adapt_to_market_conditions(adaptive_config, market_conditions)
        
        self.logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∞ ${total_capital:.2f}:")
        self.logger.info(f"   üìä –¢–∏—Ä: {adaptive_config['tier']}")
        self.logger.info(f"   üìà –ü–∞—Ä: {adaptive_config['min_pairs']}-{adaptive_config['max_pairs']}")
        self.logger.info(f"   üí∞ –ú–∏–Ω–∏–º—É–º –Ω–∞ –ø–∞—Ä—É: ${adaptive_config['min_capital_per_pair']}")
        self.logger.info(f"   ‚ö†Ô∏è –†–∏—Å–∫: {adaptive_config['risk_level']}")
        self.logger.info(f"   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {adaptive_config['volatility_range'][0]}-{adaptive_config['volatility_range'][1]}%")
        self.logger.info(f"   üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: >${adaptive_config['liquidity_threshold']:,}")
        
        return adaptive_config

    def _get_volatility_range(self, risk_level: str) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        ranges = {
            'low': (0.1, 8.0),      # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π - –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            'medium': (0.1, 10.0),  # –£–º–µ—Ä–µ–Ω–Ω—ã–π - –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω  
            'high': (0.1, 15.0)     # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π - –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        }
        return ranges.get(risk_level, (0.1, 10.0))

    def _get_correlation_limit(self, risk_level: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        limits = {
            'low': 0.7,     # –°–º—è–≥—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            'medium': 0.8,  # –°–º—è–≥—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
            'high': 0.9     # –û—á–µ–Ω—å –º—è–≥–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å
        }
        return limits.get(risk_level, 0.8)

    def _get_liquidity_threshold(self, tier: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏—Ä–∞ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        thresholds = {
            'micro': 50000,     # $50K - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            'small': 100000,    # $100K - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            'medium': 200000,   # $200K - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            'large': 500000,    # $500K - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            'xlarge': 1000000,  # $1M - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            'mega': 2000000     # $2M - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        }
        return thresholds.get(tier, 100000)

    def _get_drawdown_limit(self, risk_level: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Å–∞–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        limits = {
            'low': 3.0,     # 3% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            'medium': 5.0,  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            'high': 8.0     # 8% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        }
        return limits.get(risk_level, 5.0)

    def _adapt_to_market_conditions(self, config: Dict[str, Any], market_conditions: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º"""
        # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if market_conditions.get('high_volatility', False):
            config['liquidity_threshold'] *= 1.5
            config['volatility_range'] = (config['volatility_range'][0], config['volatility_range'][1] * 1.2)
        
        # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –º–æ–∂–µ–º —Å–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if market_conditions.get('low_volatility', False):
            config['liquidity_threshold'] *= 0.8
            config['correlation_limit'] = min(0.9, config['correlation_limit'] + 0.1)
        
        # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
        if market_conditions.get('trending_market', False):
            config['max_pairs'] = min(5, config['max_pairs'] + 1)
        
        return config
