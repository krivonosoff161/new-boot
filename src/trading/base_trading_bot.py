# v3.0 (+–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏, —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤.
v3.0: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ç—Ä–µ–º—è —Ä–µ–∂–∏–º–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π, –±–∞–∑–æ–≤—ã–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π).
"""
import ccxt.async_support as ccxt
import asyncio
import time
import logging
import signal
import os
import sys
import json
import math
import collections
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from core.log_helper import build_logger
from core.config_manager import ConfigManager
from core.exchange_mode_manager import exchange_mode_manager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

@dataclass
class TradeEvent:
    """–°–æ–±—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏"""
    ts: float
    symbol: str
    side: str  # buy/sell
    price: float
    qty: float
    pnl: float = 0.0

class BaseTradingBot:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤.
    v3.0: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ä–µ–∂–∏–º–∞–º–∏.
    """

    def __init__(self, bot_type: str, user_id: int, config: Dict[str, any] = None):
        """
        –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤.
        :param bot_type: –¢–∏–ø –±–æ—Ç–∞ ('grid' –∏–ª–∏ 'scalp')
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        self.bot_type = bot_type
        self.user_id = user_id
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = build_logger(f"{bot_type}_bot_{user_id}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_manager = ConfigManager()
        self.config = config or self.config_manager.get_config()
        
        # v3.0: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.current_mode = "base"
        self.mode_switch_count = 0
        self.last_mode_switch = 0
        self.market_analysis_history = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.running = True
        self.last_notification = 0
        
        # –ö–∞–ø–∏—Ç–∞–ª
        self.total_capital = 0
        self.working_capital = 0
        self.reserve_capital = 0
        self.allocated_capital = {}  # {symbol: float}
        self.last_redistribution = 0
        self.redistribution_interval = self.config.get('redistribution_interval', 1800)  # 30 –º–∏–Ω—É—Ç
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–¥–µ–ª–æ–∫ –∑–∞ 24 —á–∞—Å–∞
        self.trades_24h: List[TradeEvent] = []
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        self._balance_cache = {'data': None, 'time': 0}
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ª–æ–≥–æ–≤
        self._last_log_msg = ""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ (–±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —á–µ—Ä–µ–∑ exchange_mode_manager)
        self.ex = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.symbols = self.config.get('symbols', ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT', 'ADA/USDT', 'DOT/USDT'])
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def setup_exchange(self, exchange_name: str, api_key: str, secret: str, passphrase: str = None, mode: str = "demo"):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ Exchange Mode Manager
        """
        try:
            self.ex = exchange_mode_manager.create_exchange_instance(
                exchange_name=exchange_name,
                api_key=api_key,
                secret=secret,
                passphrase=passphrase,
                mode=mode
            )
            self.logger.info(f"‚úÖ –ë–∏—Ä–∂–∞ {exchange_name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ {mode}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ {exchange_name}: {e}")
            return False

    async def send_notification(self, msg: str, chat_ids: List[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram)"""
        now = time.time()
        if now - self.last_notification < 2:
            await asyncio.sleep(2 - (now - self.last_notification))
        self.last_notification = now
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.logger.info(f"üì¢ NOTIFICATION: {msg}")
        
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    async def get_balances(self) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        """
        cache_ttl = self.config.get('balance_cache_sec', 60)
        current_time = time.time()
        
        if (self._balance_cache['data'] is not None and
            current_time - self._balance_cache['time'] < cache_ttl):
            self.logger.debug("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –±–∞–ª–∞–Ω—Å–∞")
            return self._balance_cache['data']
        
        if not self.ex:
            self.logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return {}
        
        try:
            bal = self.ex.fetch_balance()
            balances = {}
            for symbol in self.symbols:
                base_currency = symbol.split('/')[0]
                quote_currency = symbol.split('/')[1]
                base_free = bal['free'].get(base_currency, 0)
                base_total = bal['total'].get(base_currency, 0)
                quote_free = bal['free'].get(quote_currency, 0)
                quote_total = bal['total'].get(quote_currency, 0)
                balances[symbol] = {
                    'base': base_total,
                    'quote': quote_total,
                    'free_base': base_free,
                    'free_quote': quote_free
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._balance_cache['data'] = balances
            self._balance_cache['time'] = current_time
            return balances
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return self._balance_cache['data'] if self._balance_cache['data'] else {}

    async def update_capital(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–ª–µ"""
        if not self.ex:
            self.logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        try:
            balance = await self.ex.fetch_balance()
            
            # –ü–æ–ª—É—á–∞–µ–º USDT –±–∞–ª–∞–Ω—Å
            usdt_balance_raw = balance.get('total', {}).get('USDT', 0)
            usdt_balance = float(usdt_balance_raw) if usdt_balance_raw else 0.0
            
            if usdt_balance < 0:
                self.logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {usdt_balance}")
                usdt_balance = 0.0
            
            self.total_capital = usdt_balance
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            balances = await self.get_balances()
            for symbol in self.symbols:
                symbol_balance = balances.get(symbol, {'base': 0, 'quote': 0})
                try:
                    ticker = await self.ex.fetch_ticker(symbol)
                    price = ticker['last']
                    base_equity = symbol_balance['base'] * price
                    quote_equity = symbol_balance['quote']
                    equity = base_equity + quote_equity
                    self.logger.debug(f"üí∞ {symbol}: {symbol_balance['base']:.6f} {symbol.split('/')[0]} + {symbol_balance['quote']:.2f} {symbol.split('/')[1]} ‚âà {equity:.2f} USDT")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}: {e}")
            
            self.logger.info(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª: –í—Å–µ–≥–æ=${self.total_capital:.2f} USDT")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")

    async def check_min_lot(self, symbol: str, amount: float, price: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        """
        if not self.ex:
            return False
            
        try:
            market_info = self.ex.market(symbol)
            
            if not market_info:
                self.logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ")
                return False
            
            min_amount = market_info.get('limits', {}).get('amount', {}).get('min', 0)
            min_cost = market_info.get('limits', {}).get('cost', {}).get('min', 0)
            
            if amount < min_amount:
                self.logger.info(f"‚ö†Ô∏è {symbol}: –û–±—ä–µ–º {amount} < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_amount}")
                return False
                
            cost = amount * price
            if cost < min_cost:
                self.logger.info(f"‚ö†Ô∏è {symbol}: –°—Ç–æ–∏–º–æ—Å—Ç—å {cost:.4f} < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {min_cost}")
                return False
                
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è {symbol}: {e}")
            return False

    async def log_trade(self, event: TradeEvent):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        msg = (f"{event.symbol} {'–û–¢–ö–†–´–¢–ò–ï' if event.pnl == 0 else '–ó–ê–ö–†–´–¢–ò–ï'}\n"
               f"üí∞ –¶–µ–Ω–∞: {event.price:.4f}\n"
               f"üì¶ –û–±—ä—ë–º: {event.qty:.4f}")
        if event.pnl != 0:
            msg += f"\nüìä PnL: {event.pnl:.2f} $"
            
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ª–æ–≥–æ–≤
        if msg == self._last_log_msg:
            return
        self._last_log_msg = msg
            
        self.logger.info(msg)
        await self.send_notification(msg)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±—É—Ñ–µ—Ä
        self.trades_24h.append(event)

    async def distribute_capital(self):
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        """
        self.logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è {self.bot_type}...")
        
        total_allocated = 0
        base_capital_per_symbol = self.working_capital / len(self.symbols)
        
        for symbol in self.symbols:
            allocated_capital = base_capital_per_symbol
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
            exposure_limit = self.config.get(self.bot_type, {}).get('exposure_limit', 1.0)
            max_allowed_for_symbol = self.total_capital * exposure_limit
            if allocated_capital > max_allowed_for_symbol:
                allocated_capital = max_allowed_for_symbol
                self.logger.info(f"‚ö†Ô∏è {symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ ${allocated_capital:.2f}")
                
            self.allocated_capital[symbol] = allocated_capital
            total_allocated += allocated_capital
            self.logger.info(f"üí∞ {symbol}: –≤—ã–¥–µ–ª–µ–Ω–æ ${allocated_capital:.2f}")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        self.reserve_capital = self.total_capital - total_allocated
        max_allowed_reserve = self.total_capital * 0.5
        if self.reserve_capital > max_allowed_reserve:
            self.reserve_capital = max_allowed_reserve
        self.logger.info(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤: ${self.reserve_capital:.2f} (–º–∞–∫—Å. {max_allowed_reserve:.2f})")
        self.logger.info(f"‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è {self.bot_type} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    async def analyze_market_conditions(self, symbols: List[str]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.ex:
            return {'symbols_analysis': {}, 'overall_mode': 'base', 'timestamp': datetime.now().isoformat()}
            
        try:
            analysis_results = {}
            
            for symbol in symbols:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ OHLCV
                    ohlcv = await self.ex.fetch_ohlcv(symbol, '1h', limit=100)
                    if len(ohlcv) < 50:
                        self.logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö OHLCV ({len(ohlcv)} < 50)")
                        continue
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
                    ohlcv_array = np.array(ohlcv)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                    symbol_analysis = await self._analyze_symbol(symbol, ohlcv_array)
                    analysis_results[symbol] = symbol_analysis
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            overall_mode = self._determine_overall_mode(analysis_results)
            
            return {
                'symbols_analysis': analysis_results,
                'overall_mode': overall_mode,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return {'symbols_analysis': {}, 'overall_mode': 'base', 'timestamp': datetime.now().isoformat()}

    async def _analyze_symbol(self, symbol: str, ohlcv: np.ndarray) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            closes = ohlcv[:, 4]
            highs = ohlcv[:, 2]
            lows = ohlcv[:, 3]
            volumes = ohlcv[:, 5]
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = self._calculate_volatility(closes, highs, lows)
            volatility_level = self._classify_volatility(volatility)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            trend_strength = self._calculate_trend_strength(closes, highs, lows)
            trend_direction = self._determine_trend_direction(closes)
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_analysis = self._analyze_volume(volumes)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            symbol_mode = self._determine_symbol_mode(
                volatility_level, trend_strength, volume_analysis
            )
            
            return {
                'symbol': symbol,
                'volatility': volatility,
                'volatility_level': volatility_level,
                'trend_strength': trend_strength,
                'trend_direction': trend_direction,
                'volume_analysis': volume_analysis,
                'recommended_mode': symbol_mode,
                'confidence': self._calculate_confidence(volatility, trend_strength, volume_analysis)
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return {
                'symbol': symbol,
                'volatility': 0.01,
                'volatility_level': 'medium',
                'trend_strength': 0,
                'trend_direction': 'sideways',
                'volume_analysis': {'level': 'normal', 'trend': 'stable'},
                'recommended_mode': 'base',
                'confidence': 50
            }

    def _calculate_volatility(self, closes: np.ndarray, highs: np.ndarray, lows: np.ndarray) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(closes) < 20:
            return 0.01
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        returns = np.diff(closes) / closes[:-1]
        volatility = np.std(returns)
        
        return volatility

    def _classify_volatility(self, volatility: float) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if volatility < 0.01:
            return 'low'
        elif volatility < 0.03:
            return 'medium'
        else:
            return 'high'

    def _calculate_trend_strength(self, closes: np.ndarray, highs: np.ndarray, lows: np.ndarray) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        if len(closes) < 20:
            return 0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞
        x = np.arange(len(closes[-20:]))
        y = closes[-20:]
        slope = np.polyfit(x, y, 1)[0]
        
        return abs(slope) / closes[-1] * 100  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞

    def _determine_trend_direction(self, closes: np.ndarray) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
        if len(closes) < 20:
            return 'sideways'
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        short_avg = np.mean(closes[-5:])
        long_avg = np.mean(closes[-20:])
        
        if short_avg > long_avg * 1.02:
            return 'uptrend'
        elif short_avg < long_avg * 0.98:
            return 'downtrend'
        else:
            return 'sideways'

    def _analyze_volume(self, volumes: np.ndarray) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤"""
        if len(volumes) < 20:
            return {'level': 'normal', 'trend': 'stable'}
        
        avg_volume = np.mean(volumes[-20:])
        current_volume = volumes[-1]
        
        if current_volume > avg_volume * 1.5:
            volume_level = 'high'
        elif current_volume < avg_volume * 0.5:
            volume_level = 'low'
        else:
            volume_level = 'normal'
        
        volume_trend = 'increasing' if current_volume > volumes[-5] else 'decreasing'
        
        return {
            'level': volume_level,
            'trend': volume_trend,
            'current_volume': current_volume,
            'avg_volume': avg_volume
        }

    def _determine_symbol_mode(self, volatility_level: str, trend_strength: float, volume_analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        if volatility_level == 'high' and volume_analysis['level'] == 'high':
            return 'aggressive'
        elif volatility_level == 'low' and volume_analysis['level'] == 'low':
            return 'conservative'
        else:
            return 'base'

    def _calculate_confidence(self, volatility: float, trend_strength: float, volume_analysis: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        confidence = 50  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        if volatility > 0.01:
            confidence += 20
        
        if trend_strength > 1.0:
            confidence += 20
        
        if volume_analysis['level'] == 'high':
            confidence += 10
        
        return min(confidence, 100)

    def _determine_overall_mode(self, symbols_analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not symbols_analysis:
            return 'base'
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∂–∏–º–æ–≤
        mode_counts = {'conservative': 0, 'base': 0, 'aggressive': 0}
        total_confidence = 0
        
        for symbol, analysis in symbols_analysis.items():
            mode = analysis['recommended_mode']
            confidence = analysis['confidence']
            
            mode_counts[mode] += confidence
            total_confidence += confidence
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        if total_confidence > 0:
            for mode in mode_counts:
                mode_counts[mode] = mode_counts[mode] / total_confidence
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤–µ—Å–æ–º
        overall_mode = max(mode_counts, key=mode_counts.get)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.market_analysis_history.append({
            'mode': overall_mode,
            'timestamp': datetime.now(),
            'mode_counts': mode_counts
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.market_analysis_history) > 100:
            self.market_analysis_history = self.market_analysis_history[-100:]
        
        return overall_mode

    async def analyze_and_select_mode(self, symbols: List[str]) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            market_analysis = await self.analyze_market_conditions(symbols)
            recommended_mode = market_analysis['overall_mode']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º
            self._update_mode(recommended_mode)
            
            return self.current_mode
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∂–∏–º–∞: {e}")
            return self.current_mode

    def _update_mode(self, new_mode: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self._should_switch_mode(new_mode):
            self.logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {self.current_mode} -> {new_mode}")
            self.current_mode = new_mode
            self.mode_switch_count += 1
            self.last_mode_switch = time.time()
        else:
            self.logger.debug(f"–†–µ–∂–∏–º –æ—Å—Ç–∞–ª—Å—è: {self.current_mode} (–Ω–æ–≤—ã–π: {new_mode})")

    def _should_switch_mode(self, new_mode: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º"""
        if new_mode == self.current_mode:
            return False
        
        current_time = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ (5 –º–∏–Ω—É—Ç)
        min_interval = 300
        if current_time - self.last_mode_switch < min_interval:
            return False
        
        return True

    def get_mode_parameters(self, bot_type: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            if bot_type not in self.config or 'modes' not in self.config[bot_type]:
                return {}
            
            modes = self.config[bot_type]['modes']
            if self.current_mode not in modes:
                return modes.get('base', {})
            
            return modes[self.current_mode]
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–∂–∏–º–∞: {e}")
            return {}

    async def execute_strategy(self):
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö.
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ 'execute_strategy' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")

    async def close_all_positions(self):
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö.
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ 'close_all_positions' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not self.ex:
            self.logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        try:
            await self.ex.load_markets()
            await self.update_capital()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
            self.working_capital = self.total_capital * 0.5
            self.reserve_capital = self.total_capital * 0.5
            self.logger.info(f"üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: –í—Å–µ–≥–æ=${self.total_capital:.2f}, "
                            f"–†–∞–±–æ—á–∏–π=${self.working_capital:.2f}, "
                            f"–†–µ–∑–µ—Ä–≤=${self.reserve_capital:.2f}")
            
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
            await self.distribute_capital()
            
            self.logger.info(f"üü¢ {self.bot_type.capitalize()} Bot –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {self.total_capital:.2f} USDT")
            await self.send_notification(f"üü¢ {self.bot_type.capitalize()} Bot –∑–∞–ø—É—â–µ–Ω. –ö–∞–ø–∏—Ç–∞–ª: {self.total_capital:.2f} USDT")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                try:
                    await self.update_capital()
                    
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
                    current_time = time.time()
                    if current_time - self.last_redistribution > self.redistribution_interval:
                        await self.distribute_capital()
                        self.last_redistribution = current_time
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–∞
                    await self.analyze_and_select_mode(self.symbols)
                    
                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
                    await self.execute_strategy()
                    
                    # –ü–∞—É–∑–∞
                    sleep_interval = self.config.get(self.bot_type, {}).get('sleep_interval', 15)
                    await asyncio.sleep(sleep_interval)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ {self.bot_type}: {e}")
                    await asyncio.sleep(30)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self._shutdown()

    async def _shutdown(self):
        """Graceful shutdown"""
        self.logger.info(f"üõë {self.bot_type.capitalize()} graceful shutdown...")
        try:
            await self.close_all_positions()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π
        try:
            if hasattr(self, 'ex') and self.ex:
                await self.ex.close()
                self.logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π: {e}")
        
        self.running = False

    def exit_gracefully(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        self.logger.info(f"üõë {self.bot_type.capitalize()} graceful shutdown (—Å–∏–≥–Ω–∞–ª {signum})")
        self.running = False


