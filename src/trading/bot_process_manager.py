"""
Bot Process Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤
"""
import os
import sys
import json
import time
import asyncio
import subprocess
import threading
import signal
from typing import Dict, List, Optional, Any
from datetime import datetime
from src.core.log_helper import build_logger

class BotProcessManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = build_logger("bot_process_manager")
        self.running_bots = {}  # {bot_id: process_info}
        self.bot_scripts = {
            'grid': 'src/trading/real_grid_bot_runner.py',
            'scalp': 'src/trading/scalp_bot_runner.py'
        }
    
    def start_bot(self, bot_id: str, bot_type: str, user_id: int, config: Dict[str, Any]) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            if bot_id in self.running_bots:
                self.logger.warning(f"–ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±–æ—Ç–∞
            bot_config = {
                'bot_id': bot_id,
                'user_id': user_id,
                'bot_type': bot_type,
                'config': config,
                'started_at': datetime.now().isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
            config_file = f'data/bot_configs/{bot_id}_config.json'
            os.makedirs(os.path.dirname(config_file), exist_ok=True)
            
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(bot_config, f, ensure_ascii=False, indent=2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            if bot_type in self.bot_scripts:
                script_path = self.bot_scripts[bot_type]
                
                # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
                cmd = [
                    sys.executable, 
                    script_path,
                    '--config', config_file,
                    '--bot-id', bot_id,
                    '--user-id', str(user_id)
                ]
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    cwd=os.getcwd(),
                    creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == 'nt' else 0
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                self.running_bots[bot_id] = {
                    'process': process,
                    'bot_type': bot_type,
                    'user_id': user_id,
                    'started_at': datetime.now().isoformat(),
                    'pid': process.pid,
                    'config_file': config_file
                }
                
                self.logger.info(f"‚úÖ –ë–æ—Ç {bot_id} ({bot_type}) –∑–∞–ø—É—â–µ–Ω —Å PID {process.pid}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª–µ
                self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id} –Ω–∞ 'running'")
                self._update_bot_status(bot_id, 'running', process.pid)
                self.logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ")
                
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞: {bot_type}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {e}")
            return False
    
    def stop_bot(self, bot_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if bot_id not in self.running_bots:
                self.logger.warning(f"–ë–æ—Ç {bot_id} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            bot_info = self.running_bots[bot_id]
            process = bot_info['process']
            pid = bot_info['pid']
            
            self.logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç {bot_id} (PID: {pid})")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    if os.name == 'nt':  # Windows
                        # –í Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        import subprocess as sp
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                            process.terminate()
                            process.wait(timeout=5)
                            self.logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        except subprocess.TimeoutExpired:
                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ taskkill
                            sp.run(['taskkill', '/F', '/T', '/PID', str(pid)], 
                                  capture_output=True, check=False)
                            self.logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ taskkill")
                    else:  # Unix/Linux
                        process.terminate()
                        try:
                            process.wait(timeout=5)
                        except subprocess.TimeoutExpired:
                            os.kill(pid, signal.SIGKILL)
                            process.wait()
                        self.logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                except Exception as stop_error:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {stop_error}")
                    # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                    try:
                        if os.name == 'nt':
                            import subprocess as sp
                            sp.run(['taskkill', '/F', '/T', '/PID', str(pid)], 
                                  capture_output=True, check=False)
                        else:
                            os.kill(pid, signal.SIGKILL)
                        self.logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    except Exception as force_error:
                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å: {force_error}")
                        return False
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
            del self.running_bots[bot_id]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try:
                if os.path.exists(bot_info['config_file']):
                    os.remove(bot_info['config_file'])
            except:
                pass
            
            self.logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª–µ
            self._update_bot_status(bot_id, 'stopped')
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
            return False
    
    def get_bot_status(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        if bot_id in self.running_bots:
            bot_info = self.running_bots[bot_id]
            process = bot_info['process']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            if process.poll() is None:
                return {
                    'status': 'running',
                    'pid': bot_info['pid'],
                    'started_at': bot_info['started_at'],
                    'bot_type': bot_info['bot_type'],
                    'user_id': bot_info['user_id']
                }
            else:
                # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                del self.running_bots[bot_id]
                self._update_bot_status(bot_id, 'stopped')
                return {
                    'status': 'stopped',
                    'pid': None,
                    'started_at': bot_info['started_at'],
                    'bot_type': bot_info['bot_type'],
                    'user_id': bot_info['user_id']
                }
        else:
            return None
    
    def get_all_bots_status(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        status = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã
        for bot_id in list(self.running_bots.keys()):
            bot_status = self.get_bot_status(bot_id)
            if bot_status:
                status[bot_id] = bot_status
        
        return status
    
    def _update_bot_status(self, bot_id: str, status: str, pid: Optional[int] = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ"""
        try:
            self.logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ {bot_id} –Ω–∞ '{status}'")
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
            try:
                with open('data/bot_status.json', 'r', encoding='utf-8') as f:
                    bots_status = json.load(f)
                self.logger.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {len(bots_status)} –±–æ—Ç–æ–≤")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞: {e}")
                bots_status = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if bot_id in bots_status:
                old_status = bots_status[bot_id].get('status', 'unknown')
                bots_status[bot_id]['status'] = status
                bots_status[bot_id]['last_update'] = datetime.now().isoformat()
                if pid:
                    bots_status[bot_id]['pid'] = pid
                self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id}: {old_status} -> {status}")
            else:
                bots_status[bot_id] = {
                    'id': bot_id,
                    'status': status,
                    'last_update': datetime.now().isoformat(),
                    'pid': pid
                }
                self.logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –±–æ—Ç–∞ {bot_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('data/bot_status.json', 'w', encoding='utf-8') as f:
                json.dump(bots_status, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ {bot_id}: {e}")
    
    def cleanup_stopped_bots(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        stopped_bots = []
        
        for bot_id, bot_info in self.running_bots.items():
            process = bot_info['process']
            if process.poll() is not None:  # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                stopped_bots.append(bot_id)
        
        for bot_id in stopped_bots:
            del self.running_bots[bot_id]
            self._update_bot_status(bot_id, 'stopped')
            self.logger.info(f"üßπ –û—á–∏—â–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç {bot_id}")
    
    def force_stop_all_bots(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        self.logger.info("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã
        for bot_id in list(self.running_bots.keys()):
            self.stop_bot(bot_id)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–∞–º–∏
        stopped_pids = []
        try:
            import psutil
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] == 'python.exe' or proc.info['name'] == 'python':
                        cmdline = proc.info['cmdline']
                        if cmdline and any('real_grid_bot_runner.py' in str(cmd) for cmd in cmdline):
                            self.logger.info(f"üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                            stopped_pids.append(proc.info['pid'])
                            proc.kill()
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ –Ω–∞ 'stopped'
        try:
            with open('data/bot_status.json', 'r', encoding='utf-8') as f:
                bots_status = json.load(f)
            
            for bot_id, bot_info in bots_status.items():
                if bot_info.get('status') == 'running':
                    bot_info['status'] = 'stopped'
                    bot_info['last_update'] = datetime.now().isoformat()
                    self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id} –Ω–∞ 'stopped'")
            
            with open('data/bot_status.json', 'w', encoding='utf-8') as f:
                json.dump(bots_status, f, ensure_ascii=False, indent=2)
            
            self.logger.info("üíæ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–∞–π–ª–µ: {e}")
        
        self.logger.info("‚úÖ –í—Å–µ –±–æ—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot_process_manager = BotProcessManager()