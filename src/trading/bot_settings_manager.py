# v1.0 - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
"""

import json
import os
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from core.log_helper import build_logger

class BotSettingsManager:
    def __init__(self, user_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.user_id = user_id
        self.logger = build_logger(f"bot_settings_manager_{user_id}")
        self.settings_dir = "data/bot_settings"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(self.settings_dir, exist_ok=True)
    
    def save_bot_settings(self, bot_id: str, settings: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            full_settings = {
                'bot_id': bot_id,
                'user_id': self.user_id,
                'settings': settings,
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            settings_file = os.path.join(self.settings_dir, f"{bot_id}_settings.json")
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(full_settings, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ {bot_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ {bot_id}: {e}")
            return False
    
    def load_bot_settings(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            settings_file = os.path.join(self.settings_dir, f"{bot_id}_settings.json")
            if not os.path.exists(settings_file):
                return None
            
            with open(settings_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            return data.get('settings', {})
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ {bot_id}: {e}")
            return None
    
    def get_trading_pairs(self, bot_id: str) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            List —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        """
        settings = self.load_bot_settings(bot_id)
        if not settings:
            return []
        
        return settings.get('trading_pairs', [])
    
    def get_bot_mode(self, bot_id: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            str: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (conservative, base, aggressive, auto)
        """
        settings = self.load_bot_settings(bot_id)
        if not settings:
            return 'base'
        
        return settings.get('mode', 'base')
    
    def get_total_capital(self, bot_id: str) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            float: –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª
        """
        settings = self.load_bot_settings(bot_id)
        if not settings:
            return 1000.0
        
        return float(settings.get('total_capital', 1000.0))
    
    def determine_mode_by_balance(self, balance: float) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            
        Returns:
            str: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º
        """
        if balance < 100:
            return 'conservative'  # –ú–∞–ª—ã–π –±–∞–ª–∞–Ω—Å - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        elif balance < 1000:
            return 'base'          # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å - –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º
        elif balance < 10000:
            return 'aggressive'    # –ë–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        else:
            return 'aggressive'    # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    
    def calculate_capital_distribution(self, bot_id: str, current_balance: Optional[float] = None) -> Dict[str, Dict[str, Any]]:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –ø–∞—Ä–∞–º
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            current_balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            
        Returns:
            Dict —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –ø–∞—Ä–∞–º
        """
        settings = self.load_bot_settings(bot_id)
        if not settings:
            return {}
        
        trading_pairs = settings.get('trading_pairs', [])
        if not trading_pairs:
            return {}
        
        mode = settings.get('mode', 'base')
        total_capital = current_balance or settings.get('total_capital', 1000.0)
        
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
        if mode == 'auto':
            mode = self.determine_mode_by_balance(total_capital)
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        mode_weights = {
            'conservative': {'base': 0.6, 'high': 0.3, 'low': 0.1},
            'base': {'base': 0.5, 'high': 0.4, 'low': 0.1},
            'aggressive': {'base': 0.3, 'high': 0.6, 'low': 0.1}
        }
        
        weights = mode_weights.get(mode, mode_weights['base'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–∞—Ä
        pair_priorities = {}
        for pair in trading_pairs:
            if 'BTC' in pair or 'ETH' in pair:
                pair_priorities[pair] = 'high'
            elif 'USDT' in pair:
                pair_priorities[pair] = 'base'
            else:
                pair_priorities[pair] = 'low'
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
        distribution = {}
        for pair in trading_pairs:
            priority = pair_priorities.get(pair, 'base')
            percentage = weights[priority] * 100 / len(trading_pairs)
            amount = (total_capital * percentage) / 100
            
            distribution[pair] = {
                'percentage': percentage,
                'amount': amount,
                'status': 'active',
                'priority': priority,
                'mode': mode
            }
        
        return distribution
    
    def update_bot_balance(self, bot_id: str, new_balance: float) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–∂–∏–º–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            new_balance: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            settings = self.load_bot_settings(bot_id)
            if not settings:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            settings['total_capital'] = new_balance
            
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
            if settings.get('mode') == 'auto':
                new_mode = self.determine_mode_by_balance(new_balance)
                settings['mode'] = new_mode
                self.logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –±–æ—Ç–∞ {bot_id} –Ω–∞ {new_mode} (–±–∞–ª–∞–Ω—Å: ${new_balance})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            return self.save_bot_settings(bot_id, settings)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ {bot_id}: {e}")
            return False
    
    def get_bot_settings(self, bot_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ (–∞–ª–∏–∞—Å –¥–ª—è load_bot_settings)
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        return self.load_bot_settings(bot_id)
    
    def get_bot_status(self, bot_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        
        Args:
            bot_id: ID –±–æ—Ç–∞
            
        Returns:
            Dict —Å –ø–æ–ª–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –±–æ—Ç–∞
        """
        settings = self.load_bot_settings(bot_id)
        if not settings:
            return {}
        
        trading_pairs = settings.get('trading_pairs', [])
        mode = settings.get('mode', 'base')
        total_capital = settings.get('total_capital', 1000.0)
        
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
        if mode == 'auto':
            mode = self.determine_mode_by_balance(total_capital)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        distribution = self.calculate_capital_distribution(bot_id, total_capital)
        
        return {
            'bot_id': bot_id,
            'mode': mode,
            'total_capital': total_capital,
            'trading_pairs': trading_pairs,
            'distribution': distribution,
            'pairs_count': len(trading_pairs),
            'active_pairs': len([p for p in distribution.values() if p.get('status') == 'active']),
            'last_updated': settings.get('updated_at', '–ù/–î')
        }


