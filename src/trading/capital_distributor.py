# v2.0 (+–ø—Ä–∞–≤–∫–∏: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞, working_capital, min_alloc)
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏.
v2.0: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞, –¥–æ–±–∞–≤–ª–µ–Ω—ã working_capital –∏ min_alloc.
v3.0: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Exchange Mode Manager –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
"""
import logging
import asyncio
import ccxt.async_support as ccxt
import os
from typing import Dict, List, Optional, Union, Any
from core.log_helper import build_logger
from core.config_manager import ConfigManager
from core.exchange_mode_manager import exchange_mode_manager

class CapitalDistributor:
    def __init__(self, exchange: ccxt.Exchange = None, user_id: int = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Capital Distributor
        
        Args:
            exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.ex = exchange
        self.user_id = user_id
        self.logger = build_logger(f"capital_distributor_{user_id}" if user_id else "capital_distributor")
        self.config_manager = ConfigManager()
        self.config = self.config_manager.get_config()

    async def get_total_capital(self) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –æ–¥–∏–Ω —Ä–∞–∑ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ USDT.
        v2.0: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è totalEq.
        v3.0: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            float: –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –≤ USDT
        """
        if not self.ex:
            self.logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return 0.0
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            balance = self.ex.fetch_balance({'type': 'spot'})
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–ª–∞–Ω—Å–∞
            if not isinstance(balance, dict):
                self.logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞")
                return 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ USDT –≤ –±–∞–ª–∞–Ω—Å–µ
            if 'total' not in balance:
                self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'total' –≤ –±–∞–ª–∞–Ω—Å–µ")
                return 0.0
            
            if 'USDT' not in balance['total']:
                self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç USDT –≤ –±–∞–ª–∞–Ω—Å–µ")
                return 0.0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            total_usdt_raw = balance['total']['USDT']
            
            if total_usdt_raw is None:
                self.logger.error("‚ùå USDT –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω None")
                return 0.0
            
            try:
                total_usdt = float(total_usdt_raw)
            except (ValueError, TypeError) as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDT –±–∞–ª–∞–Ω—Å–∞: {e}")
                return 0.0
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            if total_usdt < 0:
                self.logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT: {total_usdt}")
                return 0.0
            
            if total_usdt == 0:
                self.logger.warning("‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å USDT")
                return 0.0
            
            self.logger.info(f"üí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª (totalEq): ${total_usdt:.2f} USDT")
            return total_usdt
            
        except ccxt.NetworkError as e:
            self.logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
        except ccxt.ExchangeError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
            return 0.0

    async def distribute_for_strategy(self, strategy_type: str, symbols: list) -> dict:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        v2.0: –î–æ–±–∞–≤–ª–µ–Ω—ã working_capital –∏ min_alloc.
        v3.0: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
        
        Args:
            strategy_type: –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ('grid', 'scalp')
            symbols: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        """
        try:
            total_capital = await self.get_total_capital()
            if total_capital <= 0:
                self.logger.warning("‚ö†Ô∏è –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω.")
                return {}

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
            capital_split = self.config.get('capital_split', {'grid': 0.5, 'scalp': 0.5})
            working_capital_ratio = self.config.get('working_capital_ratio', 0.5)
            
            working_capital = total_capital * working_capital_ratio
            strategy_share = capital_split.get(strategy_type, 0.5)
            allocated_for_strategy = working_capital * strategy_share

            self.logger.info(f"üí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_capital:.2f} USDT")
            self.logger.info(f"üí∞ –†–∞–±–æ—á–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${working_capital:.2f} USDT ({working_capital_ratio*100:.1f}%)")
            self.logger.info(f"üìä –î–æ–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_type}': {strategy_share*100:.1f}% -> ${allocated_for_strategy:.2f} USDT")

            min_alloc = 50  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º $50
            base_allocation = allocated_for_strategy / len(symbols) if symbols else 0
            
            self.logger.info(f"üî¢ –†–∞—Å—á–µ—Ç: –æ–±—â–∏–π={total_capital:.2f}, —Ä–∞–±–æ—á–∏–π={working_capital:.2f}, –¥–ª—è_—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏={allocated_for_strategy:.2f}")
            self.logger.info(f"üî¢ –°–∏–º–≤–æ–ª–æ–≤={len(symbols)}, –±–∞–∑–æ–≤–æ–µ_–≤—ã–¥–µ–ª–µ–Ω–∏–µ={base_allocation:.2f}, –º–∏–Ω–∏–º—É–º={min_alloc}")

            allocations = {}
            skipped_symbols = []

            for symbol in symbols:
                if base_allocation >= min_alloc:
                    allocations[symbol] = base_allocation
                else:
                    skipped_symbols.append(symbol)
                    self.logger.warning(f"‚ö†Ô∏è {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è (${base_allocation:.2f} < ${min_alloc})")

            if skipped_symbols and allocations:
                remaining_to_distribute = sum([base_allocation for _ in skipped_symbols])
                bonus_per_active = remaining_to_distribute / len(allocations) if allocations else 0
                for symbol in allocations:
                    allocations[symbol] += bonus_per_active
                self.logger.info(f"üîÅ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {len(skipped_symbols)} –ø–∞—Ä –ø—Ä–æ–ø—É—â–µ–Ω–æ, –∫–∞–ø–∏—Ç–∞–ª –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω.")
            elif not allocations:
                self.logger.warning(f"‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_type}'.")

            self.logger.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è '{strategy_type}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –ø–∞—Ä: {len(allocations)}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(skipped_symbols)}")
            return allocations

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_type}': {e}")
            return {}

    async def redistribute_capital(self, current_allocations: Dict[str, float], 
                                 performance_data: Dict[str, Dict] = None) -> Dict[str, float]:
        """
        –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            current_allocations: –¢–µ–∫—É—â–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            performance_data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            
        Returns:
            dict: –ù–æ–≤—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
        """
        try:
            total_capital = await self.get_total_capital()
            if total_capital <= 0:
                self.logger.warning("‚ö†Ô∏è –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω.")
                return current_allocations

            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if not performance_data:
                self.logger.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                return current_allocations

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_scores = {}
            total_score = 0

            for symbol, data in performance_data.items():
                if symbol in current_allocations:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–∫√≥—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ PnL –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
                    pnl = data.get('pnl', 0)
                    trades_count = data.get('trades_count', 1)
                    win_rate = data.get('win_rate', 0.5)
                    
                    # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
                    score = 1.0
                    
                    # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π PnL
                    if pnl > 0:
                        score += pnl / current_allocations[symbol] * 0.1
                    
                    # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
                    if win_rate > 0.6:
                        score += 0.2
                    
                    # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
                    if win_rate < 0.4:
                        score -= 0.2
                    
                    # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–¥–µ–ª–æ–∫
                    if trades_count == 0:
                        score -= 0.3
                    
                    performance_scores[symbol] = max(score, 0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä
                    total_score += performance_scores[symbol]

            if total_score == 0:
                self.logger.warning("‚ö†Ô∏è –í—Å–µ —Å–∫–æ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é")
                return current_allocations

            # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
            working_capital_ratio = self.config.get('working_capital_ratio', 0.5)
            working_capital = total_capital * working_capital_ratio
            
            new_allocations = {}
            for symbol, current_allocation in current_allocations.items():
                if symbol in performance_scores:
                    # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    weight = performance_scores[symbol] / total_score
                    new_allocation = working_capital * weight
                    new_allocations[symbol] = new_allocation
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    new_allocations[symbol] = current_allocation

            self.logger.info(f"üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            for symbol, allocation in new_allocations.items():
                old_allocation = current_allocations.get(symbol, 0)
                change = allocation - old_allocation
                self.logger.info(f"üìä {symbol}: ${old_allocation:.2f} -> ${allocation:.2f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.2f})")

            return new_allocations

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
            return current_allocations

    async def get_symbol_analysis(self, symbols: List[str]) -> Dict[str, Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            
        Returns:
            dict: –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        if not self.ex:
            self.logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return {}

        try:
            analysis = {}
            
            for symbol in symbols:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
                    market = self.ex.market(symbol)
                    ticker = self.ex.fetch_ticker(symbol)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                    volume_24h = ticker.get('quoteVolume', 0)
                    spread = (ticker.get('ask', 0) - ticker.get('bid', 0)) / ticker.get('last', 1)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–º–≤–æ–ª–∞
                    priority = 'medium'
                    if volume_24h > 1000000:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                        priority = 'high'
                    elif volume_24h < 100000:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
                        priority = 'low'
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–µ–¥
                    liquidity = 'good'
                    if spread > 0.001:  # 0.1% —Å–ø—Ä–µ–¥
                        liquidity = 'poor'
                    elif spread > 0.0005:  # 0.05% —Å–ø—Ä–µ–¥
                        liquidity = 'medium'
                    
                    analysis[symbol] = {
                        'priority': priority,
                        'liquidity': liquidity,
                        'volume_24h': volume_24h,
                        'spread': spread,
                        'min_amount': market.get('limits', {}).get('amount', {}).get('min', 0),
                        'min_cost': market.get('limits', {}).get('cost', {}).get('min', 0),
                        'recommended_allocation': self._calculate_recommended_allocation(priority, liquidity, volume_24h)
                    }
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                    analysis[symbol] = {
                        'priority': 'low',
                        'liquidity': 'poor',
                        'volume_24h': 0,
                        'spread': 0.01,
                        'min_amount': 0,
                        'min_cost': 0,
                        'recommended_allocation': 0.5
                    }
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return {}

    def _calculate_recommended_allocation(self, priority: str, liquidity: str, volume_24h: float) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Args:
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–º–≤–æ–ª–∞ ('high', 'medium', 'low')
            liquidity: –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ('good', 'medium', 'poor')
            volume_24h: –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞
            
        Returns:
            float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (0.0 - 2.0)
        """
        base_allocation = 1.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if priority == 'high':
            base_allocation *= 1.5
        elif priority == 'low':
            base_allocation *= 0.5
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if liquidity == 'good':
            base_allocation *= 1.2
        elif liquidity == 'poor':
            base_allocation *= 0.7
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—ä–µ–º—É
        if volume_24h > 10000000:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            base_allocation *= 1.3
        elif volume_24h < 50000:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º
            base_allocation *= 0.6
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        return max(0.1, min(2.0, base_allocation))

    async def smart_distribute_for_strategy(self, strategy_type: str, symbols: list) -> dict:
        """
        –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            strategy_type: –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ('grid', 'scalp')
            symbols: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —É–º–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞–ø–∏—Ç–∞–ª–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            base_allocations = await self.distribute_for_strategy(strategy_type, symbols)
            if not base_allocations:
                return {}

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            symbol_analysis = await self.get_symbol_analysis(symbols)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            smart_allocations = {}
            total_coefficient = 0
            
            for symbol, base_allocation in base_allocations.items():
                if symbol in symbol_analysis:
                    coefficient = symbol_analysis[symbol]['recommended_allocation']
                    smart_allocations[symbol] = base_allocation * coefficient
                    total_coefficient += coefficient
                else:
                    smart_allocations[symbol] = base_allocation
                    total_coefficient += 1.0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if total_coefficient > 0:
                total_base = sum(base_allocations.values())
                for symbol in smart_allocations:
                    smart_allocations[symbol] = (smart_allocations[symbol] / total_coefficient) * total_base
            
            self.logger.info(f"üß† –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è '{strategy_type}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            for symbol, allocation in smart_allocations.items():
                base_allocation = base_allocations.get(symbol, 0)
                change = allocation - base_allocation
                self.logger.info(f"üß† {symbol}: ${base_allocation:.2f} -> ${allocation:.2f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.2f})")
            
            return smart_allocations
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
            return await self.distribute_for_strategy(strategy_type, symbols)


