#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Telegram Bot Controller v3.0
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –±–æ—Ç–∞–º–∏ –∏ –∑–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
"""

import asyncio
import logging
import os
import sys
import time
import json
import traceback
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# Telegram imports
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from core.config_manager import ConfigManager
from core.security import SecurityManager
from core.log_helper import build_logger

# –ò–º–ø–æ—Ä—Ç—ã —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from .enhanced_grid_bot import EnhancedMultiAssetGridBot
from .zonal_risk_manager import ZonalRiskManager
from .advanced_signal_generator import ScalpSignal

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Scalp –±–æ—Ç–∞
from .enhanced_scalp_bot import EnhancedMultiAssetScalpBot

class EnhancedBotController:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤ v3.0
    
    –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∑–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–æ–Ω–∞–º
    - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏ –±–æ—Ç–æ–≤
    """
    
    def __init__(self):
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.logger = build_logger("enhanced_controller")
        self.config_manager = ConfigManager()
        self.config = self.config_manager.get_config()
        self.security_manager = SecurityManager()
        
        # Telegram –±–æ—Ç - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN')
        if not self.telegram_token:
            self.logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            self.application = None
        else:
            self.application = Application.builder().token(self.telegram_token).build()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–æ–≤
        self.grid_bot: Optional[EnhancedMultiAssetGridBot] = None
        self.scalp_bot: Optional[EnhancedMultiAssetScalpBot] = None
        self.bots_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = time.time()
        self.command_count = 0
        self.last_status_update = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        self._setup_handlers()
        
        self.logger.info("üöÄ Enhanced Bot Controller v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            self.logger.warning("‚ö†Ô∏è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
            return
            
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
        self.application.add_handler(CommandHandler("start_bots", self.start_bots_command))
        self.application.add_handler(CommandHandler("stop_bots", self.stop_bots_command))
        self.application.add_handler(CommandHandler("restart_bots", self.restart_bots_command))
        
        # üÜï –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –¥–ª—è v3.0
        self.application.add_handler(CommandHandler("zones", self.zones_command))
        self.application.add_handler(CommandHandler("grid_stats", self.grid_stats_command))
        self.application.add_handler(CommandHandler("scalp_stats", self.scalp_stats_command))
        self.application.add_handler(CommandHandler("ml_stats", self.ml_stats_command))
        self.application.add_handler(CommandHandler("signals", self.signals_command))
        self.application.add_handler(CommandHandler("market_regime", self.market_regime_command))
        self.application.add_handler(CommandHandler("version", self.version_command))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.application.add_handler(CommandHandler("balances", self.balances_command))
        self.application.add_handler(CommandHandler("positions", self.positions_command))
        self.application.add_handler(CommandHandler("performance", self.performance_command))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("logs", self.logs_command))
        
        # Callback handlers –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def scalp_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Enhanced Scalp –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.scalp_bot or not self.scalp_bot.running:
                await update.message.reply_text("‚ùå Enhanced Scalp Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            scalp_report = await self.scalp_bot.get_status_report()
            
            await update.message.reply_text(f"üéØ <b>Enhanced Scalp Bot v3.0</b>\n\n{scalp_report}", parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ scalp_stats_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Scalp: {e}")
    
    async def ml_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            ml_message = "ü§ñ <b>–ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï v3.0</b>\n\n"
            
            if self.scalp_bot and hasattr(self.scalp_bot, 'ml_engine'):
                ml_stats = self.scalp_bot.ml_engine.get_statistics()
                
                ml_message += f"""
üìä <b>ML Engine —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if ml_stats['ml_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
‚Ä¢ –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {'‚úÖ –û–±—É—á–µ–Ω' if ml_stats['is_trained'] else '‚ùå –ù–µ –æ–±—É—á–µ–Ω'}
‚Ä¢ –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {ml_stats['training_samples']}
‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å–¥–µ–ª–∞–Ω–æ: {ml_stats['predictions_made']}
‚Ä¢ –¢–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {ml_stats['correct_predictions']}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {ml_stats['accuracy']:.1%}

üéØ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π:</b>
                """
                
                if ml_stats['model_performance']:
                    for model, score in ml_stats['model_performance'].items():
                        ml_message += f"‚Ä¢ {model}: {score:.3f}\n"
                else:
                    ml_message += "‚Ä¢ –ú–æ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω—ã\n"
                
                ml_message += f"""

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 —Å–¥–µ–ª–æ–∫
‚Ä¢ –ú–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö

<i>ML –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é —Ç–æ—Ä–≥–æ–≤–ª–∏!</i>
                """
            else:
                ml_message += "‚ùå ML Engine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - Scalp Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            
            await update.message.reply_text(ml_message, parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ ml_stats_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ML —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.scalp_bot or not self.scalp_bot.running:
                await update.message.reply_text("‚ùå Enhanced Scalp Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö (—Ç–µ–∫—É—â–∏–µ "—Å–∏–≥–Ω–∞–ª—ã")
            positions_info = await self.scalp_bot.get_positions_info()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_stats = self.scalp_bot.signal_generator.get_statistics()
            
            signals_message = f"""
üéØ <b>ENHANCED SIGNALS v3.0</b>

{positions_info}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:</b>
‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {signal_stats['signals_generated']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {signal_stats['successful_signals']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {signal_stats['success_rate']:.1%}
‚Ä¢ ML –ø–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if signal_stats['ml_engine_connected'] else '‚ùå'}

üî• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ Combo v3.0 (ML + —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)
‚Ä¢ Momentum Scalp
‚Ä¢ Mean Reversion  
‚Ä¢ Volume Profile
‚Ä¢ Breakout
‚Ä¢ Adaptive v3.0

<i>6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!</i>
            """
            
            await update.message.reply_text(signals_message, parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ signals_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    async def positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            positions_message = "üìä <b>–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò</b>\n\n"
            
            # Grid –ø–æ–∑–∏—Ü–∏–∏
            if self.grid_bot and self.grid_bot.running:
                grid_grids = len(getattr(self.grid_bot, 'active_grids', {}))
                positions_message += f"üîÑ <b>Grid Bot:</b> {grid_grids} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫\n"
            
            # Scalp –ø–æ–∑–∏—Ü–∏–∏
            if self.scalp_bot and self.scalp_bot.running:
                scalp_positions_info = await self.scalp_bot.get_positions_info()
                positions_message += f"\n‚ö° <b>Scalp Bot:</b>\n{scalp_positions_info}\n"
            
            if not self.bots_running:
                positions_message = "‚ùå –ë–æ—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_bots"
            
            await update.message.reply_text(positions_message, parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ positions_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def performance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            performance_message = "üìà <b>–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ v3.0</b>\n\n"
            
            # Grid –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if self.grid_bot and self.grid_bot.running:
                zone_stats = self.grid_bot.risk_manager.get_zone_statistics()
                performance_message += f"""
üîÑ <b>Grid Bot (–ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç):</b>
‚Ä¢ –ë–ª–∏–∂–Ω—è—è –∑–æ–Ω–∞: TP√ó{zone_stats['close']['tp_multiplier']:.1f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞: TP√ó{zone_stats['medium']['tp_multiplier']:.1f}
‚Ä¢ –î–∞–ª—å–Ω—è—è –∑–æ–Ω–∞: TP√ó{zone_stats['far']['tp_multiplier']:.1f}
‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: +15-25% –ø—Ä–∏–±—ã–ª–∏

                """
            
            # Scalp –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if self.scalp_bot and self.scalp_bot.running:
                performance_message += f"""
‚ö° <b>Scalp Bot (ML + 6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π):</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {getattr(self.scalp_bot, 'total_trades', 0)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {getattr(self.scalp_bot, 'winning_trades', 0)}
‚Ä¢ –û–±—â–∏–π PnL: ${getattr(self.scalp_bot, 'total_pnl', 0):.2f}
‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: +20-30% –ø—Ä–∏–±—ã–ª–∏

                """
            
            performance_message += """
üî• <b>–û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è v3.0:</b>
‚Ä¢ Grid: –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚Ä¢ Scalp: ML + —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –ë–∞–ª–∞–Ω—Å—ã: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
‚Ä¢ API: –î–æ 80% —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

üí° <b>–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</b>
‚Ä¢ üìà +15-30% –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ üìâ -20-30% –ø—Ä–æ—Å–∞–¥–æ–∫
‚Ä¢ ‚ö° +40% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
            """
            
            await update.message.reply_text(performance_message, parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ performance_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            settings_message = f"""
‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò ENHANCED SYSTEM v3.0</b>

üîÑ <b>Grid Bot:</b>
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {len(self.config['symbols'])}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {self.config['grid']['max_levels']}
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä: ${self.config['grid']['min_order_usd']}
‚Ä¢ –†–µ–∂–∏–º: {self.config['grid']['grid_mode']}

‚ö° <b>Scalp Bot:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {self.config['scalp']['max_positions']}
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.config['scalp']['position_size_percent']*100:.1f}%
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.config['scalp']['max_hold_seconds']}s
‚Ä¢ TP: {self.config['scalp']['tp_pct']*100:.1f}% | SL: {self.config['scalp']['sl_pct']*100:.1f}%

üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:</b>
{', '.join(self.config['symbols'])}

üí∞ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞:</b>
‚Ä¢ Grid: {self.config['capital_split']['grid']*100:.0f}%
‚Ä¢ Scalp: {self.config['capital_split']['scalp']*100:.0f}%

<i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ bot_config.json</i>
            """
            
            await update.message.reply_text(settings_message, parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    async def logs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            logs_message = "üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò</b>\n\n"
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–æ–≤
            log_files = ['logs/enhanced_grid_bot.log', 'logs/enhanced_scalp_bot.log', 'logs/enhanced_controller.log']
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            recent_lines = lines[-5:] if len(lines) > 5 else lines
                            
                            bot_name = log_file.split('/')[-1].replace('.log', '').replace('_', ' ').title()
                            logs_message += f"<b>{bot_name}:</b>\n"
                            
                            for line in recent_lines:
                                if any(keyword in line for keyword in ['INFO', 'ERROR', 'WARNING']):
                                    # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Telegram
                                    short_line = line.strip()[:100] + "..." if len(line.strip()) > 100 else line.strip()
                                    logs_message += f"‚Ä¢ {short_line}\n"
                            
                            logs_message += "\n"
                    except:
                        pass
            
            if len(logs_message) < 50:
                logs_message = "üìã –õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
            await update.message.reply_text(logs_message, parse_mode='HTML')
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ logs_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        welcome_message = f"""
üöÄ <b>Enhanced Trading Bot Controller v3.0</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤!

üî• <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v3.0:</b>
‚Ä¢ –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è  
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/start_bots - –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
/zones - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–æ–Ω–∞–º

‚ö° <b>–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã v3.0:</b>
/grid_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Grid –±–æ—Ç–∞
/market_regime - –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏

<i>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</i>
        """
        
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.HTML)
        self.command_count += 1
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        help_message = f"""
üìö <b>Enhanced Bot Controller v3.0 - –°–ø—Ä–∞–≤–∫–∞</b>

ü§ñ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò:</b>
/start_bots - –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤
/stop_bots - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤
/restart_bots - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üî• <b>–ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò v3.0:</b>
/zones - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
/grid_stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Grid –±–æ—Ç–∞
/market_regime - –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è—Ö

üìä <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì:</b>
/balances - –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/performance - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤

‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò:</b>
/settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° <b>–ü–û–î–°–ö–ê–ó–ö–ò:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /zones –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–æ–Ω
‚Ä¢ /market_regime –ø–æ–∫–∞–∂–µ—Ç –ø–æ—á–µ–º—É –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ /grid_stats –¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

<i>v3.0 - –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω!</i>
        """
        
        await update.message.reply_text(help_message, parse_mode=ParseMode.HTML)
        self.command_count += 1
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            uptime = time.time() - self.start_time
            uptime_str = str(timedelta(seconds=int(uptime)))
            
            # –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
            grid_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.grid_bot and self.grid_bot.running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            scalp_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.scalp_bot and hasattr(self.scalp_bot, 'running') and self.scalp_bot.running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Grid –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
            grid_info = ""
            if self.grid_bot and self.grid_bot.running:
                grid_report = await self.grid_bot.get_status_report()
                grid_info = f"\n\n{grid_report}"
            
            status_message = f"""
ü§ñ <b>Enhanced Trading System v3.0 Status</b>

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}
üìä <b>–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {self.command_count}

üî• <b>–¢–û–†–ì–û–í–´–ï –ë–û–¢–´:</b>
‚Ä¢ Grid Bot v3.0: {grid_status}
‚Ä¢ Scalp Bot: {scalp_status}

üí∞ <b>–ö–ê–ü–ò–¢–ê–õ:</b>
‚Ä¢ –û–±—â–∏–π: ${getattr(self.grid_bot, 'total_capital', 0):.2f} USDT
‚Ä¢ Grid: ${getattr(self.grid_bot, 'allocated_capital', {}).get('total', 0):.2f} USDT

üéØ <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫: {len(getattr(self.grid_bot, 'active_grids', {})) if self.grid_bot else 0}
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(self.config['symbols'])}

üî• <b>v3.0 –£–õ–£–ß–®–ï–ù–ò–Ø:</b>
‚Ä¢ ‚úÖ –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚Ä¢ ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
‚Ä¢ ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
{grid_info}

<i>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!</i>
            """
            
            await update.message.reply_text(status_message, parse_mode=ParseMode.HTML)
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ status_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def zones_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.grid_bot or not self.grid_bot.running:
                await update.message.reply_text("‚ùå Grid Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
            zone_stats = self.grid_bot.risk_manager.get_zone_statistics()
            
            zones_message = f"""
üî• <b>–ó–û–ù–ê–õ–¨–ù–´–ô –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢</b>

<b>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:</b> –†–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ü–µ–Ω—ã

üü¢ <b>–ë–õ–ò–ñ–ù–Ø–Ø –ó–û–ù–ê (0-2%):</b>
‚Ä¢ Take Profit: √ó{zone_stats['close']['tp_multiplier']:.1f}
‚Ä¢ Stop Loss: √ó{zone_stats['close']['sl_multiplier']:.1f}  
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: √ó{zone_stats['close']['position_size_multiplier']:.1f}
‚Ä¢ –ú–∞–∫—Å. —É—Ä–æ–≤–Ω–µ–π: {zone_stats['close']['max_levels']}
‚Ä¢ <i>–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ñ–∏—Ç, —á–∞—Å—Ç—ã–µ —Å–¥–µ–ª–∫–∏</i>

üü° <b>–°–†–ï–î–ù–Ø–Ø –ó–û–ù–ê (2-5%):</b>
‚Ä¢ Take Profit: √ó{zone_stats['medium']['tp_multiplier']:.1f}
‚Ä¢ Stop Loss: √ó{zone_stats['medium']['sl_multiplier']:.1f}
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: √ó{zone_stats['medium']['position_size_multiplier']:.1f}
‚Ä¢ –ú–∞–∫—Å. —É—Ä–æ–≤–Ω–µ–π: {zone_stats['medium']['max_levels']}
‚Ä¢ <i>–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥</i>

üî¥ <b>–î–ê–õ–¨–ù–Ø–Ø –ó–û–ù–ê (5-15%):</b>
‚Ä¢ Take Profit: √ó{zone_stats['far']['tp_multiplier']:.1f}
‚Ä¢ Stop Loss: √ó{zone_stats['far']['sl_multiplier']:.1f}
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: √ó{zone_stats['far']['position_size_multiplier']:.1f}
‚Ä¢ –ú–∞–∫—Å. —É—Ä–æ–≤–Ω–µ–π: {zone_stats['far']['max_levels']}
‚Ä¢ <i>–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–ª—å—à–æ–π –ø—Ä–æ—Ñ–∏—Ç, —Ä–µ–¥–∫–∏–µ —Å–¥–µ–ª–∫–∏</i>

üí° <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:</b>
‚Ä¢ üìà +15-25% –∫ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ üìâ -20-30% –ø—Ä–æ—Å–∞–¥–æ–∫
‚Ä¢ ‚ö° +30-40% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–ø–∏—Ç–∞–ª–∞

<i>–ó–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ —Ä–µ–∂–∏–º—É —Ä—ã–Ω–∫–∞!</i>
            """
            
            await update.message.reply_text(zones_message, parse_mode=ParseMode.HTML)
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ zones_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–æ–Ω: {e}")
    
    async def grid_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Grid –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.grid_bot or not self.grid_bot.running:
                await update.message.reply_text("‚ùå Grid Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Ç–∫–∞–º
            active_grids = self.grid_bot.active_grids
            
            if not active_grids:
                await update.message.reply_text("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            
            stats_message = "üéØ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê GRID –ë–û–¢–ê v3.0</b>\n\n"
            
            for symbol, grid_data in active_grids.items():
                regime = grid_data.get('market_regime', 'unknown')
                volatility = grid_data.get('volatility', 0) * 100
                total_levels = grid_data.get('total_levels', 0)
                current_price = grid_data.get('current_price', 0)
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
                regime_emoji = {
                    'bullish': 'üêÇ',
                    'bearish': 'üêª', 
                    'volatile': '‚ö°',
                    'neutral': '‚û°Ô∏è'
                }.get(regime, '‚ùì')
                
                stats_message += f"""
<b>{symbol}:</b>
{regime_emoji} –†–µ–∂–∏–º: {regime}
üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%
üéØ –£—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏: {total_levels}
üí∞ –¶–µ–Ω–∞: ${current_price:,.2f}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.fromtimestamp(grid_data.get('timestamp', 0)).strftime('%H:%M:%S')}
                """
            
            stats_message += f"""

üìà <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫: {len(active_grids)}
‚Ä¢ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${self.grid_bot.total_capital:.2f}
‚Ä¢ –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

<i>–í—Å–µ —Å–µ—Ç–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!</i>
            """
            
            await update.message.reply_text(stats_message, parse_mode=ParseMode.HTML)
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ grid_stats_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Grid: {e}")
    
    async def market_regime_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.grid_bot or not self.grid_bot.running:
                await update.message.reply_text("‚ùå Grid Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞")
                return
            
            market_message = "üîç <b>–ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê</b>\n\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
            for symbol in self.config['symbols'][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø–∞—Ä
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    ohlcv = await self.grid_bot.ex.fetch_ohlcv(symbol, '1m', limit=50)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
                    regime, spacing_mult, grid_levels, volatility, trend_strength, rsi, cci = await self.grid_bot.analyze_market_regime(symbol, ohlcv)
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞
                    regime_emoji = {
                        'bullish': 'üêÇ',
                        'bearish': 'üêª',
                        'volatile': '‚ö°',
                        'neutral': '‚û°Ô∏è'
                    }.get(regime, '‚ùì')
                    
                    market_message += f"""
<b>{symbol}:</b>
{regime_emoji} <b>–†–µ–∂–∏–º:</b> {regime}
üìä <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</b> {volatility:.3f} ({volatility*100:.1f}%)
üí™ <b>–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞:</b> {trend_strength:.1f}
üìà <b>RSI:</b> {rsi:.1f}
üéØ <b>CCI:</b> {cci:.1f}
‚öôÔ∏è <b>–£—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏:</b> {grid_levels}
üìè <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ √ó:</b> {spacing_mult:.2f}

                    """
                    
                except Exception as e:
                    market_message += f"<b>{symbol}:</b> ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞\n\n"
            
            market_message += """
üí° <b>–ö–ê–ö –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø:</b>
‚Ä¢ <b>–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫:</b> –ë–æ–ª—å—à–µ sell —É—Ä–æ–≤–Ω–µ–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ TP
‚Ä¢ <b>–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫:</b> –ë–æ–ª—å—à–µ buy —É—Ä–æ–≤–Ω–µ–π, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ TP  
‚Ä¢ <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π:</b> –®–∏—Ä–æ–∫–∏–µ —Å—Ç–æ–ø—ã, –º–µ–Ω—å—à–µ —É—Ä–æ–≤–Ω–µ–π
‚Ä¢ <b>–ë–æ–∫–æ–≤–æ–π:</b> –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏

<i>–ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!</i>
            """
            
            await update.message.reply_text(market_message, parse_mode=ParseMode.HTML)
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ market_regime_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
    
    async def version_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        version_message = f"""
üöÄ <b>Enhanced Trading System v3.0</b>

üìÖ <b>–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:</b> 16 —Å–µ–Ω—Ç—è–±—Ä—è 2025
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {str(timedelta(seconds=int(time.time() - self.start_time)))}

üî• <b>–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò v3.0:</b>

üéØ <b>–ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>
‚Ä¢ 3 –∑–æ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ TP/SL –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
‚Ä¢ –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞

üìä <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:</b>
‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (ATR, ADX, RSI, CCI)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏

ü§ñ <b>Enhanced Grid Bot:</b>
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

‚ö° <b>–û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:</b>
‚Ä¢ üìà +15-25% –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ üìâ -20-30% –ø—Ä–æ—Å–∞–¥–æ–∫
‚Ä¢ üéØ +30-40% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–ø–∏—Ç–∞–ª–∞

üîß <b>–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:</b>
‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
‚Ä¢ –ê—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram

<i>–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã!</i>
        """
        
        await update.message.reply_text(version_message, parse_mode=ParseMode.HTML)
        self.command_count += 1
    
    async def start_bots_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if self.bots_running:
                await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã")
                return
            
            await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫ Enhanced —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤ v3.0...")
            
            # –ó–∞–ø—É—Å–∫ Grid –±–æ—Ç–∞
            try:
                self.grid_bot = EnhancedMultiAssetGridBot()
                
                # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(self.grid_bot.run())
                
                await update.message.reply_text("‚úÖ Enhanced Grid Bot v3.0 –∑–∞–ø—É—â–µ–Ω —Å –∑–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º!")
                
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Grid –±–æ—Ç–∞: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Grid –±–æ—Ç–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫ Enhanced Scalp –±–æ—Ç–∞ v3.0
            try:
                self.scalp_bot = EnhancedMultiAssetScalpBot()
                
                # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(self.scalp_bot.run())
                
                await update.message.reply_text("‚úÖ Enhanced Scalp Bot v3.0 –∑–∞–ø—É—â–µ–Ω —Å ML –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏!")
                
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced Scalp –±–æ—Ç–∞: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced Scalp –±–æ—Ç–∞: {e}")
            
            self.bots_running = True
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = """
üéâ <b>Enhanced Trading System v3.0 –∑–∞–ø—É—â–µ–Ω!</b>

üî• <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è:</b>
‚Ä¢ ‚úÖ –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚Ä¢ ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è  
‚Ä¢ ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/zones - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–Ω
/grid_stats - –î–µ—Ç–∞–ª–∏ Grid –±–æ—Ç–∞
/market_regime - –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å

<i>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ!</i>
            """
            
            await update.message.reply_text(final_message, parse_mode=ParseMode.HTML)
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ start_bots_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤: {e}")
    
    async def stop_bots_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.bots_running:
                await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return
            
            await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Grid –±–æ—Ç–∞
            if self.grid_bot:
                self.grid_bot.stop()
                await update.message.reply_text("‚úÖ Enhanced Grid Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Scalp –±–æ—Ç–∞  
            if self.scalp_bot and hasattr(self.scalp_bot, 'stop'):
                self.scalp_bot.stop()
                await update.message.reply_text("‚úÖ Scalp Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.bots_running = False
            await update.message.reply_text("üõë –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_bots_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤: {e}")
    
    async def restart_bots_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await self.stop_bots_command(update, context)
        await asyncio.sleep(2)
        
        # –ó–∞–ø—É—Å–∫
        await self.start_bots_command(update, context)
    
    async def balances_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.security_manager.is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        try:
            if not self.grid_bot:
                await update.message.reply_text("‚ùå Grid Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = await self.grid_bot.get_balances()
            
            balance_message = "üí∞ <b>–¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´</b>\n\n"
            
            total_usd = 0
            for symbol, balance_data in balances.items():
                base_currency = symbol.split('/')[0]
                quote_currency = symbol.split('/')[1]
                
                base_amount = balance_data['base']
                quote_amount = balance_data['quote']
                
                if base_amount > 0.001 or quote_amount > 1:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    try:
                        ticker = await self.grid_bot.ex.fetch_ticker(symbol)
                        base_usd = base_amount * ticker['last']
                        total_usd += base_usd + quote_amount
                        
                        balance_message += f"""
<b>{symbol}:</b>
‚Ä¢ {base_currency}: {base_amount:.6f} (${base_usd:.2f})
‚Ä¢ {quote_currency}: {quote_amount:.2f}
                        """
                    except:
                        balance_message += f"""
<b>{symbol}:</b>
‚Ä¢ {base_currency}: {base_amount:.6f}
‚Ä¢ {quote_currency}: {quote_amount:.2f}
                        """
            
            balance_message += f"\nüíé <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ~${total_usd:.2f} USDT"
            
            await update.message.reply_text(balance_message, parse_mode=ParseMode.HTML)
            self.command_count += 1
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ balances_command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback'–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Bot Controller v3.0...")
        
        if not self.application:
            self.logger.warning("‚ö†Ô∏è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            
            self.logger.info("‚úÖ Enhanced Telegram Controller –∑–∞–ø—É—â–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.application.updater.start_polling(drop_pending_updates=True)
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            import signal
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º event –¥–ª—è graceful shutdown
            stop_event = asyncio.Event()
            
            def signal_handler(signum, frame):
                self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                stop_event.set()
            
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
            # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await stop_event.wait()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            if hasattr(self.application, 'updater') and self.application.updater.running:
                await self.application.updater.stop()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.stop()
            await self.application.shutdown()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    controller = EnhancedBotController()
    await controller.run()

if __name__ == "__main__":
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        sys.exit(1)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë Enhanced Controller –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")











