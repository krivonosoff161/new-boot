#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Multi-Asset Grid Trading Bot
v3.0: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
"""

import ccxt.async_support as ccxt
import numpy as np
import talib
import asyncio
import time
import logging
import signal
import sys
import os
import json
import math
import collections
from datetime import datetime, timedelta
from telegram import Bot
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from core.log_helper import build_logger
from core.config_manager import ConfigManager
from core.ipc import GridBotIPCServer
import importlib.util
spec = importlib.util.spec_from_file_location("capital_distributor_v2", "capital_distributor_v2.0.py")
capital_distributor_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(capital_distributor_module)
CapitalDistributor = capital_distributor_module.CapitalDistributor

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from .zonal_risk_manager import ZonalRiskManager
from .adaptive_balance_manager import AdaptiveBalanceManager

load_dotenv()
os.makedirs('logs', exist_ok=True)

class EnhancedMultiAssetGridBot:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π Multi-Asset Grid Trading Bot
    v3.0: –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç + –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞
    """
    
    def __init__(self):
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.logger = build_logger("enhanced_grid_bot")
        self.config_manager = ConfigManager()
        self.config = self.config_manager.get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
        API_KEY = os.getenv('OKX_API_KEY') or os.getenv('API_KEY')
        API_SECRET = os.getenv('OKX_SECRET_KEY') or os.getenv('API_SECRET')
        PASSPHRASE = os.getenv('OKX_PASSPHRASE') or os.getenv('PASSPHRASE')
        if not all([API_KEY, API_SECRET, PASSPHRASE]):
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: OKX_API_KEY, OKX_SECRET_KEY, OKX_PASSPHRASE")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ –¥–ª—è Demo Trading
        from core.exchange_mode_manager import exchange_mode_manager
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ Exchange Mode Manager
        self.ex = exchange_mode_manager.create_exchange_instance(
            exchange_name='okx',
            api_key=API_KEY,
            secret=API_SECRET,
            passphrase=PASSPHRASE,
            mode='demo'  # –î–µ–º–æ —Ä–µ–∂–∏–º
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.symbols = self.config['symbols']
        self.chat_ids = self.config['chat_ids']
        self.tg_bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN'))
        self.running = True
        
        # üÜï –ù–û–í–û–ï: –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        self.risk_manager = ZonalRiskManager(self.config)
        self.logger.info("‚úÖ –ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # üÜï –ù–û–í–û–ï: Adaptive Balance Manager v3.0
        self.balance_manager = AdaptiveBalanceManager(self.ex, self.config)
        self.logger.info("‚úÖ Adaptive Balance Manager v3.0 –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
        self.total_capital = 0
        self.allocated_capital = {}
        self.last_redistribution = 0
        self.redistribution_interval = self.config.get('redistribution_interval', 1800)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–æ–∫
        self.active_grids = {}  # {symbol: grid_data}
        self.last_grid_updates = {}
        self.executed_order_ids = set()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.grid_config = self.config['grid']
        self.min_order_usd = self.grid_config['min_order_usd']
        self.max_levels = self.grid_config['max_levels']
        self.base_spacing = self.grid_config['base_spacing']
        self.cci_block = self.grid_config['cci_block']
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators_cfg = self.grid_config['indicators']
        self.rsi_period = indicators_cfg['rsi']['timeperiod']
        self.atr_period = indicators_cfg['atr']['timeperiod']
        self.bb_period = indicators_cfg['bb']['timeperiod']
        self.bb_nbdevup = indicators_cfg['bb']['nbdevup']
        self.bb_nbdevdn = indicators_cfg['bb']['nbdevdn']
        
        # IPC —Å–µ—Ä–≤–µ—Ä
        self.ipc_server = GridBotIPCServer(self, 8080)
        
        self.logger.info("üöÄ Enhanced Grid Bot v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_balances(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Adaptive Balance Manager v3.0"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Adaptive Balance Manager
            user_capital = await self.balance_manager.get_user_capital(user_id=1)  # Default user –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
            if user_capital.total_balance_usd == 0:
                self.logger.warning("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–µ–Ω –Ω—É–ª—é")
                return {}
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            formatted_balances = {}
            for symbol in self.symbols:
                base_currency = symbol.split('/')[0]
                quote_currency = symbol.split('/')[1]
                
                base_balance = user_capital.currencies.get(base_currency, 0)
                quote_balance = user_capital.currencies.get(quote_currency, 0)
                
                formatted_balances[symbol] = {
                    'base': base_balance,
                    'quote': quote_balance
                }
            
            self.logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã: ${user_capital.total_balance_usd:.2f} USD")
            return formatted_balances
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Adaptive Manager: {e}")
            return {}
    
    async def analyze_market_regime(self, symbol, ohlcv):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Ä–µ–∂–∏–º, –º–Ω–æ–∂–∏—Ç–µ–ª—å_—Å–ø–µ–π—Å–∏–Ω–≥–∞, —É—Ä–æ–≤–Ω–∏_—Å–µ—Ç–∫–∏, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Å–∏–ª–∞_—Ç—Ä–µ–Ω–¥–∞, RSI, CCI
        """
        try:
            if len(ohlcv) < 50:
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {symbol}")
                return 'neutral', 1.0, self.max_levels, 0.02, 20, 50, 0
                
            closes = np.array([candle[4] for candle in ohlcv])
            highs = np.array([candle[2] for candle in ohlcv])
            lows = np.array([candle[3] for candle in ohlcv])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
            if np.any(np.isnan(closes)) or np.any(np.isnan(highs)) or np.any(np.isnan(lows)):
                self.logger.warning(f"NaN –≤ –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {symbol}")
                return 'neutral', 1.0, self.max_levels, 0.02, 20, 50, 0
            
            # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)
            atr = talib.ATR(highs, lows, closes, timeperiod=self.atr_period)
            atr_value = atr[-1] if len(atr) > 0 and not np.isnan(atr[-1]) else 0.001 * closes[-1]
            avg_price = np.mean(closes)
            volatility = (atr_value / avg_price) if avg_price > 0 else 0.02
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX)
            adx = talib.ADX(highs, lows, closes, timeperiod=14)
            trend_strength = adx[-1] if len(adx) > 0 and not np.isnan(adx[-1]) else 20
            
            # RSI
            rsi = talib.RSI(closes, timeperiod=self.rsi_period)
            rsi_value = rsi[-1] if len(rsi) > 0 and not np.isnan(rsi[-1]) else 50
            
            # CCI
            cci = talib.CCI(highs, lows, closes, timeperiod=14)
            cci_value = cci[-1] if len(cci) > 0 and not np.isnan(cci[-1]) else 0
            
            # üÜï –£–õ–£–ß–®–ï–ù–ù–û–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
            market_regime = self._determine_market_regime(
                closes, volatility, trend_strength, rsi_value, cci_value
            )
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            spacing_mult, grid_levels = self._calculate_adaptive_params(
                market_regime, volatility, trend_strength
            )
            
            self.logger.debug(f"{symbol}: —Ä–µ–∂–∏–º={market_regime}, –≤–æ–ª–∞—Ç={volatility:.4f}, "
                             f"—Ç—Ä–µ–Ω–¥={trend_strength:.1f}, RSI={rsi_value:.1f}, CCI={cci_value:.1f}")
            
            return market_regime, spacing_mult, grid_levels, volatility, trend_strength, rsi_value, cci_value
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}: {e}")
            return 'neutral', 1.0, self.max_levels, 0.02, 20, 50, 0
    
    def _determine_market_regime(self, closes, volatility, trend_strength, rsi, cci):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ —Ü–µ–Ω–µ
        recent_closes = closes[-10:]
        price_trend = (recent_closes[-1] - recent_closes[0]) / recent_closes[0]
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
        if volatility > 0.03:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            return 'volatile'
        elif trend_strength > 30 and price_trend > 0.02:  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            return 'bullish'
        elif trend_strength > 30 and price_trend < -0.02:  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            return 'bearish'
        else:  # –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫
            return 'neutral'
    
    def _calculate_adaptive_params(self, market_regime, volatility, trend_strength):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        
        base_levels = self.max_levels
        base_spacing = 1.0
        
        if market_regime == 'volatile':
            # –í –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ: –º–µ–Ω—å—à–µ —É—Ä–æ–≤–Ω–µ–π, –±–æ–ª—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            spacing_mult = 1.5 + volatility * 10
            grid_levels = max(3, int(base_levels * 0.7))
        elif market_regime == 'bullish':
            # –í –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ: –±–æ–ª—å—à–µ sell —É—Ä–æ–≤–Ω–µ–π
            spacing_mult = 1.0 + volatility * 5
            grid_levels = base_levels
        elif market_regime == 'bearish':
            # –í –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ: –±–æ–ª—å—à–µ buy —É—Ä–æ–≤–Ω–µ–π
            spacing_mult = 1.0 + volatility * 5
            grid_levels = base_levels
        else:  # neutral
            spacing_mult = 1.0 + volatility * 3
            grid_levels = base_levels
        
        return spacing_mult, grid_levels
    
    async def create_enhanced_grid(self, symbol):
        """
        üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ —Å –∑–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
        """
        current_time = time.time()
        
        # Cooldown –ø—Ä–æ–≤–µ—Ä–∫–∞
        last_update = self.last_grid_updates.get(symbol, 0)
        cooldown_period = 60  # 1 –º–∏–Ω—É—Ç–∞
        
        if current_time - last_update < cooldown_period:
            self.logger.debug(f"‚è≥ {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ cooldown")
            return
            
        self.last_grid_updates[symbol] = current_time
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            balances = await self.get_balances()
            ticker = await self.ex.fetch_ticker(symbol)
            current_price = ticker['last']
            allocated_capital = self.allocated_capital.get(symbol, 0)
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞
            if allocated_capital < self.min_order_usd * 2:
                self.logger.info(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ({allocated_capital:.2f} USDT)")
                return
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            ohlcv = await self.ex.fetch_ohlcv(symbol, '1m', limit=50)
            market_regime, spacing_mult, grid_levels, volatility, trend_strength, rsi, cci = await self.analyze_market_regime(symbol, ohlcv)
            
            # 4. CCI —Ñ–∏–ª—å—Ç—Ä
            if cci < self.cci_block:
                self.logger.info(f"‚ö†Ô∏è {symbol}: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ CCI —Ñ–∏–ª—å—Ç—Ä–æ–º (CCI={cci:.2f})")
                return
            
            # üÜï 5. –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∑–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            optimized_levels = self.risk_manager.optimize_grid_levels(
                current_price=current_price,
                available_capital=allocated_capital,
                base_spacing=self.base_spacing * spacing_mult,
                max_levels=grid_levels,
                volatility=volatility,
                market_regime=market_regime
            )
            
            # 6. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            await self._place_optimized_orders(symbol, optimized_levels, current_price)
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏
            self.active_grids[symbol] = {
                'timestamp': current_time,
                'current_price': current_price,
                'market_regime': market_regime,
                'volatility': volatility,
                'levels': optimized_levels,
                'total_levels': len(optimized_levels['buy_levels']) + len(optimized_levels['sell_levels'])
            }
            
            self.logger.info(f"‚úÖ {symbol}: –°–æ–∑–¥–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ - "
                           f"{len(optimized_levels['buy_levels'])} buy + "
                           f"{len(optimized_levels['sell_levels'])} sell —É—Ä–æ–≤–Ω–µ–π")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è {symbol}: {e}")
    
    async def _place_optimized_orders(self, symbol, optimized_levels, current_price):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        
        # –†–∞–∑–º–µ—â–∞–µ–º buy –æ—Ä–¥–µ—Ä–∞
        for level in optimized_levels['buy_levels']:
            if level['price'] < current_price * 0.95:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ
                try:
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂—É
                    self.logger.debug(f"üìâ {symbol}: Buy order ${level['price']:.2f} "
                                    f"size=${level['size']:.2f} zone={level['zone']}")
                    
                    # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è buy –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
        
        # –†–∞–∑–º–µ—â–∞–µ–º sell –æ—Ä–¥–µ—Ä–∞
        for level in optimized_levels['sell_levels']:
            if level['price'] > current_price * 1.05:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ
                try:
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂—É
                    self.logger.debug(f"üìà {symbol}: Sell order ${level['price']:.2f} "
                                    f"size=${level['size']:.2f} zone={level['zone']}")
                    
                    # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è sell –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
    
    async def monitor_and_update_grids(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–æ–∫"""
        while self.running:
            try:
                for symbol in self.symbols:
                    await self.create_enhanced_grid(symbol)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–æ–∫: {e}")
                await asyncio.sleep(60)
    
    async def update_capital(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–ª–µ"""
        try:
            balance = await self.ex.fetch_balance()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –≤ USDT
            total_usdt = balance['total'].get('USDT', 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
            for symbol in self.symbols:
                base_currency = symbol.split('/')[0]
                base_amount = balance['total'].get(base_currency, 0)
                
                if base_amount > 0:
                    try:
                        ticker = await self.ex.fetch_ticker(symbol)
                        total_usdt += base_amount * ticker['last']
                    except:
                        pass
            
            self.total_capital = total_usdt
            self.logger.debug(f"üí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${self.total_capital:.2f} USDT")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
    
    async def distribute_capital(self):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏"""
        try:
            self.logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞...")
            
            distributor = CapitalDistributor(self.ex)
            allocations = await distributor.distribute_for_strategy('grid', self.symbols)
            
            self.allocated_capital = allocations
            
            for symbol, amount in self.allocated_capital.items():
                self.logger.info(f"üí∞ {symbol}: –≤—ã–¥–µ–ª–µ–Ω–æ ${amount:.2f} USDT")
                
            self.logger.info("‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
    
    async def send_telegram_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
        try:
            for chat_id in self.chat_ids:
                await self.tg_bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    
    async def get_status_report(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞"""
        active_grids_count = len(self.active_grids)
        total_levels = sum(grid['total_levels'] for grid in self.active_grids.values())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–æ–Ω–∞–º
        zone_stats = self.risk_manager.get_zone_statistics()
        
        report = f"""
ü§ñ <b>Enhanced Grid Bot v3.0 Status</b>

üí∞ <b>–ö–∞–ø–∏—Ç–∞–ª:</b> ${self.total_capital:.2f} USDT
üìä <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫:</b> {active_grids_count}
üéØ <b>–í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π:</b> {total_levels}

üî• <b>–ó–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>
‚Ä¢ –ë–ª–∏–∂–Ω—è—è –∑–æ–Ω–∞ (0-2%): TP√ó{zone_stats['close']['tp_multiplier']:.1f}, SL√ó{zone_stats['close']['sl_multiplier']:.1f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞ (2-5%): TP√ó{zone_stats['medium']['tp_multiplier']:.1f}, SL√ó{zone_stats['medium']['sl_multiplier']:.1f}  
‚Ä¢ –î–∞–ª—å–Ω—è—è –∑–æ–Ω–∞ (5-15%): TP√ó{zone_stats['far']['tp_multiplier']:.1f}, SL√ó{zone_stats['far']['sl_multiplier']:.1f}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
        """
        
        return report.strip()
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Grid Bot v3.0...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
            await self.update_capital()
            await self.distribute_capital()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            start_message = await self.get_status_report()
            await self.send_telegram_notification(f"üöÄ <b>Enhanced Grid Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n{start_message}")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            tasks = [
                asyncio.create_task(self.monitor_and_update_grids()),
                asyncio.create_task(self._periodic_capital_update()),
                asyncio.create_task(self._periodic_status_report())
            ]
            
            await asyncio.gather(*tasks)
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await self.send_telegram_notification(f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b> {e}")
    
    async def _periodic_capital_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        while self.running:
            try:
                await self.update_capital()
                
                # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                current_time = time.time()
                if current_time - self.last_redistribution > self.redistribution_interval:
                    await self.distribute_capital()
                    self.last_redistribution = current_time
                
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
                await asyncio.sleep(300)
    
    async def update_capital(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–ª–µ —á–µ—Ä–µ–∑ Adaptive Balance Manager"""
        try:
            user_capital = await self.balance_manager.get_user_capital(user_id=1, force_refresh=True)
            self.total_capital = user_capital.total_balance_usd
            
            if self.total_capital <= 0:
                self.logger.warning("‚ö†Ô∏è –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω.")
                return
            
            self.logger.info(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª: ${self.total_capital:.2f} USD")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
    
    async def distribute_capital(self):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —á–µ—Ä–µ–∑ Adaptive Balance Manager"""
        try:
            self.logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞...")
            
            user_capital = await self.balance_manager.get_user_capital(user_id=1)
            allocation = self.balance_manager.get_optimal_allocation(user_capital)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            grid_capital = allocation.grid_allocation
            
            if grid_capital > 0:
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –º–µ–∂–¥—É —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
                capital_per_pair = grid_capital / len(allocation.recommended_pairs)
                
                for symbol in allocation.recommended_pairs:
                    if symbol in self.symbols:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                        self.allocated_capital[symbol] = capital_per_pair
                        
                self.logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${grid_capital:.2f} –¥–ª—è Grid —Ç–æ—Ä–≥–æ–≤–ª–∏")
                self.logger.info(f"üìä –ö–∞–ø–∏—Ç–∞–ª –Ω–∞ –ø–∞—Ä—É: ${capital_per_pair:.2f}")
            else:
                self.logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è Grid —Ç–æ—Ä–≥–æ–≤–ª–∏")
            
            self.logger.info("‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
    
    async def _periodic_status_report(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        while self.running:
            try:
                await asyncio.sleep(3600)  # 1 —á–∞—Å
                
                status_report = await self.get_status_report()
                await self.send_telegram_notification(f"üìä <b>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>\n\n{status_report}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Enhanced Grid Bot...")
        self.running = False

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    bot = EnhancedMultiAssetGridBot()
    
    # –ó–∞–ø—É—Å–∫ IPC —Å–µ—Ä–≤–µ—Ä–∞
    if bot.ipc_server:
        await bot.ipc_server.start()
        
    await bot.run()

if __name__ == "__main__":
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        sys.exit(1)
        
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
