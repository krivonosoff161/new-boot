#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Multi-Asset Scalp Trading Bot v3.0
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ML, —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤
"""

import ccxt.async_support as ccxt
import numpy as np
import asyncio
import time
import logging
import os
import sys
from datetime import datetime, timedelta
from telegram import Bot
from dotenv import load_dotenv
from typing import Dict, List, Optional, Any

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from core.log_helper import build_logger
from core.config_manager import ConfigManager
from core.ipc import ScalpBotIPCServer

# –ò–º–ø–æ—Ä—Ç—ã —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from .ml_signal_engine import MLSignalEngine
from .advanced_signal_generator import AdvancedSignalGenerator, ScalpSignal
from .balance_optimizer import BalanceOptimizer
from .adaptive_balance_manager import AdaptiveBalanceManager

load_dotenv()

class EnhancedMultiAssetScalpBot:
    """
    Enhanced Multi-Asset Scalp Trading Bot v3.0
    
    –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    - üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
    - üí∞ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
    - üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
    - üîÑ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å Grid –±–æ—Ç–æ–º
    - üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    """
    
    def __init__(self):
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.logger = build_logger("enhanced_scalp_bot")
        self.config_manager = ConfigManager()
        self.config = self.config_manager.get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
        API_KEY = os.getenv('OKX_API_KEY') or os.getenv('API_KEY')
        API_SECRET = os.getenv('OKX_SECRET_KEY') or os.getenv('API_SECRET')
        PASSPHRASE = os.getenv('OKX_PASSPHRASE') or os.getenv('PASSPHRASE')
        if not all([API_KEY, API_SECRET, PASSPHRASE]):
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: OKX_API_KEY, OKX_SECRET_KEY, OKX_PASSPHRASE")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ –¥–ª—è Demo Trading
        from core.exchange_mode_manager import exchange_mode_manager
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ Exchange Mode Manager
        self.ex = exchange_mode_manager.create_exchange_instance(
            exchange_name='okx',
            api_key=API_KEY,
            secret=API_SECRET,
            passphrase=PASSPHRASE,
            mode='demo'  # –î–µ–º–æ —Ä–µ–∂–∏–º
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.symbols = self.config['symbols']
        self.chat_ids = self.config['chat_ids']
        self.tg_bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN'))
        self.running = True
        
        # üÜï –ù–û–í–û–ï: ML Signal Engine
        self.ml_engine = MLSignalEngine(self.config)
        self.logger.info("‚úÖ ML Signal Engine –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # üÜï –ù–û–í–û–ï: Advanced Signal Generator
        self.signal_generator = AdvancedSignalGenerator(self.config, self.ml_engine)
        self.logger.info("‚úÖ Advanced Signal Generator –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # üÜï –ù–û–í–û–ï: Balance Optimizer
        self.balance_optimizer = BalanceOptimizer(self.ex, self.config)
        self.logger.info("‚úÖ Balance Optimizer –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # üÜï –ù–û–í–û–ï: Adaptive Balance Manager v3.0
        self.adaptive_balance_manager = AdaptiveBalanceManager(self.ex, self.config)
        self.logger.info("‚úÖ Adaptive Balance Manager v3.0 –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.scalp_config = self.config['scalp']
        self.min_order_usd = self.scalp_config['min_order_usd']
        self.max_positions = self.scalp_config['max_positions']
        self.position_size_percent = self.scalp_config['position_size_percent']
        self.max_hold_seconds = self.scalp_config['max_hold_seconds']
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        self.positions = {}  # {symbol: position_data}
        self.open_orders = {}  # {order_id: order_data}
        self.last_signals = {}  # {symbol: last_signal_time}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0
        self.start_time = time.time()
        
        # IPC —Å–µ—Ä–≤–µ—Ä
        self.ipc_server = ScalpBotIPCServer(self, 8081)
        
        self.logger.info("üöÄ Enhanced Scalp Bot v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_balances(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤"""
        return await self.balance_optimizer.get_balances(self.symbols)
    
    async def analyze_market_and_generate_signals(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        while self.running:
            try:
                for symbol in self.symbols:
                    if len(self.positions) >= self.max_positions:
                        self.logger.debug(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π ({self.max_positions})")
                        break
                    
                    await self._process_symbol(symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                await self._monitor_positions()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
                await asyncio.sleep(30)
    
    async def _process_symbol(self, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            current_time = time.time()
            last_signal_time = self.last_signals.get(symbol, 0)
            if current_time - last_signal_time < 30:  # 30 —Å–µ–∫—É–Ω–¥ cooldown
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ohlcv = await self.ex.fetch_ohlcv(symbol, '1m', limit=100)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            order_book = None
            try:
                order_book = await self.ex.fetch_order_book(symbol, limit=20)
            except:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ —Å—Ç–∞–∫–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await self.signal_generator.generate_signal(symbol, ohlcv, order_book)
            
            if signal and signal.strength >= 0.6:
                await self._execute_signal(symbol, signal)
                self.last_signals[symbol] = current_time
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
    
    async def _execute_signal(self, symbol: str, signal: ScalpSignal):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            if symbol in self.positions:
                self.logger.debug(f"‚ö†Ô∏è {symbol}: –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = await self.get_balances()
            symbol_balance = balances.get(symbol)
            
            if not symbol_balance:
                self.logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            available_capital = symbol_balance.quote_usd_value  # USDT –±–∞–ª–∞–Ω—Å
            position_size_usd = available_capital * self.position_size_percent
            
            if position_size_usd < self.min_order_usd:
                self.logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ({position_size_usd:.2f} < {self.min_order_usd})")
                return
            
            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.logger.info(f"üéØ {symbol}: –°–ò–ì–ù–ê–õ {signal.direction.upper()}")
            self.logger.info(f"   üí™ –°–∏–ª–∞: {signal.strength:.3f}")
            self.logger.info(f"   üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}")
            self.logger.info(f"   üí∞ –†–∞–∑–º–µ—Ä: ${position_size_usd:.2f}")
            self.logger.info(f"   üìà TP: ${signal.tp_price:.2f}")
            self.logger.info(f"   üìâ SL: ${signal.sl_price:.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º "–ø–æ–∑–∏—Ü–∏—é" –¥–ª—è –¥–µ–º–æ
            self.positions[symbol] = {
                'signal': signal,
                'size_usd': position_size_usd,
                'entry_time': time.time(),
                'entry_price': signal.entry_price,
                'direction': signal.direction,
                'tp_price': signal.tp_price,
                'sl_price': signal.sl_price,
                'strategy': signal.strategy_name
            }
            
            self.total_trades += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await self._send_signal_notification(symbol, signal, position_size_usd)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
    
    async def _monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        current_time = time.time()
        positions_to_close = []
        
        for symbol, position in self.positions.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
                hold_time = current_time - position['entry_time']
                if hold_time > self.max_hold_seconds:
                    positions_to_close.append((symbol, 'timeout'))
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL (–≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º)
                current_price = await self._get_current_price(symbol)
                
                if position['direction'] == 'buy':
                    if current_price >= position['tp_price']:
                        positions_to_close.append((symbol, 'tp'))
                    elif current_price <= position['sl_price']:
                        positions_to_close.append((symbol, 'sl'))
                else:  # sell
                    if current_price <= position['tp_price']:
                        positions_to_close.append((symbol, 'tp'))
                    elif current_price >= position['sl_price']:
                        positions_to_close.append((symbol, 'sl'))
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for symbol, reason in positions_to_close:
            await self._close_position(symbol, reason)
    
    async def _close_position(self, symbol: str, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol not in self.positions:
                return
            
            position = self.positions[symbol]
            current_price = await self._get_current_price(symbol)
            
            # –†–∞—Å—á–µ—Ç PnL (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ)
            entry_price = position['entry_price']
            if position['direction'] == 'buy':
                pnl_percent = (current_price - entry_price) / entry_price
            else:
                pnl_percent = (entry_price - current_price) / entry_price
            
            pnl_usd = position['size_usd'] * pnl_percent
            self.total_pnl += pnl_usd
            
            if pnl_usd > 0:
                self.winning_trades += 1
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            reason_emoji = {'tp': 'üéØ', 'sl': 'üõë', 'timeout': '‚è∞'}
            self.logger.info(f"{reason_emoji.get(reason, 'üì§')} {symbol}: –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ ({reason})")
            self.logger.info(f"   üí∞ PnL: ${pnl_usd:.2f} ({pnl_percent*100:.2f}%)")
            self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {time.time() - position['entry_time']:.0f}s")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            del self.positions[symbol]
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await self._send_close_notification(symbol, reason, pnl_usd, pnl_percent)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def _get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker = await self.ex.fetch_ticker(symbol)
            return ticker['last']
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0
    
    async def _send_signal_notification(self, symbol: str, signal: ScalpSignal, size_usd: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            strategy_emoji = {
                'combo_v3': 'üî•',
                'momentum_scalp': '‚ö°',
                'mean_reversion': 'üîÑ',
                'volume_profile': 'üìä',
                'breakout': 'üí•',
                'adaptive_v3': 'üéØ'
            }
            
            emoji = strategy_emoji.get(signal.strategy_name, 'üìà')
            direction_emoji = 'üìà' if signal.direction == 'buy' else 'üìâ'
            
            message = f"""
{emoji} <b>ENHANCED SCALP –°–ò–ì–ù–ê–õ v3.0</b>

{direction_emoji} <b>{symbol}: {signal.direction.upper()}</b>

üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {signal.strategy_name}
üí™ <b>–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.strength:.3f}
üé≤ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.3f}

üí∞ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä: ${size_usd:.2f}
‚Ä¢ –í—Ö–æ–¥: ${signal.entry_price:.4f}
‚Ä¢ TP: ${signal.tp_price:.4f}
‚Ä¢ SL: ${signal.sl_price:.4f}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

<i>Enhanced Scalp v3.0 - ML + —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</i>
            """
            
            for chat_id in self.chat_ids:
                await self.tg_bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _send_close_notification(self, symbol: str, reason: str, pnl_usd: float, pnl_percent: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            reason_text = {
                'tp': 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
                'sl': 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª', 
                'timeout': '–¢–∞–π–º–∞—É—Ç –ø–æ–∑–∏—Ü–∏–∏'
            }
            
            pnl_emoji = 'üíö' if pnl_usd > 0 else '‚ù§Ô∏è'
            reason_emoji = {'tp': 'üéØ', 'sl': 'üõë', 'timeout': '‚è∞'}
            
            message = f"""
{reason_emoji.get(reason, 'üì§')} <b>–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê</b>

üìä <b>{symbol}</b>
üîπ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason_text.get(reason, reason)}

{pnl_emoji} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ PnL: ${pnl_usd:.2f}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {pnl_percent*100:.2f}%

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.total_trades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.winning_trades}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {(self.winning_trades/self.total_trades*100):.1f}%
‚Ä¢ –û–±—â–∏–π PnL: ${self.total_pnl:.2f}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
            """
            
            for chat_id in self.chat_ids:
                await self.tg_bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
    
    async def get_status_report(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        try:
            uptime = time.time() - self.start_time
            uptime_str = str(timedelta(seconds=int(uptime)))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML
            ml_stats = self.ml_engine.get_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_stats = self.signal_generator.get_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
            balance_stats = await self.balance_optimizer.get_statistics()
            
            # –í–∏–Ω—Ä–µ–π—Ç
            winrate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
            
            report = f"""
ü§ñ <b>Enhanced Scalp Bot v3.0 Status</b>

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}
üìä <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {len(self.positions)}
üí∞ <b>–û–±—â–∏–π PnL:</b> ${self.total_pnl:.2f}

üìà <b>–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.total_trades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.winning_trades}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${(self.total_pnl/self.total_trades if self.total_trades > 0 else 0):.2f}

ü§ñ <b>ML Engine:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ' if ml_stats['ml_available'] else '‚ùå'}
‚Ä¢ –û–±—É—á–µ–Ω: {'‚úÖ' if ml_stats['is_trained'] else '‚ùå'}
‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {ml_stats['predictions_made']}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {ml_stats['accuracy']:.1%}

üéØ <b>Signal Generator:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {signal_stats['signals_generated']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {signal_stats['successful_signals']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {signal_stats['success_rate']:.1%}

üí∞ <b>Balance Optimizer:</b>
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {balance_stats['cache_hit_rate']:.1f}%
‚Ä¢ API –∑–∞–ø—Ä–æ—Å–æ–≤: {balance_stats['api_calls']}
‚Ä¢ –û—à–∏–±–æ–∫: {balance_stats['errors']}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
            """
            
            return report.strip()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    
    async def get_positions_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
        try:
            if not self.positions:
                return "üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"
            
            info = "üìä <b>–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò</b>\n\n"
            
            for symbol, position in self.positions.items():
                current_price = await self._get_current_price(symbol)
                entry_price = position['entry_price']
                
                # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL
                if position['direction'] == 'buy':
                    current_pnl_percent = (current_price - entry_price) / entry_price
                else:
                    current_pnl_percent = (entry_price - current_price) / entry_price
                
                current_pnl_usd = position['size_usd'] * current_pnl_percent
                
                # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                hold_time = time.time() - position['entry_time']
                
                direction_emoji = 'üìà' if position['direction'] == 'buy' else 'üìâ'
                pnl_emoji = 'üíö' if current_pnl_usd > 0 else '‚ù§Ô∏è'
                
                info += f"""
{direction_emoji} <b>{symbol}</b>
üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {position['strategy']}
üí∞ –†–∞–∑–º–µ—Ä: ${position['size_usd']:.2f}
üìä –í—Ö–æ–¥: ${entry_price:.4f}
üìà –¢–µ–∫—É—â–∞—è: ${current_price:.4f}
{pnl_emoji} PnL: ${current_pnl_usd:.2f} ({current_pnl_percent*100:.2f}%)
‚è±Ô∏è –í—Ä–µ–º—è: {int(hold_time)}s
üìà TP: ${position['tp_price']:.4f}
üìâ SL: ${position['sl_price']:.4f}

                """
            
            return info.strip()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Scalp Bot v3.0...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            start_message = f"""
üöÄ <b>Enhanced Scalp Bot v3.0 –∑–∞–ø—É—â–µ–Ω!</b>

üî• <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è:</b>
‚Ä¢ ‚úÖ ML Signal Engine
‚Ä¢ ‚úÖ Advanced Signal Generator (6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
‚Ä¢ ‚úÖ Balance Optimizer
‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {len(self.symbols)}
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {self.max_positions}
‚Ä¢ –ú–∏–Ω. –æ—Ä–¥–µ—Ä: ${self.min_order_usd}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {self.max_hold_seconds}s

üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ Combo v3.0 (ML + —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)
‚Ä¢ Momentum Scalp
‚Ä¢ Mean Reversion
‚Ä¢ Volume Profile
‚Ä¢ Breakout
‚Ä¢ Adaptive v3.0

<i>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É —Å–∫–∞–ª—å–ø–∏–Ω–≥—É!</i>
            """
            
            for chat_id in self.chat_ids:
                await self.tg_bot.send_message(chat_id=chat_id, text=start_message, parse_mode='HTML')
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            tasks = [
                asyncio.create_task(self.analyze_market_and_generate_signals()),
                asyncio.create_task(self._periodic_status_report()),
                asyncio.create_task(self._periodic_ml_update())
            ]
            
            await asyncio.gather(*tasks)
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def _periodic_status_report(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã"""
        while self.running:
            try:
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                
                status_report = await self.get_status_report()
                
                for chat_id in self.chat_ids:
                    await self.tg_bot.send_message(
                        chat_id=chat_id, 
                        text=f"üìä <b>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç Scalp v3.0</b>\n\n{status_report}", 
                        parse_mode='HTML'
                    )
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def _periodic_ml_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
        while self.running:
            try:
                await asyncio.sleep(3600)  # 1 —á–∞—Å
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π
                # –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
                
                if len(self.ml_engine.training_data) > 100:
                    self.logger.info("üéì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π...")
                    results = self.ml_engine.train_models()
                    
                    if results:
                        self.logger.info(f"‚úÖ ML –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {results}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ML: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Enhanced Scalp Bot...")
        self.running = False

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    bot = EnhancedMultiAssetScalpBot()
    
    # –ó–∞–ø—É—Å–∫ IPC —Å–µ—Ä–≤–µ—Ä–∞
    if bot.ipc_server:
        await bot.ipc_server.start()
        
    await bot.run()

if __name__ == "__main__":
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        sys.exit(1)
        
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë Enhanced Scalp Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


