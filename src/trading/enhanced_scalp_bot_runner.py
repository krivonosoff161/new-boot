#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Scalp Bot Runner - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Scalp –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
"""
import os
import sys
import json
import asyncio
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, project_root)

from src.core.log_helper import build_logger
from src.trading.enhanced_scalp_bot import EnhancedScalpBot

async def run_scalp_bot(bot_id: str, user_id: int, config: dict):
    """–ó–∞–ø—É—Å–∫ Scalp –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –±–æ—Ç–æ–≤
    os.makedirs('logs/bots', exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
    logger = build_logger(
        name=f"scalp_bot_{bot_id}",
        level="INFO",
        log_file=f"logs/bots/bot_{bot_id}.log"
    )
    
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Scalp –±–æ—Ç–∞ {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot_config = config.get('config', {})
        if 'trading_pairs' in bot_config:
            config['trading_pairs'] = bot_config['trading_pairs']
            logger.info(f"üìä –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –≤ –±–æ—Ç: {config['trading_pairs']}")
        
        bot = EnhancedScalpBot(user_id, config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∏—Ä–∂—É
        bot_config = config.get('config', {})
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: {bot_config}")
        
        if 'api_key_id' in bot_config:
            logger.info(f"üîë API –∫–ª—é—á ID: {bot_config['api_key_id']}")
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
            api_keys = config.get('api_keys', [])
            if api_keys:
                key_data = api_keys[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á
                logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á: {key_data.get('api_key', 'N/A')[:10]}...")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∏—Ä–∂—É
                exchange_name = key_data.get('exchange', 'OKX')
                mode = key_data.get('mode', 'sandbox')
                
                success = await bot.setup_exchange(
                    exchange_name,
                    key_data.get('api_key'),
                    key_data.get('secret_key'),
                    key_data.get('passphrase', ''),
                    mode
                )
                
                if success:
                    logger.info(f"‚úÖ –ë–∏—Ä–∂–∞ {exchange_name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                    logger.info("üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é...")
                    await bot.start_trading()
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ {exchange_name}")
            else:
                logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            logger.error("‚ùå API –∫–ª—é—á ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Scalp –±–æ—Ç–µ: {e}")
        import traceback
        logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Enhanced Scalp Bot Runner')
    parser.add_argument('--bot-id', required=True, help='ID –±–æ—Ç–∞')
    parser.add_argument('--user-id', required=True, type=int, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--config-file', required=True, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(args.config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ Enhanced Scalp Bot Runner")
        print(f"üìä Bot ID: {args.bot_id}")
        print(f"üë§ User ID: {args.user_id}")
        print(f"üìÅ Config: {args.config_file}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(run_scalp_bot(args.bot_id, args.user_id, config))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Scalp –±–æ—Ç–∞: {e}")
        import traceback
        print(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()













