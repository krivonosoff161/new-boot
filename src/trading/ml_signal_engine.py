#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ML Signal Engine v3.0
–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã –≤ Scalp —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import numpy as np
import pandas as pd
import logging
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
import pickle
import os
from datetime import datetime, timedelta
import talib

# ML imports
try:
    from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
    from sklearn.svm import SVR
    from sklearn.preprocessing import StandardScaler, LabelEncoder
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score, classification_report
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False
    print("‚ö†Ô∏è scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. ML —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")

logger = logging.getLogger(__name__)

@dataclass
class MLPrediction:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    direction: str  # 'buy', 'sell', 'hold'
    confidence: float  # 0.0 - 1.0
    target_price: float
    timeframe_minutes: int
    features_used: List[str]
    timestamp: float

@dataclass
class MarketFeatures:
    """–†—ã–Ω–æ—á–Ω—ã–µ —Ñ–∏—á–∏ –¥–ª—è ML"""
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    rsi: float
    macd: float
    macd_signal: float
    stoch_k: float
    stoch_d: float
    bb_upper: float
    bb_lower: float
    bb_middle: float
    
    # –¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    price_change_1m: float
    price_change_5m: float
    volume_change: float
    volatility: float
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
    candle_pattern: str
    trend_strength: float
    support_distance: float
    resistance_distance: float

class MLSignalEngine:
    """
    ML –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ensemble –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π:
    - RandomForest –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    - GradientBoosting –¥–ª—è —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞  
    - SVR –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã
    """
    
    def __init__(self, config: Dict = None):
        self.config = config or {
            "timeframes": ["1m", "3m", "5m"],
            "lookback_periods": 50,
            "prediction_horizon": 5,
            "confidence_threshold": 0.6
        }
        self.logger = logging.getLogger(f"{__name__}.MLSignalEngine")
        
        # –ú–æ–¥–µ–ª–∏
        self.models = {}
        self.scalers = {}
        self.is_trained = False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.training_data = []
        self.feature_names = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.lookback_periods = [1, 5, 15, 30]  # –º–∏–Ω—É—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.prediction_horizon = 5  # –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç –≤–ø–µ—Ä–µ–¥
        self.min_confidence = 0.6  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.predictions_made = 0
        self.correct_predictions = 0
        self.model_performance = {}
        
        if ML_AVAILABLE:
            self._initialize_models()
            self.logger.info("‚úÖ ML Signal Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.logger.warning("‚ö†Ô∏è ML —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã - –Ω–µ—Ç scikit-learn")
    
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π"""
        if not ML_AVAILABLE:
            return
        
        # –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
        self.models['direction'] = RandomForestClassifier(
            n_estimators=100,
            max_depth=10,
            min_samples_split=5,
            random_state=42
        )
        
        # –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–∏–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
        self.models['strength'] = GradientBoostingClassifier(
            n_estimators=50,
            max_depth=6,
            learning_rate=0.1,
            random_state=42
        )
        
        # –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã (—Ä–µ–≥—Ä–µ—Å—Å–∏—è)
        self.models['price'] = SVR(
            kernel='rbf',
            C=1.0,
            epsilon=0.01
        )
        
        # –°–∫–∞–ª–µ—Ä—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        for model_name in self.models.keys():
            self.scalers[model_name] = StandardScaler()
        
        self.logger.debug("ü§ñ ML –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def extract_features(self, ohlcv_data: List, order_book: Dict = None) -> MarketFeatures:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á –¥–ª—è ML –∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            ohlcv_data: OHLCV –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100+ —Å–≤–µ—á–µ–π)
            order_book: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            MarketFeatures: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏
        """
        try:
            if len(ohlcv_data) < 50:
                self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏—á")
                return self._get_default_features()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤—ã
            closes = np.array([candle[4] for candle in ohlcv_data])
            highs = np.array([candle[2] for candle in ohlcv_data])
            lows = np.array([candle[3] for candle in ohlcv_data])
            volumes = np.array([candle[5] for candle in ohlcv_data])
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = talib.RSI(closes, timeperiod=14)[-1]
            macd, macd_signal, _ = talib.MACD(closes)
            stoch_k, stoch_d = talib.STOCH(highs, lows, closes)
            bb_upper, bb_middle, bb_lower = talib.BBANDS(closes)
            
            # –¶–µ–Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            current_price = closes[-1]
            price_change_1m = (current_price - closes[-2]) / closes[-2] if len(closes) > 1 else 0
            price_change_5m = (current_price - closes[-6]) / closes[-6] if len(closes) > 5 else 0
            
            # –û–±—ä–µ–º—ã
            volume_change = (volumes[-1] - np.mean(volumes[-10:])) / np.mean(volumes[-10:]) if len(volumes) > 10 else 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR)
            atr = talib.ATR(highs, lows, closes, timeperiod=14)[-1]
            volatility = atr / current_price if current_price > 0 else 0
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
            candle_pattern = self._detect_candle_pattern(ohlcv_data[-3:])
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            adx = talib.ADX(highs, lows, closes, timeperiod=14)[-1]
            trend_strength = adx / 100.0 if not np.isnan(adx) else 0.2
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            recent_highs = highs[-20:]
            recent_lows = lows[-20:]
            resistance = np.max(recent_highs)
            support = np.min(recent_lows)
            
            support_distance = (current_price - support) / current_price
            resistance_distance = (resistance - current_price) / current_price
            
            return MarketFeatures(
                rsi=rsi if not np.isnan(rsi) else 50,
                macd=macd[-1] if len(macd) > 0 and not np.isnan(macd[-1]) else 0,
                macd_signal=macd_signal[-1] if len(macd_signal) > 0 and not np.isnan(macd_signal[-1]) else 0,
                stoch_k=stoch_k[-1] if len(stoch_k) > 0 and not np.isnan(stoch_k[-1]) else 50,
                stoch_d=stoch_d[-1] if len(stoch_d) > 0 and not np.isnan(stoch_d[-1]) else 50,
                bb_upper=bb_upper[-1] if len(bb_upper) > 0 and not np.isnan(bb_upper[-1]) else current_price * 1.02,
                bb_lower=bb_lower[-1] if len(bb_lower) > 0 and not np.isnan(bb_lower[-1]) else current_price * 0.98,
                bb_middle=bb_middle[-1] if len(bb_middle) > 0 and not np.isnan(bb_middle[-1]) else current_price,
                price_change_1m=price_change_1m,
                price_change_5m=price_change_5m,
                volume_change=volume_change,
                volatility=volatility,
                candle_pattern=candle_pattern,
                trend_strength=trend_strength,
                support_distance=support_distance,
                resistance_distance=resistance_distance
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏—á: {e}")
            return self._get_default_features()
    
    def _detect_candle_pattern(self, recent_candles: List) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π"""
        if len(recent_candles) < 2:
            return "neutral"
        
        last_candle = recent_candles[-1]
        prev_candle = recent_candles[-2]
        
        # [timestamp, open, high, low, close, volume]
        last_open, last_close = last_candle[1], last_candle[4]
        prev_open, prev_close = prev_candle[1], prev_candle[4]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
        last_bullish = last_close > last_open
        prev_bullish = prev_close > prev_open
        
        # –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Å–≤–µ—á–∏
        last_body = abs(last_close - last_open) / last_open
        
        if last_bullish and prev_bullish and last_body > 0.01:
            return "bullish_momentum"
        elif not last_bullish and not prev_bullish and last_body > 0.01:
            return "bearish_momentum"
        elif last_bullish and not prev_bullish:
            return "reversal_up"
        elif not last_bullish and prev_bullish:
            return "reversal_down"
        else:
            return "neutral"
    
    def _get_default_features(self) -> MarketFeatures:
        """–§–∏—á–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return MarketFeatures(
            rsi=50, macd=0, macd_signal=0, stoch_k=50, stoch_d=50,
            bb_upper=1000, bb_lower=900, bb_middle=950,
            price_change_1m=0, price_change_5m=0, volume_change=0, volatility=0.02,
            candle_pattern="neutral", trend_strength=0.2,
            support_distance=0.05, resistance_distance=0.05
        )
    
    def features_to_array(self, features: MarketFeatures) -> np.array:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏—á –≤ numpy –º–∞—Å—Å–∏–≤ –¥–ª—è ML"""
        # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
        pattern_encoding = {
            'bullish_momentum': 1,
            'bearish_momentum': -1,
            'reversal_up': 0.5,
            'reversal_down': -0.5,
            'neutral': 0
        }
        
        feature_array = np.array([
            features.rsi / 100.0,  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º RSI
            features.macd,
            features.macd_signal,
            features.stoch_k / 100.0,
            features.stoch_d / 100.0,
            features.price_change_1m,
            features.price_change_5m,
            features.volume_change,
            features.volatility,
            pattern_encoding.get(features.candle_pattern, 0),
            features.trend_strength,
            features.support_distance,
            features.resistance_distance
        ])
        
        return feature_array
    
    async def predict_signal(self, ohlcv_data: List, order_book: Dict = None) -> MLPrediction:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            ohlcv_data: OHLCV –¥–∞–Ω–Ω—ã–µ
            order_book: –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            MLPrediction: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏—á–∏
            features = await self.extract_features(ohlcv_data, order_book)
            feature_array = self.features_to_array(features)
            
            if not ML_AVAILABLE or not self.is_trained:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ ML
                return self._basic_prediction(features, ohlcv_data)
            
            # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            return await self._ml_prediction(feature_array, features, ohlcv_data)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return MLPrediction(
                direction='hold',
                confidence=0.0,
                target_price=ohlcv_data[-1][4] if ohlcv_data else 0,
                timeframe_minutes=self.prediction_horizon,
                features_used=[],
                timestamp=datetime.now().timestamp()
            )
    
    def _basic_prediction(self, features: MarketFeatures, ohlcv_data: List) -> MLPrediction:
        """–ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ ML (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)"""
        current_price = ohlcv_data[-1][4]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        buy_signals = 0
        sell_signals = 0
        
        # RSI —Å–∏–≥–Ω–∞–ª—ã
        if features.rsi < 30:
            buy_signals += 1
        elif features.rsi > 70:
            sell_signals += 1
        
        # MACD —Å–∏–≥–Ω–∞–ª—ã
        if features.macd > features.macd_signal:
            buy_signals += 1
        else:
            sell_signals += 1
        
        # Bollinger Bands
        if current_price < features.bb_lower:
            buy_signals += 1
        elif current_price > features.bb_upper:
            sell_signals += 1
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
        if features.candle_pattern in ['bullish_momentum', 'reversal_up']:
            buy_signals += 1
        elif features.candle_pattern in ['bearish_momentum', 'reversal_down']:
            sell_signals += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if buy_signals > sell_signals:
            direction = 'buy'
            confidence = min(buy_signals / 4.0, 1.0)
            target_price = current_price * (1 + features.volatility * 2)
        elif sell_signals > buy_signals:
            direction = 'sell'
            confidence = min(sell_signals / 4.0, 1.0)
            target_price = current_price * (1 - features.volatility * 2)
        else:
            direction = 'hold'
            confidence = 0.1
            target_price = current_price
        
        return MLPrediction(
            direction=direction,
            confidence=confidence,
            target_price=target_price,
            timeframe_minutes=self.prediction_horizon,
            features_used=['rsi', 'macd', 'bb', 'candle_pattern'],
            timestamp=datetime.now().timestamp()
        )
    
    async def _ml_prediction(self, feature_array: np.array, features: MarketFeatures, ohlcv_data: List) -> MLPrediction:
        """ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–∫–æ–≥–¥–∞ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã)"""
        current_price = ohlcv_data[-1][4]
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏—á–∏
            X = self.scalers['direction'].transform([feature_array])
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            direction_proba = self.models['direction'].predict_proba(X)[0]
            direction_classes = self.models['direction'].classes_
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏–ª—ã
            strength_proba = self.models['strength'].predict_proba(X)[0]
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã
            predicted_price = self.models['price'].predict(X)[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
            best_direction_idx = np.argmax(direction_proba)
            direction = direction_classes[best_direction_idx]
            confidence = direction_proba[best_direction_idx]
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã
            strength_confidence = np.max(strength_proba)
            final_confidence = (confidence + strength_confidence) / 2
            
            self.predictions_made += 1
            
            return MLPrediction(
                direction=direction,
                confidence=final_confidence,
                target_price=predicted_price,
                timeframe_minutes=self.prediction_horizon,
                features_used=list(range(len(feature_array))),
                timestamp=datetime.now().timestamp()
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return self._basic_prediction(features, ohlcv_data)
    
    def add_training_data(self, features: MarketFeatures, actual_direction: str, actual_price_change: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        if not ML_AVAILABLE:
            return
        
        feature_array = self.features_to_array(features)
        
        training_sample = {
            'features': feature_array,
            'direction': actual_direction,
            'price_change': actual_price_change,
            'timestamp': datetime.now().timestamp()
        }
        
        self.training_data.append(training_sample)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        if len(self.training_data) > 10000:
            self.training_data = self.training_data[-5000:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000
        
        self.logger.debug(f"üìö –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –í—Å–µ–≥–æ: {len(self.training_data)}")
    
    def train_models(self) -> Dict[str, float]:
        """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
        if not ML_AVAILABLE or len(self.training_data) < 100:
            self.logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π")
            return {}
        
        try:
            self.logger.info("üéì –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X = np.array([sample['features'] for sample in self.training_data])
            y_direction = np.array([sample['direction'] for sample in self.training_data])
            y_price = np.array([sample['price_change'] for sample in self.training_data])
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ —Å–∏–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è
            y_strength = np.array(['weak' if abs(change) < 0.01 else 'strong' for change in y_price])
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            X_train, X_test, y_dir_train, y_dir_test = train_test_split(X, y_direction, test_size=0.2, random_state=42)
            _, _, y_str_train, y_str_test = train_test_split(X, y_strength, test_size=0.2, random_state=42)
            _, _, y_price_train, y_price_test = train_test_split(X, y_price, test_size=0.2, random_state=42)
            
            results = {}
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            X_train_scaled = self.scalers['direction'].fit_transform(X_train)
            X_test_scaled = self.scalers['direction'].transform(X_test)
            
            self.models['direction'].fit(X_train_scaled, y_dir_train)
            dir_accuracy = self.models['direction'].score(X_test_scaled, y_dir_test)
            results['direction_accuracy'] = dir_accuracy
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–∏–ª—ã
            X_train_scaled_str = self.scalers['strength'].fit_transform(X_train)
            X_test_scaled_str = self.scalers['strength'].transform(X_test)
            
            self.models['strength'].fit(X_train_scaled_str, y_str_train)
            str_accuracy = self.models['strength'].score(X_test_scaled_str, y_str_test)
            results['strength_accuracy'] = str_accuracy
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ü–µ–Ω—ã
            X_train_scaled_price = self.scalers['price'].fit_transform(X_train)
            X_test_scaled_price = self.scalers['price'].transform(X_test)
            
            self.models['price'].fit(X_train_scaled_price, y_price_train)
            price_score = self.models['price'].score(X_test_scaled_price, y_price_test)
            results['price_r2'] = price_score
            
            self.is_trained = True
            self.model_performance = results
            
            self.logger.info(f"‚úÖ ML –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã:")
            self.logger.info(f"   –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {dir_accuracy:.3f}")
            self.logger.info(f"   –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–ª—ã: {str_accuracy:.3f}")
            self.logger.info(f"   R¬≤ —Ü–µ–Ω—ã: {price_score:.3f}")
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π: {e}")
            return {}
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã ML –¥–≤–∏–∂–∫–∞"""
        accuracy = (self.correct_predictions / self.predictions_made) if self.predictions_made > 0 else 0
        
        return {
            'ml_available': ML_AVAILABLE,
            'is_trained': self.is_trained,
            'training_samples': len(self.training_data),
            'predictions_made': self.predictions_made,
            'correct_predictions': self.correct_predictions,
            'accuracy': accuracy,
            'model_performance': self.model_performance
        }
    
    def save_models(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not ML_AVAILABLE or not self.is_trained:
            return
        
        try:
            model_data = {
                'models': self.models,
                'scalers': self.scalers,
                'is_trained': self.is_trained,
                'model_performance': self.model_performance
            }
            
            with open(filepath, 'wb') as f:
                pickle.dump(model_data, f)
            
            self.logger.info(f"üíæ ML –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
    
    def load_models(self, filepath: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not ML_AVAILABLE or not os.path.exists(filepath):
            return
        
        try:
            with open(filepath, 'rb') as f:
                model_data = pickle.load(f)
            
            self.models = model_data['models']
            self.scalers = model_data['scalers']
            self.is_trained = model_data['is_trained']
            self.model_performance = model_data.get('model_performance', {})
            
            self.logger.info(f"üìÇ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filepath}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    import asyncio
    
    async def test_ml_engine():
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML SIGNAL ENGINE")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'ml_prediction_horizon': 5,
            'ml_min_confidence': 0.6
        }
        
        # –°–æ–∑–¥–∞–µ–º ML –¥–≤–∏–∂–æ–∫
        engine = MLSignalEngine(config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
        test_ohlcv = []
        base_price = 50000
        for i in range(100):
            price = base_price + (i * 10) + np.random.normal(0, 50)
            high = price * 1.001
            low = price * 0.999
            volume = 1000 + np.random.normal(0, 100)
            test_ohlcv.append([0, price, high, low, price, volume])
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏—á
        print("\nüìä –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á")
        features = await engine.extract_features(test_ohlcv)
        print(f"  RSI: {features.rsi:.2f}")
        print(f"  MACD: {features.macd:.4f}")
        print(f"  Volatility: {features.volatility:.4f}")
        print(f"  Pattern: {features.candle_pattern}")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("\nüéØ –¢–µ—Å—Ç 2: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
        prediction = await engine.predict_signal(test_ohlcv)
        print(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {prediction.direction}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.confidence:.3f}")
        print(f"  –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${prediction.target_price:.2f}")
        print(f"  –¢–∞–π–º—Ñ—Ä–µ–π–º: {prediction.timeframe_minutes} –º–∏–Ω")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìà –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = engine.get_statistics()
        for key, value in stats.items():
            print(f"  {key}: {value}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã ML Signal Engine –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
        if ML_AVAILABLE:
            print("ü§ñ ML —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚ö†Ô∏è ML —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ scikit-learn)")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_ml_engine())



