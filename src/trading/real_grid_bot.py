# v4.0 (+—Å—Ç–æ–ø-–ª–æ—Å—Å—ã, —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, MACD, Bollinger Bands)
"""
Real Grid Trading Bot - –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
v4.0: –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–æ–ø-–ª–æ—Å—Å—ã, —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, MACD, Bollinger Bands.
"""
import ccxt.async_support as ccxt
import numpy as np
import asyncio
import time
import logging
import signal
import sys
import os
import json
import math
import collections
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, field

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from core.log_helper import build_logger
from core.config_manager import ConfigManager
from core.exchange_mode_manager import exchange_mode_manager
from .base_trading_bot import BaseTradingBot, TradeEvent
from .capital_distributor import CapitalDistributor
from .adaptive_capital_distributor import AdaptiveCapitalDistributor, TradingMode
from .risk_manager import RiskManager, RiskLimits
from .market_analyzer import MarketAnalyzer, MarketRegime, TechnicalIndicators

@dataclass
class GridOrder:
    """–û—Ä–¥–µ—Ä –≤ Grid —Å–µ—Ç–∫–µ"""
    order_id: str
    symbol: str
    type: str  # buy/sell
    price: float
    amount: float
    level: int
    mode: str = 'base'
    created_at: float = field(default_factory=time.time)

class RealGridBot(BaseTradingBot):
    """
    Real Grid Trading Bot —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
    v3.0: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å BaseTradingBot –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã.
    """

    def __init__(self, user_id: int, config: Dict[str, any] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Real Grid Bot
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        super().__init__('grid', user_id, config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if config and 'trading_pairs' in config:
            self.symbols = config['trading_pairs']
            self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.symbols}")
        else:
            self.logger.warning("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ Grid-–±–æ—Ç–∞
        self.asset_grids = {}  # {symbol: {order_id: GridOrder}}
        self.executed_order_ids = collections.deque(maxlen=1000)
        self.last_grid_updates = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        grid_config = self.config.get('grid', {})
        self.base_spacing = grid_config.get('base_spacing', 0.008)
        self.max_levels = grid_config.get('max_levels', 6)
        self.min_order_usd = grid_config.get('min_order_usd', 20)
        self.grid_mode = grid_config.get('grid_mode', 'spot')  # spot/futures
        self.cci_block = grid_config.get('cci_block', -100)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.tp_multiplier = 1.0
        
        # Capital Distributor
        self.capital_distributor = None
        self.adaptive_capital_distributor = None
        
        # –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã v4.0
        self.risk_manager = None
        self.market_analyzer = None
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.current_trading_mode = TradingMode.AUTOMATIC
        self.pair_analyses = {}
        self.floating_profit_tracking = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        risk_limits = RiskLimits(
            max_drawdown_pct=grid_config.get('max_drawdown_pct', 15.0),
            max_position_pct=grid_config.get('max_position_pct', 20.0),
            max_correlation=grid_config.get('max_correlation', 0.7),
            stop_loss_pct=grid_config.get('stop_loss_pct', 2.0),
            trailing_stop_pct=grid_config.get('trailing_stop_pct', 1.5),
            atr_multiplier=grid_config.get('atr_multiplier', 2.0)
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.risk_manager = RiskManager(user_id, risk_limits, risk_mode='automatic')
        self.market_analyzer = MarketAnalyzer(user_id)

    def setup_exchange(self, exchange_name: str, api_key: str, secret: str, passphrase: str = None, mode: str = "demo"):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂–∏ –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        success = super().setup_exchange(exchange_name, api_key, secret, passphrase, mode)
        if success and self.ex:
            self.capital_distributor = CapitalDistributor(self.ex, self.user_id)
            self.adaptive_capital_distributor = AdaptiveCapitalDistributor(self.ex, self.user_id, self.config)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            try:
                balance = self.ex.fetch_balance({'type': 'spot'})
                real_balance = 0.0
                if 'total' in balance and 'USDT' in balance['total']:
                    real_balance = float(balance['total']['USDT'])
                else:
                    # –ï—Å–ª–∏ USDT –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    for currency, amount in balance.get('total', {}).items():
                        if amount > 0:
                            real_balance = float(amount)
                            break
                
                self.logger.info(f"üí∞ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${real_balance:.2f}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                self.risk_manager.set_exchange(self.ex, real_balance)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞
                recommended_mode = self.risk_manager.get_recommended_mode(real_balance)
                self.current_trading_mode = TradingMode(recommended_mode)
                self.risk_manager.set_risk_mode(recommended_mode)
                
                self.logger.info(f"üéØ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {self.current_trading_mode.value} (–∫–∞–ø–∏—Ç–∞–ª: ${real_balance:.2f})")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
                # Fallback –∫ $1000 –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
                self.risk_manager.set_exchange(self.ex, 1000.0)
        return success

    async def analyze_market_regime(self, symbol: str, ohlcv: List) -> Tuple:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarketAnalyzer
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            ohlcv: –î–∞–Ω–Ω—ã–µ OHLCV
            
        Returns:
            Tuple: (mode, spacing_mult, grid_levels, volatility, trend_strength, rsi, cci)
        """
        try:
            if len(ohlcv) < 20:
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {symbol}")
                return 'neutral', 1.0, 6, 0.01, 0, 50, 0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π MarketAnalyzer
            regime = self.market_analyzer.analyze_market_regime(ohlcv)
            indicators = self.market_analyzer.get_technical_indicators(ohlcv)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
            should_trade, reason = self.market_analyzer.should_trade(regime, indicators)
            
            if not should_trade:
                self.logger.info(f"‚ö†Ô∏è {symbol}: –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è - {reason}")
                return 'avoid', 0.0, 0, regime.volatility, regime.trend_strength, indicators.rsi, 0
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
            if regime.name == 'sideways':
                mode = 'range'
                spacing_mult = 1.0 + regime.volatility * 5
                grid_levels = max(4, min(8, int(6 + regime.volatility * 2)))
            elif regime.name in ['strong_uptrend', 'strong_downtrend']:
                mode = 'trend'
                spacing_mult = 1.0 + regime.volatility * 8
                grid_levels = max(3, min(6, int(4 + regime.volatility * 2)))
            elif regime.name == 'high_volatility':
                mode = 'volatile'
                spacing_mult = 1.0 + regime.volatility * 12
                grid_levels = max(2, min(4, int(3 + regime.volatility)))
            else:
                mode = 'neutral'
                spacing_mult = 1.0 + regime.volatility * 6
                grid_levels = max(4, min(6, int(5 + regime.volatility)))
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            self.logger.info(f"üìä {symbol}: {regime.name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {regime.confidence:.2f}), "
                           f"RSI: {indicators.rsi:.1f}, BB: {indicators.bb_position:.2f}, "
                           f"Vol: {regime.volatility:.3f}, –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {regime.recommendation}")
            
            return (mode, spacing_mult, grid_levels, regime.volatility, 
                   regime.trend_strength, indicators.rsi, 0)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}: {e}")
            return 'neutral', 1.0, 6, 0.01, 0, 50, 0

    def is_spread_acceptable(self, symbol: str) -> bool:
        """–§–∏–ª—å—Ç—Ä –ø–æ —Å–ø—Ä–µ–¥—É"""
        try:
            ticker = self.ex.fetch_ticker(symbol)
            bid = ticker.get('bid')
            ask = ticker.get('ask')
            if bid is None or ask is None or bid == 0:
                return False
            spread_pct = (ask - bid) / bid
            # –°–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 0.1%
            return spread_pct < 0.001
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–∞ –¥–ª—è {symbol}: {e}")
            return False

    async def create_reverse_grid(self, symbol: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)"""
        # Cooldown
        current_time = time.time()
        last_update = self.last_grid_updates.get(symbol, 0)
        cooldown_period = 60  # 1 –º–∏–Ω—É—Ç–∞
        
        if current_time - last_update < cooldown_period:
            self.logger.debug(f"‚è≥ {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ cooldown")
            return
            
        self.last_grid_updates[symbol] = current_time
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if await self.risk_manager.check_global_stop_loss():
                self.logger.critical(f"üö® {symbol}: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º")
                return
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if not self.is_spread_acceptable(symbol):
                self.logger.info(f"‚ö†Ô∏è {symbol}: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–ø—Ä–µ–¥—É")
                return
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            balances = await self.get_balances()
            symbol_balance = balances.get(symbol, {'base': 0, 'quote': 0})
            ticker = self.ex.fetch_ticker(symbol)
            current_price = ticker['last']
            allocated_capital_for_symbol = self.allocated_capital.get(symbol, 0)
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
            if allocated_capital_for_symbol < self.min_order_usd * 2:
                self.logger.info(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ({allocated_capital_for_symbol:.2f} USDT)")
                return
                
            # 3. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            ohlcv = self.ex.fetch_ohlcv(symbol, '1m', limit=50)
            mode, spacing_mult, grid_levels, volatility, trend_strength, rsi, cci = await self.analyze_market_regime(symbol, ohlcv)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            if mode == 'avoid':
                self.logger.info(f"‚ö†Ô∏è {symbol}: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞")
                return
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–∏
            existing_symbols = list(self.asset_grids.keys())
            if existing_symbols:
                ohlcv_data = {symbol: ohlcv}
                for existing_symbol in existing_symbols:
                    try:
                        existing_ohlcv = self.ex.fetch_ohlcv(existing_symbol, '1m', limit=20)
                        ohlcv_data[existing_symbol] = existing_ohlcv
                    except:
                        continue
                
                if not await self.risk_manager.check_correlation_limits(symbol, existing_symbols, ohlcv_data):
                    self.logger.info(f"‚ö†Ô∏è {symbol}: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")
                    return
                
            # 4. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
            adjusted_spacing = self.base_spacing * spacing_mult
            actual_levels = min(grid_levels, self.max_levels)
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            estimated_position_value = allocated_capital_for_symbol
            if not await self.risk_manager.check_position_limit(symbol, current_price, estimated_position_value / current_price):
                self.logger.warning(f"‚ö†Ô∏è {symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –ª–∏–º–∏—Ç")
                return
            
            # 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
            total_orders = actual_levels * 2  # BUY –∏ SELL —É—Ä–æ–≤–Ω–∏
            capital_per_order = allocated_capital_for_symbol / total_orders if total_orders > 0 else 0
            
            if capital_per_order <= 0:
                self.logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞")
                return
            
            # 6. –°–æ–∑–¥–∞–µ–º BUY —É—Ä–æ–≤–Ω–∏ (LONG)
            buy_prices = []
            for i in range(actual_levels):
                price_level = current_price * (1 - adjusted_spacing * (i + 1))
                buy_prices.append(price_level)
                
            # 7. –°–æ–∑–¥–∞–µ–º SELL —É—Ä–æ–≤–Ω–∏
            sell_prices = []
            if self.grid_mode == 'spot':
                # –î–ª—è spot –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                base_balance = symbol_balance['base']
                
                if base_balance <= 0:
                    self.logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SELL –æ—Ä–¥–µ—Ä–æ–≤ –≤ spot —Ä–µ–∂–∏–º–µ")
                else:
                    for i in range(actual_levels):
                        price_level = current_price * (1 + adjusted_spacing * (i + 1))
                        sell_prices.append(price_level)
            else:
                # –î–ª—è futures —Å–æ–∑–¥–∞–µ–º SELL —É—Ä–æ–≤–Ω–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ
                for i in range(actual_levels):
                    price_level = current_price * (1 + adjusted_spacing * (i + 1))
                    sell_prices.append(price_level)
            
            # 8. –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ
            if symbol in self.asset_grids:
                await self._cancel_existing_orders(symbol)
                    
            # 9. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
            new_orders = {}
            
            # BUY –æ—Ä–¥–µ—Ä–∞
            for i, buy_price in enumerate(buy_prices):
                try:
                    amount_usd = capital_per_order
                    amount_asset = amount_usd / buy_price
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
                    if not await self.check_min_lot(symbol, amount_asset, buy_price):
                        continue
                        
                    order = self.ex.create_limit_buy_order(symbol, amount_asset, buy_price)
                    order_id = order['id']
                    
                    new_orders[order_id] = GridOrder(
                        order_id=order_id,
                        symbol=symbol,
                        type='buy',
                        price=buy_price,
                        amount=amount_asset,
                        level=i+1,
                        mode=mode
                    )
                    
                    self.logger.info(f"üìâ {symbol} BUY –æ—Ä–¥–µ—Ä #{order_id}: {amount_asset:.6f} @ {buy_price:.2f} (${amount_usd:.2f})")
                except ccxt.InsufficientFunds as e:
                    self.logger.warning(f"‚ö†Ô∏è {symbol} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è BUY –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ {i+1}: {e}")
                    break
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ BUY –æ—Ä–¥–µ—Ä–∞ {symbol} –Ω–∞ —É—Ä–æ–≤–Ω–µ {i+1}: {e}")
                    
            # SELL –æ—Ä–¥–µ—Ä–∞
            if not sell_prices:
                self.asset_grids[symbol] = new_orders
                self.logger.info(f"üîß {symbol} Grid: Buy {len(buy_prices)} | Sell 0")
                return
                
            for i, sell_price in enumerate(sell_prices):
                try:
                    if self.grid_mode == 'spot':
                        # –î–ª—è spot –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                        balance = await self.get_balances()
                        symbol_balance = balance.get(symbol, {'base': 0, 'quote': 0})
                        base_balance = symbol_balance['base']
                        amount_per_sell_level = base_balance / len(sell_prices) if len(sell_prices) > 0 else 0
                        
                        if amount_per_sell_level <= 0:
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
                        if not await self.check_min_lot(symbol, amount_per_sell_level, sell_price):
                            continue
                            
                        order = self.ex.create_limit_sell_order(symbol, amount_per_sell_level, sell_price)
                    else:
                        # –î–ª—è futures —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏
                        amount_usd = capital_per_order
                        amount_asset = amount_usd / sell_price
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
                        if not await self.check_min_lot(symbol, amount_asset, sell_price):
                            continue
                            
                        order = self.ex.create_limit_sell_order(symbol, amount_asset, sell_price)
                        
                    order_id = order['id']
                    
                    new_orders[order_id] = GridOrder(
                        order_id=order_id,
                        symbol=symbol,
                        type='sell',
                        price=sell_price,
                        amount=amount_per_sell_level if self.grid_mode == 'spot' else amount_asset,
                        level=i+1,
                        mode=mode
                    )
                    
                    self.logger.info(f"üìà {symbol} SELL –æ—Ä–¥–µ—Ä #{order_id}: {new_orders[order_id].amount:.6f} @ {sell_price:.2f}")
                except ccxt.InsufficientFunds as e:
                    self.logger.warning(f"‚ö†Ô∏è {symbol} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è SELL –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ {i+1}: {e}")
                    break
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SELL –æ—Ä–¥–µ—Ä–∞ {symbol} –Ω–∞ —É—Ä–æ–≤–Ω–µ {i+1}: {e}")
                    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
            self.asset_grids[symbol] = new_orders
            self.logger.info(f"üîß {symbol} Grid: Buy {len(buy_prices)} | Sell {len(sell_prices)}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è {symbol}: {e}")

    async def check_all_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        for symbol in list(self.asset_grids.keys()):
            try:
                open_orders = self.ex.fetch_open_orders(symbol)
                open_order_ids = {order['id'] for order in open_orders}
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
                continue
                
            executed_orders = []
            current_grid_orders = list(self.asset_grids[symbol].items())
            
            for order_id, order_info in current_grid_orders:
                if order_id not in open_order_ids and order_id not in self.executed_order_ids:
                    # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
                    executed_orders.append((order_id, order_info))
                    self.executed_order_ids.append(order_id)
                    self.logger.info(f"‚úÖ {symbol}: –ò—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä #{order_id} ({order_info.type})")
                    
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            for order_id, order_info in executed_orders:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                if order_id in self.asset_grids[symbol]:
                    del self.asset_grids[symbol][order_id]
                    
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                trade_event = TradeEvent(
                    ts=time.time(),
                    symbol=symbol,
                    side=order_info.type,
                    price=order_info.price,
                    qty=order_info.amount
                )
                await self.log_trade(trade_event)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
                try:
                    current_price = order_info.price  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                    side = 'long' if order_info.type == 'buy' else 'short'
                    await self.risk_manager.add_position(
                        symbol=symbol,
                        side=side,
                        entry_price=order_info.price,
                        quantity=order_info.amount,
                        current_price=current_price,
                        ohlcv=[]  # OHLCV –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–∑–∂–µ
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä: {e}")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                try:
                    if order_info.type == 'buy':
                        # –°–æ–∑–¥–∞–µ–º SELL –æ—Ä–¥–µ—Ä (Take Profit)
                        tp_price = order_info.price * (1 + self.base_spacing)
                        tp_amount = order_info.amount
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
                        if await self.check_min_lot(symbol, tp_amount, tp_price):
                            tp_order = self.ex.create_limit_sell_order(symbol, tp_amount, tp_price)
                            tp_order_id = tp_order['id']
                            
                            self.asset_grids[symbol][tp_order_id] = GridOrder(
                                order_id=tp_order_id,
                                symbol=symbol,
                                type='sell',
                                price=tp_price,
                                amount=tp_amount,
                                level=order_info.level,
                                mode=order_info.mode
                            )
                            
                            self.logger.info(f"üéØ {symbol} TP SELL –æ—Ä–¥–µ—Ä #{tp_order_id}: {tp_amount:.6f} @ {tp_price:.2f}")
                            
                    elif order_info.type == 'sell':
                        # –°–æ–∑–¥–∞–µ–º BUY –æ—Ä–¥–µ—Ä (Take Profit)
                        tp_price = order_info.price * (1 - self.base_spacing)
                        tp_amount = order_info.amount
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
                        if await self.check_min_lot(symbol, tp_amount, tp_price):
                            tp_order = self.ex.create_limit_buy_order(symbol, tp_amount, tp_price)
                            tp_order_id = tp_order['id']
                            
                            self.asset_grids[symbol][tp_order_id] = GridOrder(
                                order_id=tp_order_id,
                                symbol=symbol,
                                type='buy',
                                price=tp_price,
                                amount=tp_amount,
                                level=order_info.level,
                                mode=order_info.mode
                            )
                            
                            self.logger.info(f"üéØ {symbol} TP BUY –æ—Ä–¥–µ—Ä #{tp_order_id}: {tp_amount:.6f} @ {tp_price:.2f}")
                            
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}")

    async def _cancel_existing_orders(self, symbol: str):
        """–û—Ç–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            for order_id, order_info in self.asset_grids[symbol].items():
                try:
                    self.ex.cancel_order(order_id, symbol)
                    self.logger.info(f"‚ùå {symbol}: –û—Ç–º–µ–Ω—ë–Ω –æ—Ä–¥–µ—Ä #{order_id}")
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            
            self.asset_grids[symbol] = {}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")

    async def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        self.logger.info("üö™ –ù–∞—á–∞–ª–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π Grid-–±–æ—Ç–∞...")
        
        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        for symbol in list(self.asset_grids.keys()):
            await self._cancel_existing_orders(symbol)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è futures)
        if self.grid_mode == 'futures':
            try:
                positions = self.ex.fetch_positions()
                for position in positions:
                    symbol = position['symbol']
                    side = position['side']
                    amount = position['contracts']
                    
                    if amount > 0:
                        close_side = 'sell' if side == 'long' else 'buy'
                        try:
                            if close_side == 'sell':
                                self.ex.create_market_sell_order(symbol, amount)
                            else:
                                self.ex.create_market_buy_order(symbol, amount)
                            self.logger.info(f"üö™ {symbol}: –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {amount}")
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol} {side}: {e}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
        else:
            self.logger.info("üì≠ Spot —Ä–µ–∂–∏–º: –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            
        self.logger.info("‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π Grid-–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    async def execute_strategy(self):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è Grid-–±–æ—Ç–∞ —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if await self.risk_manager.check_global_stop_loss():
                self.logger.critical("üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–¢–û–ü-–õ–û–°–°! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
                await self.close_all_positions()
                return
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            triggered_stops = await self.risk_manager.check_stop_losses()
            for symbol in triggered_stops:
                self.logger.warning(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {symbol}")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                await self.risk_manager.remove_position(symbol)
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ
                if symbol in self.asset_grids:
                    await self._cancel_existing_orders(symbol)
            
            # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–æ–≤
            for symbol in self.asset_grids.keys():
                try:
                    ticker = self.ex.fetch_ticker(symbol)
                    current_price = ticker['last']
                    await self.risk_manager.update_trailing_stops(symbol, current_price)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –¥–ª—è {symbol}: {e}")
            
            # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
            await self.distribute_capital()
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–≤–∞—é—â–∏–π –ø—Ä–æ—Ñ–∏—Ç
            await self.update_floating_profits()
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            await self.check_all_orders()
            
            # 7. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤
            for symbol in self.symbols:
                await self.create_reverse_grid(symbol)
                
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ execute_strategy: {e}")

    async def distribute_capital(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∞—Ä –∏ –ø–ª–∞–≤–∞—é—â–∏–º –ø—Ä–æ—Ñ–∏—Ç–æ–º"""
        self.logger.info("üîÑ –ù–∞—á–∞–ª–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞...")
        self.logger.info(f"üìä –¢–µ–∫—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {self.symbols}")
        
        try:
            if self.adaptive_capital_distributor:
                # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
                self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(self.symbols)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
                pair_analyses = await self.adaptive_capital_distributor.analyze_trading_pairs(self.symbols)
                self.pair_analyses = {analysis.symbol: analysis for analysis in pair_analyses}
                
                # 2. –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
                total_capital = await self.adaptive_capital_distributor.get_total_capital()
                selected_pairs = await self.adaptive_capital_distributor.select_optimal_pairs(
                    pair_analyses, self.current_trading_mode, total_capital
                )
                
                # 3. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
                allocations = await self.adaptive_capital_distributor.distribute_capital_adaptively(
                    self.current_trading_mode, selected_pairs
                )
                
                # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                self.symbols = [pair.symbol for pair in selected_pairs]
                
                # 5. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–æ—Ç–∞
                self.allocated_capital = {
                    allocation.symbol: allocation.allocated_amount 
                    for allocation in allocations.values()
                }
                
                self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ {self.current_trading_mode.value}")
                self.logger.info(f"üí∞ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏: {self.allocated_capital}")
                
            elif self.capital_distributor:
                # Fallback –∫ —É–º–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
                self.logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º CapitalDistributor –¥–ª—è {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                allocations = await self.capital_distributor.smart_distribute_for_strategy('grid', self.symbols)
                self.allocated_capital = allocations
                self.logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω—ã –∞–ª–ª–æ–∫–∞—Ü–∏–∏: {allocations}")
            else:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
                self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞")
                allocations = await super().distribute_capital()
                self.allocated_capital = allocations
                self.logger.info(f"üí∞ –ë–∞–∑–æ–≤—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏: {allocations}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            for symbol, amount in self.allocated_capital.items():
                self.logger.info(f"üí∞ {symbol}: –≤—ã–¥–µ–ª–µ–Ω–æ ${amount:.2f} USDT")
                
            self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
            try:
                allocations = await super().distribute_capital()
                self.allocated_capital = allocations
                self.logger.info(f"üí∞ Fallback –∞–ª–ª–æ–∫–∞—Ü–∏–∏: {allocations}")
            except Exception as fallback_error:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {fallback_error}")
                self.allocated_capital = {}

    async def update_floating_profits(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        try:
            if not self.adaptive_capital_distributor:
                return
                
            for symbol in self.symbols:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    ticker = self.ex.fetch_ticker(symbol)
                    current_price = ticker['last']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–ª–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–∞—Ä—ã
                    if symbol in self.allocated_capital:
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–ª–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                        from src.trading.adaptive_capital_distributor import CapitalAllocation
                        temp_allocation = CapitalAllocation(
                            symbol=symbol,
                            allocated_amount=self.allocated_capital[symbol],
                            min_amount=200.0,
                            max_amount=self.allocated_capital[symbol] * 2.0,
                            risk_level='medium',
                            profit_target=self.allocated_capital[symbol] * 0.1,
                            stop_loss=self.allocated_capital[symbol] * 0.05,
                            trailing_stop=True,
                            position_size=0.0
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–≤–∞—é—â–∏–π –ø—Ä–æ—Ñ–∏—Ç
                        profit_info = await self.adaptive_capital_distributor.update_floating_profit(
                            symbol, current_price, temp_allocation
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏—Ç–µ
                        self.floating_profit_tracking[symbol] = profit_info
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if profit_info.get('current_profit', 0) > 50:
                            self.logger.info(f"üí∞ {symbol}: –ü–ª–∞–≤–∞—é—â–∏–π –ø—Ä–æ—Ñ–∏—Ç ${profit_info.get('current_profit', 0):.2f} "
                                           f"({profit_info.get('profit_pct', 0):.1f}%)")
                            
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è {symbol}: {e}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–≤–∞—é—â–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {e}")

    async def get_grid_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Grid —Å–µ—Ç–æ–∫"""
        try:
            status = {
                'active_grids': len(self.asset_grids),
                'total_orders': sum(len(orders) for orders in self.asset_grids.values()),
                'executed_orders': len(self.executed_order_ids),
                'current_mode': self.current_mode,
                'mode_switches': self.mode_switch_count,
                'symbols': {}
            }
            
            for symbol, orders in self.asset_grids.items():
                buy_orders = [o for o in orders.values() if o.type == 'buy']
                sell_orders = [o for o in orders.values() if o.type == 'sell']
                
                status['symbols'][symbol] = {
                    'buy_orders': len(buy_orders),
                    'sell_orders': len(sell_orders),
                    'total_orders': len(orders),
                    'allocated_capital': self.allocated_capital.get(symbol, 0)
                }
            
            return status
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Grid: {e}")
            return {}

    async def get_adaptive_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            base_summary = {
                'current_mode': self.current_mode,
                'mode_switches': self.mode_switch_count,
                'last_mode_switch': self.last_mode_switch,
                'active_grids': len(self.asset_grids),
                'total_orders': sum(len(orders) for orders in self.asset_grids.values()),
                'executed_orders': len(self.executed_order_ids),
                'grid_status': await self.get_grid_status()
            }
            
            return base_summary
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {}
    
    async def get_risk_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∏—Å–∫–∞–º"""
        try:
            if self.risk_manager:
                return self.risk_manager.get_risk_summary()
            else:
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}")
            return {}
    
    async def get_enhanced_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–≤–æ–¥–∫–∏ —Å —Ä–∏—Å–∫–∞–º–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            base_summary = await self.get_adaptive_summary()
            risk_summary = await self.get_risk_summary()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            adaptive_summary = {}
            if self.adaptive_capital_distributor:
                adaptive_summary = await self.adaptive_capital_distributor.get_allocation_summary()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–≤–æ–¥–∫–∏
            enhanced_summary = {
                **base_summary,
                'risk_management': risk_summary,
                'adaptive_system': {
                    'current_mode': self.current_trading_mode.value,
                    'pair_analyses': len(self.pair_analyses),
                    'floating_profits': self.floating_profit_tracking,
                    'allocation_summary': adaptive_summary
                },
                'version': 'v5.0',
                'features': [
                    'adaptive_capital_distribution',
                    'floating_profit_tracking',
                    '3_mode_risk_management',
                    'dynamic_pair_selection',
                    'correlation_analysis',
                    'stop_losses',
                    'trend_analysis',
                    'position_risk_management',
                    'macd_indicators',
                    'bollinger_bands',
                    'volume_analysis'
                ]
            }
            
            return enhanced_summary
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return {}


