#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Real Grid Bot Runner - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Grid –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
"""
import os
import sys
import json
import asyncio
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, project_root)

from src.core.log_helper import build_logger
from src.trading.real_grid_bot import RealGridBot

async def run_grid_bot(bot_id: str, user_id: int, config: dict):
    """–ó–∞–ø—É—Å–∫ Grid –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –±–æ—Ç–æ–≤
    os.makedirs('logs/bots', exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
    logger = build_logger(
        name=f"grid_bot_{bot_id}",
        level="INFO",
        log_file=f"logs/bots/bot_{bot_id}.log"
    )
    
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Grid –±–æ—Ç–∞ {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        bot_config = config.get('config', {})
        if 'trading_pairs' in bot_config:
            config['trading_pairs'] = bot_config['trading_pairs']
            logger.info(f"üìä –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –≤ –±–æ—Ç: {config['trading_pairs']}")
        
        bot = RealGridBot(user_id, config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∏—Ä–∂—É
        bot_config = config.get('config', {})
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: {bot_config}")
        
        if 'api_key_id' in bot_config:
            logger.info(f"üîë API –∫–ª—é—á ID: {bot_config['api_key_id']}")
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
            from src.core.api_keys_manager import APIKeysManager
            api_keys_manager = APIKeysManager()
            decrypted_keys = api_keys_manager.get_decrypted_key(user_id, bot_config['api_key_id'])
            
            if decrypted_keys:
                logger.info(f"‚úÖ API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                success = bot.setup_exchange(
                    exchange_name=bot_config.get('exchange', 'okx'),
                    api_key=decrypted_keys['api_key'],
                    secret=decrypted_keys['secret'],
                    passphrase=decrypted_keys.get('passphrase'),
                    mode=bot_config.get('mode', 'demo')
                )
                
                if success:
                    logger.info(f"‚úÖ –ë–∏—Ä–∂–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
                    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞ {bot_id}")
                    cycle_count = 0
                    try:
                        while True:
                            try:
                                cycle_count += 1
                                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count} - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                                await bot.execute_strategy()
                                logger.info(f"‚úÖ –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                            except KeyboardInterrupt:
                                logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                                break
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{cycle_count} –±–æ—Ç–∞: {e}")
                                import traceback
                                logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    except Exception as e:
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                        import traceback
                        logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∏—Ä–∂—É –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        else:
            logger.error(f"‚ùå API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ {bot_id}: {e}")
    finally:
        logger.info(f"üõë –ë–æ—Ç {bot_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Real Grid Bot Runner')
    parser.add_argument('--config', required=True, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--bot-id', required=True, help='ID –±–æ—Ç–∞')
    parser.add_argument('--user-id', required=True, type=int, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    args = parser.parse_args()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {args.bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {args.user_id}")
    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(args.config, 'r', encoding='utf-8') as f:
            bot_config = json.load(f)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {bot_config}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(run_grid_bot(args.bot_id, args.user_id, bot_config))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()
