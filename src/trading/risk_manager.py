# v1.0 (+—Å—Ç–æ–ø-–ª–æ—Å—Å—ã, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–∞—Ö.
v1.0: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã, –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç.
"""
import asyncio
import time
import logging
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime, timedelta

@dataclass
class RiskLimits:
    """–õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –¥–ª—è –±–æ—Ç–∞"""
    max_drawdown_pct: float = 15.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –≤ %
    max_position_pct: float = 30.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–∞—Ä—É –≤ % (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è demo)
    max_correlation: float = 0.7    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
    stop_loss_pct: float = 2.0      # –°—Ç–æ–ø-–ª–æ—Å—Å –≤ % –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    trailing_stop_pct: float = 1.5  # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –≤ %
    atr_multiplier: float = 2.0     # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞

@dataclass
class PositionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    side: str  # 'long' –∏–ª–∏ 'short'
    entry_price: float
    quantity: float
    current_price: float
    unrealized_pnl: float
    unrealized_pnl_pct: float
    stop_loss_price: float
    trailing_stop_price: float
    created_at: float

class RiskManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤ —Å 3-—Ä–µ–∂–∏–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏, –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.
    """
    
    def __init__(self, user_id: int, limits: RiskLimits = None, risk_mode: str = "automatic"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Risk Manager
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limits: –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞
            risk_mode: –†–µ–∂–∏–º —Ä–∏—Å–∫–∞ ('conservative', 'aggressive', 'automatic')
        """
        self.user_id = user_id
        self.limits = limits or RiskLimits()
        self.logger = logging.getLogger(f"risk_manager_{user_id}")
        
        # 3-—Ä–µ–∂–∏–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
        self.risk_modes = {
            'conservative': {
                'max_drawdown_pct': 5.0,      # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
                'stop_loss_pct': 2.0,         # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —Å–¥–µ–ª–∫—É
                'max_position_pct': 15.0,     # 15% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                'max_correlation': 0.5,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.5
                'min_capital_per_pair': 400.0, # –ú–∏–Ω–∏–º—É–º $400 –Ω–∞ –ø–∞—Ä—É
                'max_pairs': 1,               # –ú–∞–∫—Å–∏–º—É–º 1 –ø–∞—Ä–∞
                'volatility_range': (2.0, 4.0) # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-4%
            },
            'aggressive': {
                'max_drawdown_pct': 8.0,      # 8% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
                'stop_loss_pct': 3.0,         # 3% —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —Å–¥–µ–ª–∫—É
                'max_position_pct': 8.0,      # 8% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                'max_correlation': 0.7,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.7
                'min_capital_per_pair': 200.0, # –ú–∏–Ω–∏–º—É–º $200 –Ω–∞ –ø–∞—Ä—É
                'max_pairs': 3,               # –ú–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä—ã
                'volatility_range': (4.0, 8.0) # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 4-8%
            },
            'automatic': {
                'max_drawdown_pct': 6.0,      # 6% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
                'stop_loss_pct': 2.5,         # 2.5% —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —Å–¥–µ–ª–∫—É
                'max_position_pct': 10.0,     # 10% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                'max_correlation': 0.6,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.6
                'min_capital_per_pair': 200.0, # –ú–∏–Ω–∏–º—É–º $200 –Ω–∞ –ø–∞—Ä—É
                'max_pairs': 5,               # –ú–∞–∫—Å–∏–º—É–º 5 –ø–∞—Ä
                'volatility_range': (3.0, 6.0) # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 3-6%
            }
        }
        
        # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∏—Å–∫–∞
        self.current_mode = risk_mode
        self.mode_config = self.risk_modes[self.current_mode]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ —Ä–µ–∂–∏–º–∞
        self.limits.max_drawdown_pct = self.mode_config['max_drawdown_pct']
        self.limits.stop_loss_pct = self.mode_config['stop_loss_pct']
        self.limits.max_position_pct = self.mode_config['max_position_pct']
        self.limits.max_correlation = self.mode_config['max_correlation']
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
        self.positions: Dict[str, PositionInfo] = {}
        self.global_stop_loss_triggered = False
        self.last_balance_check = 0
        self.initial_balance = 0.0
        self.current_balance = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.losing_trades = 0
        self.max_drawdown = 0.0
        self.current_drawdown = 0.0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        self._adaptive_thresholds = {
            'balance_400_800': {'pairs': 1, 'min_capital': 400},
            'balance_800_1500': {'pairs': 2, 'min_capital': 200},
            'balance_1500_3000': {'pairs': 3, 'min_capital': 200},
            'balance_3000_plus': {'pairs': 4, 'min_capital': 200}
        }
        
    async def initialize(self, exchange, initial_balance: float):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π –∏ –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        
        Args:
            exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        """
        self.ex = exchange
        self.initial_balance = initial_balance
        self.current_balance = initial_balance
        self.last_balance_check = time.time()
        
        self.logger.info(f"üõ°Ô∏è Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:.2f}")
    
    def set_exchange(self, exchange, initial_balance: float):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Risk Manager —Å –±–∏—Ä–∂–µ–π
        
        Args:
            exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        """
        self.ex = exchange
        self.initial_balance = initial_balance
        self.current_balance = initial_balance
        self.last_balance_check = time.time()
        
        self.logger.info(f"üõ°Ô∏è Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:.2f}")
        
    async def check_global_stop_loss(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if time.time() - self.last_balance_check > 30:
                self.update_balance()
                self.last_balance_check = time.time()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            if self.initial_balance > 0:
                self.current_drawdown = (self.initial_balance - self.current_balance) / self.initial_balance * 100
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
                if self.current_drawdown > self.max_drawdown:
                    self.max_drawdown = self.current_drawdown
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                if self.current_drawdown >= self.limits.max_drawdown_pct:
                    if not self.global_stop_loss_triggered:
                        self.global_stop_loss_triggered = True
                        self.logger.critical(f"üö® –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–¢–û–ü-–õ–û–°–°! –ü—Ä–æ—Å–∞–¥–∫–∞: {self.current_drawdown:.2f}% >= {self.limits.max_drawdown_pct}%")
                        return True
                        
            return self.global_stop_loss_triggered
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return False
    
    def update_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if not self.ex:
                return
                
            balance = self.ex.fetch_balance({'type': 'spot'})
            if 'total' in balance and 'USDT' in balance['total']:
                self.current_balance = float(balance['total']['USDT'])
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    async def calculate_atr_stop_loss(self, symbol: str, ohlcv: List, side: str, entry_price: float) -> float:
        """
        –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            ohlcv: –î–∞–Ω–Ω—ã–µ OHLCV
            side: 'long' –∏–ª–∏ 'short'
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            
        Returns:
            float: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        """
        try:
            if len(ohlcv) < 14:
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å—Ç–æ–ø-–ª–æ—Å—Å—É
                if side == 'long':
                    return entry_price * (1 - self.limits.stop_loss_pct / 100)
                else:
                    return entry_price * (1 + self.limits.stop_loss_pct / 100)
            
            # –†–∞—Å—á–µ—Ç ATR
            highs = np.array([candle[2] for candle in ohlcv])
            lows = np.array([candle[3] for candle in ohlcv])
            closes = np.array([candle[4] for candle in ohlcv])
            
            atr_values = []
            for i in range(1, len(ohlcv)):
                tr = max(
                    highs[i] - lows[i],
                    abs(highs[i] - closes[i-1]),
                    abs(lows[i] - closes[i-1])
                )
                atr_values.append(tr)
            
            atr = np.mean(atr_values) if atr_values else entry_price * 0.02
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            atr_stop_distance = atr * self.limits.atr_multiplier
            
            if side == 'long':
                return entry_price - atr_stop_distance
            else:
                return entry_price + atr_stop_distance
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è {symbol}: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å—Ç–æ–ø-–ª–æ—Å—Å—É
            if side == 'long':
                return entry_price * (1 - self.limits.stop_loss_pct / 100)
            else:
                return entry_price * (1 + self.limits.stop_loss_pct / 100)
    
    async def add_position(self, symbol: str, side: str, entry_price: float, quantity: float, 
                          current_price: float, ohlcv: List = None) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: 'long' –∏–ª–∏ 'short'
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            ohlcv: –î–∞–Ω–Ω—ã–µ OHLCV –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏
            if not await self.check_position_limit(symbol, entry_price, quantity):
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            if ohlcv:
                stop_loss_price = await self.calculate_atr_stop_loss(symbol, ohlcv, side, entry_price)
            else:
                # –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                if side == 'long':
                    stop_loss_price = entry_price * (1 - self.limits.stop_loss_pct / 100)
                else:
                    stop_loss_price = entry_price * (1 + self.limits.stop_loss_pct / 100)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
            position = PositionInfo(
                symbol=symbol,
                side=side,
                entry_price=entry_price,
                quantity=quantity,
                current_price=current_price,
                unrealized_pnl=0.0,
                unrealized_pnl_pct=0.0,
                stop_loss_price=stop_loss_price,
                trailing_stop_price=stop_loss_price,
                created_at=time.time()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º PnL
            await self.update_position_pnl(position)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.positions[symbol] = position
            
            self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {symbol} {side} @ {entry_price:.4f}, SL: {stop_loss_price:.4f}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False
    
    async def update_position_pnl(self, position: PositionInfo):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PnL –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if position.side == 'long':
                position.unrealized_pnl = (position.current_price - position.entry_price) * position.quantity
            else:
                position.unrealized_pnl = (position.entry_price - position.current_price) * position.quantity
            
            position.unrealized_pnl_pct = (position.unrealized_pnl / (position.entry_price * position.quantity)) * 100
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL –¥–ª—è {position.symbol}: {e}")
    
    async def check_position_limit(self, symbol: str, price: float, quantity: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –ø–∞—Ä—É
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            price: –¶–µ–Ω–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            position_value = price * quantity
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –ø–∞—Ä—É
            if position_value > self.current_balance * (self.limits.max_position_pct / 100):
                self.logger.warning(f"‚ö†Ô∏è {symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å: ${position_value:.2f}, –õ–∏–º–∏—Ç: ${self.current_balance * (self.limits.max_position_pct / 100):.2f}")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
            return False
    
    async def check_stop_losses(self) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å
        """
        triggered = []
        
        try:
            for symbol, position in self.positions.items():
                # –û–±–Ω–æ–≤–ª—è–µ–º PnL
                await self.update_position_pnl(position)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                stop_triggered = False
                
                if position.side == 'long':
                    if position.current_price <= position.stop_loss_price:
                        stop_triggered = True
                else:
                    if position.current_price >= position.stop_loss_price:
                        stop_triggered = True
                
                if stop_triggered:
                    triggered.append(symbol)
                    self.logger.warning(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {symbol}: {position.side} @ {position.current_price:.4f} <= {position.stop_loss_price:.4f}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if position.unrealized_pnl > 0:
                        self.winning_trades += 1
                    else:
                        self.losing_trades += 1
                    self.total_trades += 1
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤: {e}")
        
        return triggered
    
    async def update_trailing_stops(self, symbol: str, current_price: float):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        """
        try:
            if symbol not in self.positions:
                return
                
            position = self.positions[symbol]
            position.current_price = current_price
            
            # –û–±–Ω–æ–≤–ª—è–µ–º PnL
            await self.update_position_pnl(position)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
            if position.side == 'long':
                # –î–ª—è –ª–æ–Ω–≥–∞: –ø–æ–¥–Ω–∏–º–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã
                new_trailing_stop = current_price * (1 - self.limits.trailing_stop_pct / 100)
                if new_trailing_stop > position.trailing_stop_price:
                    position.trailing_stop_price = new_trailing_stop
                    position.stop_loss_price = new_trailing_stop
                    self.logger.info(f"üìà {symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_trailing_stop:.4f}")
            else:
                # –î–ª—è —à–æ—Ä—Ç–∞: –æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                new_trailing_stop = current_price * (1 + self.limits.trailing_stop_pct / 100)
                if new_trailing_stop < position.trailing_stop_price:
                    position.trailing_stop_price = new_trailing_stop
                    position.stop_loss_price = new_trailing_stop
                    self.logger.info(f"üìâ {symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_trailing_stop:.4f}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –¥–ª—è {symbol}: {e}")
    
    async def remove_position(self, symbol: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol in self.positions:
                position = self.positions[symbol]
                self.logger.info(f"üóëÔ∏è –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞: {symbol} {position.side}, PnL: {position.unrealized_pnl:.2f} ({position.unrealized_pnl_pct:.2f}%)")
                del self.positions[symbol]
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def calculate_correlation(self, symbol1: str, symbol2: str, ohlcv1: List, ohlcv2: List) -> float:
        """
        –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–∞—Ä–∞–º–∏
        
        Args:
            symbol1: –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞
            symbol2: –í—Ç–æ—Ä–∞—è –ø–∞—Ä–∞
            ohlcv1: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
            ohlcv2: –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—ã
            
        Returns:
            float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (-1 –¥–æ 1)
        """
        try:
            if len(ohlcv1) < 20 or len(ohlcv2) < 20:
                return 0.0
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
            closes1 = np.array([candle[4] for candle in ohlcv1[-20:]])
            closes2 = np.array([candle[4] for candle in ohlcv2[-20:]])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            returns1 = np.diff(closes1) / closes1[:-1]
            returns2 = np.diff(closes2) / closes2[:-1]
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            correlation = np.corrcoef(returns1, returns2)[0, 1]
            
            return correlation if not np.isnan(correlation) else 0.0
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ {symbol1}-{symbol2}: {e}")
            return 0.0
    
    async def check_correlation_limits(self, new_symbol: str, existing_symbols: List[str], 
                                     ohlcv_data: Dict[str, List]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        
        Args:
            new_symbol: –ù–æ–≤–∞—è –ø–∞—Ä–∞
            existing_symbols: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã
            ohlcv_data: –î–∞–Ω–Ω—ã–µ OHLCV –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
            
        Returns:
            bool: True –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã
        """
        try:
            if new_symbol not in ohlcv_data:
                return True
                
            new_ohlcv = ohlcv_data[new_symbol]
            
            for existing_symbol in existing_symbols:
                if existing_symbol in ohlcv_data:
                    correlation = await self.calculate_correlation(
                        new_symbol, existing_symbol, 
                        new_ohlcv, ohlcv_data[existing_symbol]
                    )
                    
                    if abs(correlation) > self.limits.max_correlation:
                        self.logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {new_symbol}-{existing_symbol}: {correlation:.3f} > {self.limits.max_correlation}")
                        return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è {new_symbol}: {e}")
            return True
    
    def get_risk_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∏—Å–∫–∞–º"""
        try:
            total_unrealized_pnl = sum(pos.unrealized_pnl for pos in self.positions.values())
            total_unrealized_pnl_pct = (total_unrealized_pnl / self.initial_balance * 100) if self.initial_balance > 0 else 0
            
            win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
            
            return {
                'global_stop_loss_triggered': self.global_stop_loss_triggered,
                'current_drawdown': self.current_drawdown,
                'max_drawdown': self.max_drawdown,
                'total_positions': len(self.positions),
                'total_unrealized_pnl': total_unrealized_pnl,
                'total_unrealized_pnl_pct': total_unrealized_pnl_pct,
                'total_trades': self.total_trades,
                'winning_trades': self.winning_trades,
                'losing_trades': self.losing_trades,
                'win_rate': win_rate,
                'current_mode': self.current_mode,
                'mode_config': self.mode_config,
                'positions': {
                    symbol: {
                        'side': pos.side,
                        'entry_price': pos.entry_price,
                        'current_price': pos.current_price,
                        'unrealized_pnl': pos.unrealized_pnl,
                        'unrealized_pnl_pct': pos.unrealized_pnl_pct,
                        'stop_loss_price': pos.stop_loss_price,
                        'trailing_stop_price': pos.trailing_stop_price
                    }
                    for symbol, pos in self.positions.items()
                }
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}")
            return {}

    def set_risk_mode(self, mode: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–∫–∞"""
        if mode in self.risk_modes:
            self.current_mode = mode
            self.mode_config = self.risk_modes[mode]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
            self.limits.max_drawdown_pct = self.mode_config['max_drawdown_pct']
            self.limits.stop_loss_pct = self.mode_config['stop_loss_pct']
            self.limits.max_position_pct = self.mode_config['max_position_pct']
            self.limits.max_correlation = self.mode_config['max_correlation']
            
            self.logger.info(f"üîÑ –†–µ–∂–∏–º —Ä–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}")
        else:
            self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∏—Å–∫–∞: {mode}")

    def get_recommended_mode(self, total_capital: float) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        if total_capital < 800:
            return 'conservative'
        elif total_capital < 2000:
            return 'automatic'
        else:
            return 'aggressive'

    def get_adaptive_pair_count(self, total_capital: float) -> int:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞"""
        if total_capital < 400:
            return 1
        elif total_capital < 800:
            return 1
        elif total_capital < 1500:
            return 2
        elif total_capital < 3000:
            return 3
        else:
            return 4

    def get_min_capital_per_pair(self, total_capital: float) -> float:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –Ω–∞ –ø–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞"""
        if total_capital < 800:
            return 400.0
        else:
            return 200.0

    def check_volatility_range(self, volatility: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        vol_min, vol_max = self.mode_config['volatility_range']
        return vol_min <= volatility <= vol_max

    def check_correlation_limit(self, correlation: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
        return abs(correlation) <= self.mode_config['max_correlation']

    def get_mode_limits(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return self.mode_config.copy()

    def should_expand_pairs(self, current_pairs: int, total_capital: float, 
                          profit_threshold: float = 200.0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã–ª—å
            if profit_threshold > 0:
                total_profit = sum(pos.unrealized_pnl for pos in self.positions.values())
                if total_profit < profit_threshold:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
            recommended_pairs = self.get_adaptive_pair_count(total_capital)
            if current_pairs >= recommended_pairs:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–∂–∏–º–∞
            if current_pairs >= self.mode_config['max_pairs']:
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–∞—Ä: {e}")
            return False

    def get_expansion_recommendation(self, total_capital: float, 
                                   current_pairs: int) -> Dict[str, Any]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            recommended_pairs = self.get_adaptive_pair_count(total_capital)
            min_capital = self.get_min_capital_per_pair(total_capital)
            
            can_expand = (
                current_pairs < recommended_pairs and
                current_pairs < self.mode_config['max_pairs'] and
                total_capital >= min_capital * (current_pairs + 1)
            )
            
            return {
                'can_expand': can_expand,
                'recommended_pairs': recommended_pairs,
                'current_pairs': current_pairs,
                'min_capital_per_pair': min_capital,
                'required_capital': min_capital * (current_pairs + 1),
                'available_capital': total_capital
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
            return {'can_expand': False}
