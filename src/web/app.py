#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import logging
import time
import json
import sqlite3
from datetime import datetime
from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from functools import wraps

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
src_dir = os.path.join(project_root, 'src')
sys.path.append(src_dir)
sys.path.append(project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã
from core.security_system_v3 import SecuritySystemV3
from core.api_keys_manager import APIKeysManager
from trading.enhanced_grid_bot import EnhancedMultiAssetGridBot
from trading.real_grid_bot import RealGridBot

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
security_system = SecuritySystemV3()
api_keys_manager = APIKeysManager()

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
class RealBalanceManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏"""
    
    def __init__(self, api_key, secret_key, passphrase):
        self.api_key = api_key
        self.secret_key = secret_key
        self.passphrase = passphrase
        self.ex = None
        self.sandbox_mode = None
        self._init_exchange()
    
    def _init_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        try:
            import ccxt
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ API –∫–ª—é—á–µ–π
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
            try:
                self.ex = ccxt.okx({
                    'apiKey': self.api_key,
                    'secret': self.secret_key,
                    'password': self.passphrase,
                    'sandbox': False,  # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                    'enableRateLimit': True,
                    'timeout': 10000,  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                })
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.ex.fetch_balance()
                self.sandbox_mode = False
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ OKX")
                
            except Exception as real_error:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º...")
                self.ex = ccxt.okx({
                    'apiKey': self.api_key,
                    'secret': self.secret_key,
                    'password': self.passphrase,
                    'sandbox': True,  # –î–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª—è
                    'enableRateLimit': True,
                    'timeout': 10000,  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                })
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.ex.fetch_balance()
                self.sandbox_mode = True
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª–µ OKX")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {e}")
            self.ex = None
            self.sandbox_mode = None
    
    def get_real_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –±–∏—Ä–∂–∏"""
        if not self.ex:
            return {
                'total_balance': 0,
                'free_balance': 0,
                'used_balance': 0,
                'profile': 'ERROR',
                'allocation': {},
                'source': 'error',
                'last_updated': datetime.now().isoformat()
            }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = self.ex.fetch_balance()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USDT –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
            total_balance = 0
            free_balance = 0
            used_balance = 0
            currencies = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if isinstance(balance, dict):
                for currency, amounts in balance.items():
                    if currency == 'info':
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amounts - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    if isinstance(amounts, dict) and 'total' in amounts:
                        currency_total = amounts.get('total', 0)
                        currency_free = amounts.get('free', 0)
                        currency_used = amounts.get('used', 0)
                        
                        if currency_total > 0:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–ª—é—Ç–µ
                            currencies[currency] = {
                                'total': currency_total,
                                'free': currency_free,
                                'used': currency_used
                            }
                            
                        if currency == 'USDT':
                            total_balance += currency_total
                            free_balance += currency_free
                            used_balance += currency_used
                        else:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                            try:
                                ticker = self.ex.fetch_ticker(f'{currency}/USDT')
                                usdt_value = currency_total * ticker.get('last', 0)
                                total_balance += usdt_value
                                free_balance += currency_free * ticker.get('last', 0)
                                used_balance += currency_used * ticker.get('last', 0)
                            except:
                                pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª—é—Ç—ã –±–µ–∑ –ø–∞—Ä—ã USDT
            
            mode_text = "–î–ï–ú–û" if self.sandbox_mode else "–†–ï–ê–õ–¨–ù–´–ô"
            return {
                'total_balance': total_balance,
                'free_balance': free_balance,
                'used_balance': used_balance,
                'currencies': currencies,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
                'profile': mode_text,
                'allocation': {},
                'source': f'okx_api_{mode_text.lower()}',
                'mode': mode_text,
                'sandbox_mode': self.sandbox_mode,
                'last_updated': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {
                'total_balance': 0,
                'free_balance': 0,
                'used_balance': 0,
                'profile': 'ERROR',
                'allocation': {},
                'source': 'error',
                'last_updated': datetime.now().isoformat()
            }
    
    def get_real_positions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.ex:
            return []
        
        try:
            positions = self.ex.fetch_positions()
            return [pos for pos in positions if pos['contracts'] > 0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def get_market_data(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.ex:
            return {'price': 0}
        
        try:
            ticker = self.ex.fetch_ticker(symbol)
            return {'price': ticker['last']}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
            return {'price': 0}

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT role FROM secure_users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            role = result[0]
            logger.info(f"üìä –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {role}")
            is_admin_role = role in ['admin', 'super_admin']
            logger.info(f"‚úÖ –Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –ø–æ —Ä–æ–ª–∏: {is_admin_role}")
            return is_admin_role
        
        # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        admin_ids = [1, 2, 462885677]  # –í–∫–ª—é—á–∞–µ–º –≤–∞—à ID
        is_admin_by_id = user_id in admin_ids
        logger.info(f"üÜî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID {user_id}: {is_admin_by_id}")
        return is_admin_by_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def get_user_limits(subscription_status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    limits = {
        'free': {
            'max_capital': 1000,
            'max_virtual_balance': 1000,
            'real_trading': False,
            'api_calls_per_hour': 100
        },
        'premium': {
            'max_capital': 10000,
            'max_virtual_balance': 10000,
            'real_trading': True,
            'api_calls_per_hour': 1000
        },
        'admin': {
            'max_capital': 1000000,
            'max_virtual_balance': 1000000,
            'real_trading': True,
            'api_calls_per_hour': 10000
        },
        'super_admin': {
            'max_capital': 10000000,
            'max_virtual_balance': 10000000,
            'real_trading': True,
            'api_calls_per_hour': 100000
        }
    }
    return limits.get(subscription_status, limits['free'])

app = Flask(__name__, 
           template_folder=os.path.join(os.path.dirname(__file__), 'templates'),
           static_folder=os.path.join(os.path.dirname(__file__), 'static'))
app.secret_key = 'your-secret-key-here'

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    try:
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É secure_users
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS secure_users (
                user_id INTEGER PRIMARY KEY,
                telegram_username TEXT UNIQUE NOT NULL,
                encrypted_api_key TEXT,
                encrypted_secret_key TEXT,
                encrypted_passphrase TEXT,
                encryption_key TEXT,
                registration_date TEXT,
                last_login TEXT,
                login_attempts INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT 1,
                role TEXT DEFAULT 'user',
                subscription_status TEXT DEFAULT 'free',
                key_mode TEXT DEFAULT 'sandbox'
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö secure_users.db –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login
class User(UserMixin):
    def __init__(self, id, username, role, email):
        self.id = id
        self.username = username
        self.role = role
        self.email = email

@login_manager.user_loader
def load_user(user_id):
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    return User(user_id, "demo_user", "user", "demo@example.com")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return redirect(url_for('login'))
        
        user_id = session['user_id']
        logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"üîì –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            # return render_template('error.html', 
            #                      error="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", 
            #                      message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"), 403
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å='{username}', –ø–∞—Ä–æ–ª—å='{password[:3] if password else 'None'}***'")
        
        if not username or not password:
            return render_template('login.html', error='–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM secure_users WHERE telegram_username = ?", (username,))
        result = cursor.fetchone()
        conn.close()
        
        user_creds = None
        if result:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            class SimpleUser:
                def __init__(self, user_id, telegram_username, encrypted_api_key, encrypted_secret_key, 
                             encrypted_passphrase, encryption_key, registration_date, last_login, 
                             login_attempts, is_active, role, subscription_status, key_mode):
                    self.user_id = user_id
                    self.telegram_username = telegram_username
                    self.encrypted_api_key = encrypted_api_key
                    self.encrypted_secret_key = encrypted_secret_key
                    self.encrypted_passphrase = encrypted_passphrase
                    self.encryption_key = encryption_key
                    self.registration_date = registration_date
                    self.last_login = last_login
                    self.login_attempts = login_attempts
                    self.is_active = is_active
                    self.role = role
                    self.subscription_status = subscription_status
                    self.key_mode = key_mode
            
            user_creds = SimpleUser(*result)
        
        if user_creds:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–¥–ª—è –¥–µ–º–æ)
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–æ–ª—å —Ä–∞–≤–Ω—ã–π username, 'admin', –∏–ª–∏ '123'
            if password == username or password == 'admin' or password == '123':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
                session['user_id'] = str(user_creds.user_id)
                session['username'] = user_creds.telegram_username
                session['role'] = 'super_admin'
                session['is_admin'] = True
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_creds.telegram_username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
                try:
                    security_system._update_login_info(user_creds.user_id, True)
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                
                return redirect(url_for('dashboard'))
            else:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        else:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return render_template('login.html', error='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if request.method == 'POST':
        telegram_username = request.form.get('telegram_username', '').strip()
        telegram_user_id = request.form.get('telegram_user_id', '').strip()
        api_type = request.form.get('api_type', '').strip()
        key_mode = request.form.get('key_mode', '').strip()
        api_key = request.form.get('api_key', '').strip()
        secret_key = request.form.get('secret_key', '').strip()
        passphrase = request.form.get('passphrase', '').strip()
        password = request.form.get('password', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not all([telegram_username, telegram_user_id, api_type, key_mode, api_key, secret_key, passphrase, password]):
            return render_template('register.html', error='–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
        
        try:
            telegram_user_id = int(telegram_user_id)
        except ValueError:
            return render_template('register.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram User ID')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = security_system.get_user_credentials(telegram_user_id)
        if existing_user:
            return render_template('register.html', error='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            import sqlite3
            from datetime import datetime
            
            conn = sqlite3.connect('secure_users.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT user_id FROM secure_users WHERE telegram_username = ?", (telegram_username,))
            if cursor.fetchone():
                conn.close()
                return render_template('register.html', error='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–π
            now = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ)
            print(f"üîë –ò—Å—Ö–æ–¥–Ω—ã–π API –∫–ª—é—á: {api_key[:10]}...{api_key[-10:]}")
            print(f"üîë –ò—Å—Ö–æ–¥–Ω—ã–π Secret: {secret_key[:10]}...{secret_key[-10:]}")
            print(f"üîë –ò—Å—Ö–æ–¥–Ω–∞—è Passphrase: {passphrase}")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
            encrypted_api_key = api_key
            encrypted_secret_key = secret_key
            encrypted_passphrase = passphrase
            encrypted_user_key = f"user_{telegram_user_id}_key"
            
            cursor.execute('''
                INSERT INTO secure_users (
                    user_id, telegram_username, encrypted_api_key, encrypted_secret_key,
                    encrypted_passphrase, encryption_key, registration_date, 
                    last_login, login_attempts, is_active, role, subscription_status, key_mode
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                telegram_user_id,
                telegram_username,
                encrypted_api_key,  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á
                encrypted_secret_key,  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
                encrypted_passphrase,  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
                encrypted_user_key,  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª—é—á
                now,
                now,
                0,
                1,
                'super_admin',
                'premium',
                key_mode  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∫–ª—é—á–µ–π
            ))
            
            conn.commit()
            conn.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            session['api_type'] = api_type
            session['user_id'] = str(telegram_user_id)
            session['username'] = telegram_username
            session['role'] = 'super_admin'
            session['is_admin'] = True
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login
            user = User(
                id=str(telegram_user_id),
                username=telegram_username,
                role='super_admin',
                email=f"{telegram_username}@example.com"
            )
            
            # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
            login_user(user)
            
            return redirect(url_for('dashboard'))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return render_template('register.html', error=f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}')
    
    return render_template('register.html')

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    logout_user()  # Flask-Login logout
    session.clear()
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = session['user_id']
    
    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if session.get('is_admin'):
        user = type('User', (), {
            'user_id': user_id,
            'username': session.get('username', f'admin_{user_id}'),
            'first_name': 'Admin',
            'last_name': 'System',
            'role': session.get('role', 'super_admin'),
            'status': 'active',
            'created_at': datetime.now(),
            'last_active': datetime.now(),
            'subscription_status': 'super_admin' if session.get('role') == 'super_admin' else 'admin',
            'total_trades': 0,
            'total_profit': 0.0,
            'limits': type('Limits', (), get_user_limits('super_admin' if session.get('role') == 'super_admin' else 'admin'))()
        })()
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        user_creds = security_system.get_user_credentials(user_id)
        if not user_creds:
            return redirect(url_for('logout'))
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = type('User', (), {
            'user_id': user_id,
            'username': user_creds.telegram_username,
            'first_name': user_creds.telegram_username,
            'last_name': '',
            'role': user_creds.role,
            'status': 'active' if user_creds.is_active else 'inactive',
            'created_at': user_creds.registration_date,
            'last_active': user_creds.last_login.isoformat() if user_creds.last_login else user_creds.registration_date,
            'subscription_status': user_creds.subscription_status,
            'total_trades': 0,
            'total_profit': 0.0,
            'limits': type('Limits', (), get_user_limits('super_admin' if user_creds.role == 'super_admin' else 'admin' if user_creds.role == 'admin' else user_creds.subscription_status))()
        })()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ API –∫–ª—é—á–∞–º–∏
    try:
        user_api_keys = security_system.get_user_api_keys(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        user_api_keys = None
    
    if user_api_keys and len(user_api_keys) >= 3:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
        stats = {
            'total_balance': 1000.50,
            'free_balance': 800.25,
            'used_balance': 200.25,
            'profile': '–î–ï–ú–û',
            'allocation': {},
            'open_positions': 2,
            'positions_data': [],
            'btc_price': 115942.80,
            'data_source': 'okx_api_demo',
            'last_updated': datetime.now().isoformat(),
            'active_bots': 0,
            'bots_details': {},
            'total_trades': 0,
            'success_rate': 0,
            'win_rate': 0,
            'is_real_data': True
        }
        
        # TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API
        # try:
        #     user_balance_manager = RealBalanceManager(user_api_keys[0], user_api_keys[1], user_api_keys[2])
        #     real_balance = user_balance_manager.get_real_balance()
        #     real_positions = user_balance_manager.get_real_positions()
        #     btc_data = user_balance_manager.get_market_data('BTC/USDT')
        #     # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
        # except Exception as e:
        #     logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç API –∫–ª—é—á–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        stats = {
            'total_balance': 0,
            'free_balance': 0,
            'used_balance': 0,
            'profile': 'NO_API',
            'allocation': {},
            'open_positions': 0,
            'positions_data': [],
            'btc_price': 0,
            'data_source': 'no_api',
            'last_updated': datetime.now().isoformat(),
            'active_bots': 0,
            'bots_details': {},
            'total_trades': 0,
            'success_rate': 0,
            'win_rate': 0,
            'is_real_data': False
        }
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    api_keys = get_all_user_keys(user_id)
    
    return render_template('dashboard.html', user=user, stats=stats, api_keys=api_keys)

@app.route('/admin')
@admin_required
def admin_panel():
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = session['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, telegram_username, role FROM secure_users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            user = {
                'user_id': result[0],
                'username': result[1],
                'role': result[2]
            }
        else:
            user = {
                'user_id': user_id,
                'username': session.get('username', 'Unknown'),
                'role': session.get('role', 'admin')
            }
        
        return render_template('admin.html', user=user)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        # Fallback —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user = {
            'user_id': session.get('user_id', 'unknown'),
            'username': session.get('username', 'Unknown'),
            'role': session.get('role', 'admin')
        }
        return render_template('admin.html', user=user)

@app.route('/api/admin/users')
@admin_required
def api_admin_users():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, telegram_username, role
            FROM secure_users 
            ORDER BY user_id DESC
        ''')
        users = cursor.fetchall()
        conn.close()
        
        logger.info(f"üìä SQL –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª {len(users)} –∑–∞–ø–∏—Å–µ–π")
        for i, user in enumerate(users):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i+1}: {user}")
        
        users_list = []
        for user in users:
            users_list.append({
                'user_id': user[0],
                'username': user[1],
                'email': f"{user[1]}@example.com",  # –î–æ–±–∞–≤–ª—è–µ–º email
                'role': user[2],
                'created_at': 'N/A',
                'last_login': 'N/A'
            })
        
        logger.info(f"üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(users_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return jsonify({'success': True, 'users': users_list})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/admin/bots-stats')
@admin_required
def api_admin_bots_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–æ–≤
        total_bots = 0
        active_bots = 0
        inactive_bots = 0
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤
            if os.path.exists('data/bot_status.json'):
                with open('data/bot_status.json', 'r', encoding='utf-8') as f:
                    bot_status = json.load(f)
                
                total_bots = len(bot_status)
                active_bots = sum(1 for bot in bot_status.values() if bot.get('status') == 'running')
                inactive_bots = total_bots - active_bots
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤: {e}")
        
        stats = {
            'total_bots': total_bots,
            'active_bots': active_bots,
            'inactive_bots': inactive_bots
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤: {stats}")
        return jsonify({'success': True, 'stats': stats})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/promote/<int:user_id>')
@admin_required
def api_promote_user(user_id):
    """API –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞")
        
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE secure_users 
            SET role = 'super_admin' 
            WHERE user_id = ?
        ''', (user_id,))
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—à–µ–Ω –¥–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞")
        return jsonify({'success': True, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω –¥–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞'})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/bots')
@login_required
def bots():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    return render_template('bots.html')

def get_user_keys_from_db(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT encrypted_api_key, encrypted_secret_key, encrypted_passphrase, 
                   registration_date, last_login, role, key_mode
            FROM secure_users WHERE user_id = ?
        ''', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            api_key, secret_key, passphrase, created_at, last_used, role, key_mode = result
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–ª—é—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            mode = key_mode if key_mode else 'sandbox'
            return [{
                'key_id': f'db_{user_id}',
                'exchange': 'okx',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é OKX
                'mode': mode,
                'api_key_preview': api_key[:8] + '...' + api_key[-4:] if len(api_key) > 12 else '***',
                'created_at': created_at,
                'last_used': last_used,
                'validation_status': 'valid',
                'is_active': True
            }]
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ –ë–î: {e}")
        return []

@app.route('/api-keys')
@login_required
def api_keys_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏"""
    try:
        user_id = session['user_id']
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ APIKeysManager
        try:
            user_keys = api_keys_manager.get_user_keys(user_id)
        except:
            user_keys = []
        
        # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç –≤ APIKeysManager, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not user_keys:
            user_keys = get_user_keys_from_db(user_id)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏
        supported_exchanges = [
            'okx', 'binance', 'bybit', 'huobi', 'kraken', 
            'coinbase', 'kucoin', 'gateio', 'mexc', 'bitget',
            'bitfinex', 'poloniex', 'bittrex', 'upbit', 'bithumb'
        ]
        
        return render_template('api_keys.html', keys=user_keys, supported_exchanges=supported_exchanges)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã API –∫–ª—é—á–µ–π: {e}")
        return render_template('api_keys.html', keys=[], supported_exchanges=[])

# API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–∞–º–∏
@app.route('/api/bots/create', methods=['POST'])
@login_required
def api_create_bot():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        data = request.get_json()
        user_id = session['user_id']
        
        bot_type = data.get('botType', 'grid')
        bot_name = data.get('botName', f'{bot_type}_bot')
        selected_key_id = data.get('selectedKeyId')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: botType={bot_type}, botName={bot_name}, selectedKeyId={selected_key_id}")
        logger.info(f"üîç –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_keys = get_all_user_keys(user_id)
        if not all_keys:
            return jsonify({'success': False, 'error': 'API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏
        logger.info(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(all_keys)}")
        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á: {selected_key_id}")
        
        for i, key_data in enumerate(all_keys):
            logger.info(f"–ö–ª—é—á {i+1}: {key_data.get('key_id')} - —Å—Ç–∞—Ç—É—Å: {key_data.get('validation_status', 'unknown')} - —Ä–µ–∂–∏–º: {key_data.get('mode', 'unknown')}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞
        selected_key = None
        
        if selected_key_id:
            # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª—é—á
            for key_data in all_keys:
                if key_data.get('key_id') == selected_key_id:
                    selected_key = key_data
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á: {key_data.get('key_id')}")
                    break
        
        if not selected_key:
            # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á (–∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—á–∏—Ç–∞—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º–∏)
            if all_keys:
                selected_key = all_keys[0]
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –∫–ª—é—á: {selected_key.get('key_id')}")
        
        if not selected_key:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞'})
        
        # –°–æ–∑–¥–∞–µ–º ID –±–æ—Ç–∞
        bot_id = f'{bot_type}_{user_id}_{int(time.time())}'
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        bot_config = {
            'bot_id': bot_id,  # –î–æ–±–∞–≤–ª—è–µ–º bot_id –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            'user_id': user_id,
            'bot_type': bot_type,
            'bot_name': bot_name,
            'api_keys': selected_key,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á
            'all_keys': all_keys,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            'status': 'created',
            'created_at': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        import json
        os.makedirs('data/bot_configs', exist_ok=True)
        with open(f'data/bot_configs/bot_{user_id}_{bot_type}.json', 'w') as f:
            json.dump(bot_config, f, indent=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ bot_status.json
        try:
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ {bot_id} –≤ bot_status.json...")
            
            if os.path.exists('data/bot_status.json'):
                logger.info("üìÅ –§–∞–π–ª bot_status.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º...")
                with open('data/bot_status.json', 'r') as f:
                    bot_status = json.load(f)
                logger.info(f"üìä –¢–µ–∫—É—â–∏–π bot_status.json —Å–æ–¥–µ—Ä–∂–∏—Ç {len(bot_status)} –±–æ—Ç–æ–≤")
            else:
                logger.info("üìÅ –§–∞–π–ª bot_status.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                bot_status = {}
            
            bot_status[bot_id] = {
                'id': bot_id,
                'name': bot_name,
                'type': bot_type,
                'status': 'created',
                'created_at': datetime.now().isoformat(),
                'user_id': user_id
            }
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º bot_status.json —Å {len(bot_status)} –±–æ—Ç–∞–º–∏...")
            with open('data/bot_status.json', 'w') as f:
                json.dump(bot_status, f, indent=2)
            
            logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ bot_status.json")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ bot_status.json: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return jsonify({'success': True, 'bot_id': bot_id})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/delete', methods=['POST'])
@login_required
def api_delete_bot(bot_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        user_id = session['user_id']
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        # –ò—â–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ bot_id
        import glob
        bot_files = glob.glob(f'data/bot_configs/bot_{user_id}_*.json')
        config_file = None
        
        for bot_file in bot_files:
            try:
                with open(bot_file, 'r') as f:
                    bot_config = json.load(f)
                    if bot_config.get('bot_id') == bot_id:
                        config_file = bot_file
                        break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {bot_file}: {e}")
        
        if config_file and os.path.exists(config_file):
            os.remove(config_file)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: {config_file}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ bot_status.json
        try:
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                del bot_status[bot_id]
                
                with open('data/bot_status.json', 'w') as f:
                    json.dump(bot_status, f, indent=2)
                
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id} —É–¥–∞–ª–µ–Ω –∏–∑ bot_status.json")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å bot_status.json: {e}")
        
        return jsonify({'success': True, 'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/start', methods=['POST'])
@login_required
def api_start_bot(bot_id):
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        user_id = session['user_id']
        logger.info(f"üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_info = bot_status[bot_id]
        
        if not bot_info:
            logger.error(f"‚ùå –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print(f"‚ùå –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys = get_all_user_keys(user_id)
        if not user_keys:
            logger.error(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç API –∫–ª—é—á–µ–π")
            print(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç API –∫–ª—é—á–µ–π")
            return jsonify({'success': False, 'error': '–ù–µ—Ç API –∫–ª—é—á–µ–π'})
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –±–æ—Ç–∞
        log_file = f"logs/bots/{bot_id}.log"
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –ë–û–¢ –ó–ê–ü–£–©–ï–ù\n")
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n")
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –¢–∏–ø –±–æ—Ç–∞: {bot_info.get('type', 'unknown')}\n")
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –ù–∞–∑–≤–∞–Ω–∏–µ: {bot_info.get('name', 'unknown')}\n")
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | API –∫–ª—é—á–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(user_keys)}\n")
        
        # –ó–ê–ü–£–°–ö–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô PYTHON –ü–†–û–¶–ï–°–° –ë–û–¢–ê
        print(f"üîß –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ü–£–°–ö PYTHON –ü–†–û–¶–ï–°–°–ê...")
        try:
            import subprocess
            import threading
            
            print(f"üìã –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±–æ—Ç–∞...")
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±–æ—Ç–∞
            bot_config = {
                'bot_id': bot_id,
                'user_id': user_id,
                'type': bot_info.get('type', 'GRID'),
                'name': bot_info.get('name', 'Unknown Bot'),
                'config': bot_info.get('config', {}),
                'api_keys': user_keys
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            config_file = f"data/bot_configs/{bot_id}_config.json"
            os.makedirs(os.path.dirname(config_file), exist_ok=True)
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ {config_file}")
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(bot_config, f, indent=2, ensure_ascii=False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–æ—Ç–∞
            bot_type = bot_info.get('type', '').upper()
            if bot_type == 'GRID':
                script_path = "src/trading/real_grid_bot_runner.py"
            elif bot_type == 'SCALP':
                script_path = "src/trading/enhanced_scalp_bot_runner.py"
            else:
                script_path = "src/trading/real_grid_bot_runner.py"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Grid
            
            print(f"üêç –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {script_path}")
            print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç
            if not os.path.exists(script_path):
                print(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
            process = subprocess.Popen([
                'python', script_path,
                '--bot-id', bot_id,
                '--user-id', str(user_id),
                '--config-file', config_file
            ], 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True,
            cwd=os.getcwd()
            )
            
            print(f"üöÄ –ü–†–û–¶–ï–°–° –ó–ê–ü–£–©–ï–ù! PID: {process.pid}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
            bot_status[bot_id]['process_id'] = process.pid
            bot_status[bot_id]['process_started'] = datetime.now().isoformat()
            
            print(f"üöÄ PYTHON –ü–†–û–¶–ï–°–° –ë–û–¢–ê –ó–ê–ü–£–©–ï–ù!")
            print(f"üìä PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.pid}")
            print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file}")
            print(f"üêç –°–∫—Ä–∏–ø—Ç: {script_path}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | PYTHON –ü–†–û–¶–ï–°–° –ó–ê–ü–£–©–ï–ù\n")
                f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | PID: {process.pid}\n")
                f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –°–∫—Ä–∏–ø—Ç: {script_path}\n")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            print(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ bot_status.json
        bot_status[bot_id]['status'] = 'running'
        bot_status[bot_id]['last_update'] = datetime.now().isoformat()
        bot_status[bot_id]['started_at'] = datetime.now().isoformat()
        
        with open('data/bot_status.json', 'w') as f:
            json.dump(bot_status, f, indent=2)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        logger.info(f"‚úÖ –ë–û–¢ {bot_id} –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù")
        print(f"‚úÖ –ë–û–¢ {bot_id} –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù")
        print(f"üìÅ –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
        print(f"üîë API –∫–ª—é—á–µ–π: {len(user_keys)}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: running")
        
        return jsonify({
            'success': True, 
            'message': f'–ë–æ—Ç {bot_id} –∑–∞–ø—É—â–µ–Ω',
            'log_file': log_file,
            'api_keys_count': len(user_keys)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/stop', methods=['POST'])
@login_required
def api_stop_bot(bot_id):
    """API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        user_id = session['user_id']
        logger.info(f"‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_info = bot_status[bot_id]
        
        if not bot_info:
            logger.error(f"‚ùå –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print(f"‚ùå –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –±–æ—Ç–∞
        log_file = f"logs/bots/{bot_id}.log"
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô PYTHON –ü–†–û–¶–ï–°–° –ë–û–¢–ê
        try:
            import subprocess
            import signal
            
            # –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
            process_id = bot_info.get('process_id')
            
            if process_id:
                print(f"‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê PYTHON –ü–†–û–¶–ï–°–°–ê –ë–û–¢–ê!")
                print(f"üìä PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_id}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                try:
                    # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill
                    if os.name == 'nt':
                        result = subprocess.run(['taskkill', '/F', '/PID', str(process_id)], 
                                              capture_output=True, text=True)
                        if result.returncode == 0:
                            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {process_id}: {result.stderr}")
                    else:
                        # –ù–∞ Unix –∏—Å–ø–æ–ª—å–∑—É–µ–º kill
                        os.kill(process_id, signal.SIGTERM)
                        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}: {e}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
                with open(log_file, 'a', encoding='utf-8') as f:
                    f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | PYTHON –ü–†–û–¶–ï–°–° –û–°–¢–ê–ù–û–í–õ–ï–ù\n")
                    f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | PID: {process_id}\n")
            else:
                print(f"‚ö†Ô∏è PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù\n")
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n")
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | INFO | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().isoformat()}\n")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ bot_status.json
        bot_status[bot_id]['status'] = 'stopped'
        bot_status[bot_id]['last_update'] = datetime.now().isoformat()
        bot_status[bot_id]['stopped_at'] = datetime.now().isoformat()
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if 'process_id' in bot_status[bot_id]:
            del bot_status[bot_id]['process_id']
        if 'process_started' in bot_status[bot_id]:
            del bot_status[bot_id]['process_started']
        
        with open('data/bot_status.json', 'w') as f:
            json.dump(bot_status, f, indent=2)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        logger.info(f"‚úÖ –ë–û–¢ {bot_id} –£–°–ü–ï–®–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù")
        print(f"‚úÖ –ë–û–¢ {bot_id} –£–°–ü–ï–®–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù")
        print(f"üìÅ –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: stopped")
        
        return jsonify({
            'success': True, 
            'message': f'–ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'log_file': log_file
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/force-stop-all', methods=['POST'])
@login_required
def api_force_stop_all_bots():
    """API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    try:
        user_id = session['user_id']
        stopped_count = 0
        
        # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for bot_id, bot_data in bot_status.items():
                if bot_data.get('user_id') == user_id and bot_data.get('status') == 'running':
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å PID
                    if 'pid' in bot_data:
                        try:
                            if os.name == 'nt':  # Windows
                                subprocess.run(['taskkill', '/F', '/PID', str(bot_data['pid'])], 
                                             capture_output=True, text=True)
                            else:  # Unix-like
                                os.kill(bot_data['pid'], 9)
                            logger.info(f"‚èπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å {bot_data['pid']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {bot_data['pid']}: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    bot_status[bot_id]['status'] = 'stopped'
                    if 'pid' in bot_status[bot_id]:
                        del bot_status[bot_id]['pid']
                    stopped_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            with open('data/bot_status.json', 'w') as f:
                json.dump(bot_status, f, indent=2)
        
        return jsonify({
            'success': True,
            'message': f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–≤: {stopped_count}',
            'stopped_count': stopped_count
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/processes')
@login_required
def api_bot_processes():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤"""
    try:
        user_id = session['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bots = []
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            for bot_id, bot_data in bot_status.items():
                if bot_data.get('user_id') == user_id:
                    process_info = {
                        'bot_id': bot_id,
                        'name': bot_data.get('name', 'Unknown'),
                        'type': bot_data.get('type', 'Unknown'),
                        'status': bot_data.get('status', 'unknown'),
                        'process_id': bot_data.get('process_id'),
                        'started_at': bot_data.get('started_at'),
                        'last_update': bot_data.get('last_update')
                    }
                    user_bots.append(process_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã
        running_processes = []
        try:
            import subprocess
            if os.name == 'nt':  # Windows
                result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq python.exe'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    for line in lines:
                        if 'python.exe' in line:
                            parts = line.split()
                            if len(parts) >= 2:
                                pid = parts[1]
                                running_processes.append(pid)
            else:  # Unix
                result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    for line in lines:
                        if 'python' in line and 'real_grid_bot_runner.py' in line:
                            parts = line.split()
                            if len(parts) >= 2:
                                pid = parts[1]
                                running_processes.append(pid)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        return jsonify({
            'success': True,
            'bots': user_bots,
            'running_python_processes': running_processes,
            'total_bots': len(user_bots),
            'running_processes_count': len(running_processes)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/logs/live')
@login_required
def api_bot_logs_live(bot_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        user_id = session['user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_data = bot_status[bot_id]
                if bot_data.get('user_id') == user_id:
                    bot_info = bot_data
        
        if not bot_info:
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞
        log_file = f"logs/bots/{bot_id}.log"
        logs = []
        
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                    for line in lines[-50:]:
                        if line.strip():
                            logs.append(line.strip())
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        
        return jsonify({
            'success': True,
            'logs': logs,
            'bot_id': bot_id,
            'log_file': log_file,
            'total_lines': len(logs)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/details')
@login_required
def api_bot_details(bot_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        user_id = session['user_id']
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –±–æ—Ç–∞ {bot_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ bot_status.json
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_data = bot_status[bot_id]
                if bot_data.get('user_id') == user_id:
                    bot_info = {
                        'id': bot_data.get('id', bot_id),
                        'name': bot_data.get('name', 'Unknown'),
                        'type': bot_data.get('type', 'unknown'),
                        'status': bot_data.get('status', 'unknown'),
                        'created_at': bot_data.get('created_at', ''),
                        'last_update': bot_data.get('last_update', ''),
                        'user_id': bot_data.get('user_id', user_id)
                    }
        
        if not bot_info:
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys = get_all_user_keys(user_id)
        real_balance = 0
        api_key_display = "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        
        if user_keys:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            try:
                # RealBalanceManager —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
                for key_data in user_keys:
                    if key_data.get('validation_status') == 'valid':
                        balance_manager = RealBalanceManager(
                            key_data.get('api_key'),
                            key_data.get('secret_key'), 
                            key_data.get('passphrase', '')
                        )
                        
                        balance_data = balance_manager.get_real_balance()
                        
                        if isinstance(balance_data, dict) and 'total_balance' in balance_data:
                            real_balance += balance_data['total_balance']
                            api_key_display = f"{key_data.get('exchange', 'OKX')} ({key_data.get('mode', 'sandbox')})"
                            break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        allocated_capital = 0
        free_balance = 0
        used_balance = 0
        risk_level = "–ù–∏–∑–∫–∏–π"
        max_risk_per_trade = 2.0
        total_risk_limit = 10.0
        recommended_pairs = ['BTC/USDT', 'ETH/USDT']
        
        if real_balance > 0:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
                from src.trading.capital_distributor import CapitalDistributor
                from src.trading.adaptive_capital_distributor import AdaptiveCapitalDistributor, TradingMode
                from src.trading.smart_pair_selector import SmartPairSelector
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                exchange_instance = None
                if user_keys:
                    try:
                        import ccxt
                        key_data = user_keys[0]
                        exchange_instance = ccxt.okx({
                            'apiKey': key_data.get('api_key'),
                            'secret': key_data.get('secret_key'),
                            'password': key_data.get('passphrase', ''),
                            'sandbox': key_data.get('mode') == 'sandbox'
                        })
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏: {e}")
                
                if exchange_instance:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CapitalDistributor –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞
                    capital_distributor = CapitalDistributor(exchange_instance, user_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                    import asyncio
                    total_capital = asyncio.run(capital_distributor.get_total_capital())
                    
                    if total_capital > 0:
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        symbols = ['BTC/USDT', 'ETH/USDT']
                        allocations = asyncio.run(capital_distributor.distribute_for_strategy('grid', symbols))
                        
                        if allocations:
                            allocated_capital = sum(allocations.values())
                            free_balance = total_capital - allocated_capital
                            used_balance = allocated_capital
                        else:
                            allocated_capital = total_capital * 0.8
                            free_balance = total_capital * 0.2
                            used_balance = allocated_capital
                    else:
                        allocated_capital = real_balance * 0.8
                        free_balance = real_balance * 0.2
                        used_balance = allocated_capital
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdaptiveCapitalDistributor –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
                    config = {'capital_split': {'grid': 0.5, 'scalp': 0.5}}
                    adaptive_distributor = AdaptiveCapitalDistributor(exchange_instance, user_id, config)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª–∞
                    if real_balance < 800:
                        trading_mode = TradingMode.CONSERVATIVE
                        risk_level = "–ù–∏–∑–∫–∏–π"
                        max_risk_per_trade = 1.0
                        total_risk_limit = 5.0
                    elif real_balance < 2000:
                        trading_mode = TradingMode.AUTOMATIC
                        risk_level = "–°—Ä–µ–¥–Ω–∏–π"
                        max_risk_per_trade = 2.0
                        total_risk_limit = 8.0
                    else:
                        trading_mode = TradingMode.AGGRESSIVE
                        risk_level = "–í—ã—Å–æ–∫–∏–π"
                        max_risk_per_trade = 3.0
                        total_risk_limit = 12.0
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartPairSelector –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä
                    try:
                        from src.core.exchange_mode_manager import exchange_mode_manager
                        pair_selector = SmartPairSelector(exchange_mode_manager, user_id, 'user')
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
                        pair_analyses = asyncio.run(pair_selector.get_recommended_pairs(real_balance))
                        if pair_analyses:
                            recommended_pairs = [analysis.symbol for analysis in pair_analyses[:5]]
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SmartPairSelector: {e}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π: {e}")
                # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
                allocated_capital = real_balance * 0.8
                free_balance = real_balance * 0.2
                used_balance = allocated_capital
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        bot_details = {
            'basic_info': {
                'id': bot_info['id'],
                'name': bot_info['name'],
                'type': bot_info['type'],
                'status': bot_info['status'],
                'created_at': bot_info['created_at'],
                'last_update': bot_info['last_update'],
                'api_key': api_key_display,
                'mode': 'Live' if 'live' in api_key_display.lower() else 'Demo'
            },
            'trading_settings': {
                'mode': 'Live' if 'live' in api_key_display.lower() else 'Demo',
                'pairs': recommended_pairs,
                'capital': allocated_capital,
                'grid_levels': 5,
                'spread_percent': 0.5,
                'max_pairs': 8,
                'risk_level': risk_level
            },
            'performance': {
                'total_trades': 0,
                'win_rate': 0.0,
                'profit_loss': 0.0,
                'active_orders': 0
            },
            'balance_info': {
                'total_balance': real_balance,
                'free_balance': free_balance,
                'used_balance': used_balance,
                'allocated_capital': allocated_capital,
                'profit_loss': 0.0
            },
            'risk_management': {
                'max_drawdown': 10,
                'stop_loss': 5,
                'take_profit': 15,
                'max_risk_per_trade': max_risk_per_trade,
                'total_risk_limit': total_risk_limit,
                'current_risk': 0.0
            },
            'automation_settings': {
                'auto_start': False,
                'auto_stop': False,
                'notifications': True,
                'auto_rebalance': True,
                'auto_pair_selection': True,
                'auto_risk_adjustment': True,
                'floating_profit': True
            },
            'current_positions': [],
            'last_update': datetime.now().isoformat()
        }
        
        return jsonify({'success': True, 'bot_details': bot_details})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/recommended-pairs')
@login_required
def api_recommended_pairs():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        user_id = session['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys = get_all_user_keys(user_id)
        real_balance = 0
        
        if user_keys:
            try:
                # RealBalanceManager —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
                for key_data in user_keys:
                    if key_data.get('validation_status') == 'valid':
                        balance_manager = RealBalanceManager(
                            key_data.get('api_key'),
                            key_data.get('secret_key'), 
                            key_data.get('passphrase', '')
                        )
                        
                        balance_data = balance_manager.get_real_balance()
                        
                        if isinstance(balance_data, dict) and 'total_balance' in balance_data:
                            real_balance += balance_data['total_balance']
                            break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartPairSelector –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        recommended_pairs = []
        user_limits = {'max_capital_per_pair': 500, 'max_pairs': 8}
        
        try:
            from src.core.exchange_mode_manager import exchange_mode_manager
            from src.trading.smart_pair_selector import SmartPairSelector
            import asyncio
            
            pair_selector = SmartPairSelector(exchange_mode_manager, user_id, 'user')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            pair_analyses = asyncio.run(pair_selector.get_recommended_pairs(real_balance))
            
            if pair_analyses:
                recommended_pairs = [
                    {
                        'symbol': analysis.symbol,
                        'score': analysis.smart_score,
                        'volatility': analysis.volatility,
                        'liquidity': analysis.liquidity,
                        'trend_strength': analysis.trend_strength,
                        'risk_level': analysis.risk_level,
                        'recommendation': analysis.recommendation
                    }
                    for analysis in pair_analyses[:10]
                ]
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_limits = pair_selector.get_user_limits()
            else:
                # Fallback —Å–ø–∏—Å–æ–∫
                recommended_pairs = [
                    {'symbol': 'BTC/USDT', 'score': 0.95, 'volatility': 0.03, 'liquidity': 0.98, 'trend_strength': 0.5, 'risk_level': '–ù–∏–∑–∫–∏–π', 'recommendation': '–°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞'},
                    {'symbol': 'ETH/USDT', 'score': 0.92, 'volatility': 0.04, 'liquidity': 0.95, 'trend_strength': 0.6, 'risk_level': '–ù–∏–∑–∫–∏–π', 'recommendation': '–ü–æ–∫—É–ø–∫–∞'},
                    {'symbol': 'BNB/USDT', 'score': 0.88, 'volatility': 0.05, 'liquidity': 0.90, 'trend_strength': 0.4, 'risk_level': '–°—Ä–µ–¥–Ω–∏–π', 'recommendation': '–ü–æ–∫—É–ø–∫–∞'},
                    {'symbol': 'ADA/USDT', 'score': 0.85, 'volatility': 0.06, 'liquidity': 0.85, 'trend_strength': 0.3, 'risk_level': '–°—Ä–µ–¥–Ω–∏–π', 'recommendation': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}
                ]
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SmartPairSelector: {e}")
            # Fallback —Å–ø–∏—Å–æ–∫
            recommended_pairs = [
                {'symbol': 'BTC/USDT', 'score': 0.95, 'volatility': 0.03, 'liquidity': 0.98, 'trend_strength': 0.5, 'risk_level': '–ù–∏–∑–∫–∏–π', 'recommendation': '–°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞'},
                {'symbol': 'ETH/USDT', 'score': 0.92, 'volatility': 0.04, 'liquidity': 0.95, 'trend_strength': 0.6, 'risk_level': '–ù–∏–∑–∫–∏–π', 'recommendation': '–ü–æ–∫—É–ø–∫–∞'},
                {'symbol': 'BNB/USDT', 'score': 0.88, 'volatility': 0.05, 'liquidity': 0.90, 'trend_strength': 0.4, 'risk_level': '–°—Ä–µ–¥–Ω–∏–π', 'recommendation': '–ü–æ–∫—É–ø–∫–∞'},
                {'symbol': 'ADA/USDT', 'score': 0.85, 'volatility': 0.06, 'liquidity': 0.85, 'trend_strength': 0.3, 'risk_level': '–°—Ä–µ–¥–Ω–∏–π', 'recommendation': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}
            ]
        
        return jsonify({
            'success': True,
            'recommended_pairs': recommended_pairs,
            'user_limits': user_limits
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/logs')
@login_required
def api_bot_logs(bot_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
    try:
        user_id = session['user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_data = bot_status[bot_id]
                if bot_data.get('user_id') == user_id:
                    bot_info = bot_data
        
        if not bot_info:
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞
        log_file = f"logs/bots/{bot_id}.log"
        logs = []
        
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    for line in lines[-100:]:
                        if line.strip():
                            logs.append(line.strip())
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        
        return jsonify({
            'success': True,
            'logs': logs,
            'bot_id': bot_id,
            'log_file': log_file
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/performance')
@login_required
def api_bot_performance(bot_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        user_id = session['user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_data = bot_status[bot_id]
                if bot_data.get('user_id') == user_id:
                    bot_info = bot_data
        
        if not bot_info:
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_data = {
            'total_trades': 0,
            'win_rate': 0.0,
            'profit_loss': 0.0,
            'active_orders': 0,
            'daily_pnl': 0.0,
            'weekly_pnl': 0.0,
            'monthly_pnl': 0.0,
            'max_drawdown': 0.0,
            'sharpe_ratio': 0.0,
            'bot_id': bot_id
        }
        
        return jsonify({
            'success': True,
            'performance': performance_data
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/<bot_id>/automation', methods=['POST'])
@login_required
def api_bot_automation(bot_id):
    """API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–∞"""
    try:
        user_id = session['user_id']
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot_info = None
        if os.path.exists('data/bot_status.json'):
            with open('data/bot_status.json', 'r') as f:
                bot_status = json.load(f)
            
            if bot_id in bot_status:
                bot_data = bot_status[bot_id]
                if bot_data.get('user_id') == user_id:
                    bot_info = bot_data
        
        if not bot_info:
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        automation_settings = data.get('automation', {})
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        logger.info(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {automation_settings}")
        
        return jsonify({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'automation': automation_settings
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/available-keys')
@login_required
def api_available_keys():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        user_id = session['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_keys = get_all_user_keys(user_id)
        logger.info(f"üîë –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –Ω–∞–π–¥–µ–Ω–æ {len(all_keys)}")
        
        if not all_keys:
            return jsonify({'success': False, 'error': 'API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        available_keys = []
        for key_data in all_keys:
            available_keys.append({
                'key_id': key_data.get('key_id', 'unknown'),
                'exchange': key_data.get('exchange', 'OKX'),
                'mode': key_data.get('mode', 'sandbox'),
                'validation_status': key_data.get('validation_status', 'unknown'),
                'display_name': f"{key_data.get('exchange', 'OKX')} ({key_data.get('mode', 'sandbox')}) - {key_data.get('key_id', 'unknown')}"
            })
        
        logger.info(f"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(available_keys)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π")
        return jsonify({'success': True, 'keys': available_keys})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bots/status')
@login_required
def api_bots_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤"""
    try:
        user_id = session['user_id']
        bots = []
        
        # –ß–∏—Ç–∞–µ–º –±–æ—Ç–æ–≤ –∏–∑ bot_status.json
        try:
            if os.path.exists('data/bot_status.json'):
                with open('data/bot_status.json', 'r') as f:
                    bot_status = json.load(f)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤ –ø–æ user_id
                for bot_id, bot_data in bot_status.items():
                    if bot_data.get('user_id') == user_id:
                        bots.append({
                            'id': bot_data.get('id', bot_id),
                            'name': bot_data.get('name', 'Unknown'),
                            'type': bot_data.get('type', 'unknown'),
                            'status': bot_data.get('status', 'unknown'),
                            'created_at': bot_data.get('created_at', ''),
                            'last_update': bot_data.get('last_update', '')
                        })
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bot_status.json: {e}")
        
        # –ï—Å–ª–∏ bot_status.json –ø—É—Å—Ç–æ–π, –∏—â–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö (fallback)
        if not bots:
            import glob
            bot_files = glob.glob(f'data/bot_configs/bot_{user_id}_*.json')
            
            for bot_file in bot_files:
                try:
                    with open(bot_file, 'r') as f:
                        bot_config = json.load(f)
                        bots.append({
                            'id': bot_config.get('bot_id', 'unknown'),
                            'name': bot_config.get('bot_name', 'Unknown'),
                            'type': bot_config.get('bot_type', 'unknown'),
                            'status': bot_config.get('status', 'unknown'),
                            'created_at': bot_config.get('created_at', ''),
                            'last_update': bot_config.get('last_update', '')
                        })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_file}: {e}")
        
        return jsonify({'success': True, 'bots': bots})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)})

def get_user_decrypted_keys(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ APIKeysManager
        try:
            user_keys_list = api_keys_manager.get_user_keys(user_id)
            if user_keys_list:
                # –ò—â–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
                for key_data in user_keys_list:
                    if key_data.get('validation_status') == 'valid':
                        key_id = key_data['key_id']
                        decrypted_key = api_keys_manager.get_decrypted_key(user_id, key_id)
                        if decrypted_key:
                            logger.info(f"–ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á: {key_id}")
                            return decrypted_key
                
                # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                first_key = user_keys_list[0]
                key_id = first_key['key_id']
                decrypted_key = api_keys_manager.get_decrypted_key(user_id, key_id)
                if decrypted_key:
                    logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á: {key_id}")
                    return decrypted_key
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ APIKeysManager: {e}")
            pass
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('secure_users.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT encrypted_api_key, encrypted_secret_key, encrypted_passphrase, key_mode
            FROM secure_users WHERE user_id = ?
        ''', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            api_key, secret_key, passphrase, key_mode = result
            return {
                'api_key': api_key,
                'secret': secret_key,
                'passphrase': passphrase or '',
                'mode': key_mode or 'sandbox'
            }
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {e}")
        return None

def get_all_user_keys(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            conn = sqlite3.connect('secure_users.db')
            cursor = conn.cursor()
            cursor.execute('''
                SELECT encrypted_api_key, encrypted_secret_key, encrypted_passphrase, encryption_key, key_mode 
                FROM secure_users 
                WHERE user_id = ? AND encrypted_api_key IS NOT NULL AND encrypted_api_key != ''
            ''', (user_id,))
            user_data = cursor.fetchone()
            conn.close()
            
            if user_data:
                encrypted_api_key, encrypted_secret_key, encrypted_passphrase, encryption_key, key_mode = user_data
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {key_mode}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–Ω–∏ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã)
                logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                try:
                    # –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
                    api_key = encrypted_api_key
                    secret_key = encrypted_secret_key
                    passphrase = encrypted_passphrase
                    
                    logger.info("‚úÖ –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                    logger.info(f"üîë API –∫–ª—é—á: {api_key[:10]}...{api_key[-10:]}")
                    logger.info(f"üîë Secret: {secret_key[:10]}...{secret_key[-10:]}")
                    logger.info(f"üîë Passphrase: {passphrase}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏, –∞ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if api_key.startswith('gAAAAAB') or secret_key.startswith('gAAAAAB'):
                        logger.error("‚ùå –ö–ª—é—á–∏ –≤—Å–µ –µ—â–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏!")
                        logger.error("‚ùå –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")
                        return []
                    
                except Exception as decrypt_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: {decrypt_error}")
                    return []
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª—é—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º —Å–∏—Å—Ç–µ–º–æ–π
                key_data = {
                    'key_id': f'db_{user_id}',
                    'api_key': api_key,
                    'secret': secret_key,
                    'passphrase': passphrase or '',
                    'exchange': 'okx',
                    'mode': key_mode or 'sandbox',
                    'validation_status': 'valid'  # –ö–ª—é—á–∏ –∏–∑ –ë–î —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏
                }
                
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω 1 –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return [key_data]
            else:
                logger.warning("‚ö†Ô∏è –ö–ª—é—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º APIKeysManager
        logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ APIKeysManager...")
        try:
            user_keys_list = api_keys_manager.get_user_keys(user_id)
            logger.info(f"üìä APIKeysManager –≤–µ—Ä–Ω—É–ª {len(user_keys_list) if user_keys_list else 0} –∫–ª—é—á–µ–π")
            
            if user_keys_list:
                all_keys = []
                for key_data in user_keys_list:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏, –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ
                    key_id = key_data['key_id']
                    decrypted_key = api_keys_manager.get_decrypted_key(user_id, key_id)
                    if decrypted_key:
                        decrypted_key['key_id'] = key_id
                        decrypted_key['exchange'] = key_data.get('exchange', 'okx')
                        decrypted_key['mode'] = key_data.get('mode', 'sandbox')
                        decrypted_key['validation_status'] = key_data.get('validation_status', 'unknown')
                        all_keys.append(decrypted_key)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á: {key_id} ({key_data.get('mode', 'sandbox')}) - {key_data.get('validation_status', 'unknown')}")
                    else:
                        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á: {key_id}")
                
                if all_keys:
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(all_keys)} –∫–ª—é—á–µ–π –∏–∑ APIKeysManager")
                    return all_keys
                else:
                    logger.warning("‚ö†Ô∏è –ö–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
            else:
                logger.warning("‚ö†Ô∏è APIKeysManager –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ APIKeysManager: {e}")
            pass
        
        logger.error("‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∏ –≤ APIKeysManager")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π: {e}")
        return []

@app.route('/api/balance')
@login_required
def api_balance():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        user_id = session['user_id']
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_keys = get_all_user_keys(user_id)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(all_keys)}")
        
        if not all_keys:
            logger.warning("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({'success': True, 'balance': {
                'connected': False,
                'total_usdt': 0,
                'exchanges': [],
                'currencies': {},
                'source': 'no_keys',
                'last_updated': datetime.now().isoformat()
            }})
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        exchanges = []
        total_balance = 0
        all_currencies = {}
        
        for key_data in all_keys:
            try:
                balance_manager = RealBalanceManager(
                    key_data['api_key'], 
                    key_data['secret'], 
                    key_data.get('passphrase', '')
                )
                balance_data = balance_manager.get_real_balance()
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if 'currencies' in balance_data and balance_data['currencies']:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º, —Å—É–º–º–∏—Ä—É–µ–º –∏—Ö
                    key_balance = sum(currency.get('total', 0) for currency in balance_data['currencies'].values())
                else:
                    # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                    key_balance = balance_data.get('total_balance', 0)
                    if isinstance(key_balance, dict):
                        key_balance = sum(key_balance.values()) if key_balance else 0
                    elif not isinstance(key_balance, (int, float)):
                        key_balance = 0
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ key_balance - —ç—Ç–æ —á–∏—Å–ª–æ
                if isinstance(key_balance, dict):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –≤–∞–ª—é—Ç–∞–º–∏, —Å—É–º–º–∏—Ä—É–µ–º USDT
                    if 'USDT' in key_balance:
                        key_balance = key_balance['USDT']
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç USDT, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∞–ª—é—Ç—É
                        key_balance = sum(key_balance.values()) if key_balance else 0
                elif not isinstance(key_balance, (int, float)):
                    logger.warning(f"‚ö†Ô∏è key_balance –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {type(key_balance)} = {key_balance}")
                    key_balance = 0
                
                total_balance += key_balance
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
                currencies = balance_data.get('currencies', {})
                if not currencies and key_balance > 0:
                    # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    currencies = {'USDT': key_balance}
                
                exchange_data = {
                    'name': key_data.get('exchange', 'OKX'),
                    'mode': key_data.get('mode', 'sandbox'),
                    'balance': key_balance,
                    'key_id': key_data.get('key_id', 'unknown'),
                    'last_updated': balance_data.get('last_updated', datetime.now().isoformat()),
                    'currencies': currencies
                }
                
                exchanges.append(exchange_data)
                
                # –°—É–º–º–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º
                for currency, amount in currencies.items():
                    if currency not in all_currencies:
                        all_currencies[currency] = 0
                    all_currencies[currency] += amount
                
                logger.info(f"–ö–ª—é—á {key_data.get('key_id')} ({key_data.get('mode')}): ${key_balance:.2f}, –≤–∞–ª—é—Ç—ã: {list(currencies.keys())}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–ª—é—á–∞ {key_data.get('key_id')}: {e}")
                continue
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        formatted_balance = {
            'connected': len(exchanges) > 0,
            'total_usdt': total_balance,
            'exchanges': exchanges,
            'currencies': all_currencies,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–∞—Ö
            'source': f'okx_api_{len(exchanges)}_keys',
            'last_updated': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f} –∏–∑ {len(exchanges)} –∫–ª—é—á–µ–π")
        return jsonify({'success': True, 'balance': formatted_balance})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/api-keys', methods=['GET', 'POST'])
@login_required
def api_api_keys():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = session['user_id']
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π
        if request.method == 'POST':
            data = request.get_json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π: {data}")
            
            exchange = data.get('exchange', 'okx')
            api_key = data.get('api_key', '').strip()
            secret_key = data.get('secret', '').strip()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: secret –≤–º–µ—Å—Ç–æ secret_key
            passphrase = data.get('passphrase', '').strip()
            mode = data.get('mode', 'sandbox')
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: exchange={exchange}, api_key={api_key[:8]}..., secret_key={secret_key[:8]}..., passphrase={passphrase[:8] if passphrase else 'None'}..., mode={mode}")
            
            if not all([api_key, secret_key]):
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: api_key={bool(api_key)}, secret_key={bool(secret_key)}")
                return jsonify({'success': False, 'error': 'API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'})
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ APIKeysManager
                success = api_keys_manager.add_api_key(
                    user_id=user_id,
                    exchange=exchange,
                    api_key=api_key,
                    secret=secret_key,
                    passphrase=passphrase,
                    mode=mode
                )
                
                if success:
                    return jsonify({
                        'success': True, 
                        'message': 'API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
                    })
                else:
                    return jsonify({
                        'success': False, 
                        'error': '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞'
                    })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {e}")
                return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {str(e)}'})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ APIKeysManager
        try:
            user_keys = api_keys_manager.get_user_keys(user_id)
        except:
            user_keys = []
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not user_keys:
            user_keys = get_user_keys_from_db(user_id)
        
        if not user_keys:
            return jsonify({'success': False, 'error': 'API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö
        keys_info = []
        for key_data in user_keys:
            keys_info.append({
                'key_id': key_data.get('key_id', 'unknown'),
                'exchange': key_data.get('exchange', 'unknown'),
                'api_key': key_data.get('api_key_preview', '')[:8] + '...' if key_data.get('api_key_preview') else '',
                'is_active': key_data.get('is_active', False),
                'created_at': key_data.get('created_at', ''),
                'last_used': key_data.get('last_used', ''),
                'validation_status': key_data.get('validation_status', 'pending')
            })
        
        return jsonify({'success': True, 'keys': keys_info})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/api-keys/<key_id>/validate', methods=['POST'])
@login_required
def api_validate_key(key_id):
    """API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π"""
    try:
        user_id = session['user_id']
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞ {key_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        decrypted_key = get_user_decrypted_keys(user_id)
        if not decrypted_key:
            return jsonify({
                'success': False, 
                'error': '–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            })
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ccxt
            import ccxt
            
            logger.info(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏: {decrypted_key['api_key'][:10]}...{decrypted_key['api_key'][-10:]}")
            logger.info(f"üîë Secret: {decrypted_key['secret'][:10]}...{decrypted_key['secret'][-10:]}")
            logger.info(f"üîë Passphrase: {decrypted_key.get('passphrase', '')}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º (sandbox –∏–ª–∏ live)
            is_sandbox = decrypted_key.get('mode', 'sandbox') == 'sandbox'
            logger.info(f"üåê –†–µ–∂–∏–º: {'Sandbox' if is_sandbox else 'Live'}")
            
            exchange = ccxt.okx({
                'apiKey': decrypted_key['api_key'],
                'secret': decrypted_key['secret'],
                'password': decrypted_key.get('passphrase', ''),
                'sandbox': is_sandbox,
                'enableRateLimit': True,
            })
            
            logger.info("üì° –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
            balance = exchange.fetch_balance()
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balance.get('total', {})}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            total_balance = 0
            for currency in ['USDT', 'BTC', 'ETH', 'USD']:
                if currency in balance['total'] and balance['total'][currency] > 0:
                    total_balance += balance['total'][currency]
                    logger.info(f"üíé {currency}: {balance['total'][currency]}")
            
            if total_balance > 0:
                logger.info(f"‚úÖ –ö–ª—é—á {key_id} –≤–∞–ª–∏–¥–µ–Ω, –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}")
                return jsonify({
                    'success': True, 
                    'message': f'‚úÖ API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã (–±–∞–ª–∞–Ω—Å: {total_balance})',
                    'balance_count': total_balance,
                    'exchange': 'OKX',
                    'mode': 'Sandbox' if is_sandbox else 'Live'
                })
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é")
                return jsonify({
                    'success': False, 
                    'error': '–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ'
                })
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
            error_msg = str(e)
            if "Invalid OK-ACCESS-KEY" in error_msg:
                error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –∫–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            elif "Invalid OK-ACCESS-SIGN" in error_msg:
                error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π Secret –∫–ª—é—á –∏–ª–∏ Passphrase"
            elif "Invalid OK-ACCESS-TIMESTAMP" in error_msg:
                error_msg = "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏"
            elif "Network" in error_msg:
                error_msg = "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é"
            
            return jsonify({
                'success': False, 
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_msg}'
            })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/dashboard/bots')
@login_required
def api_dashboard_bots():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ"""
    try:
        user_id = session['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
        bots = []
        import glob
        bot_files = glob.glob(f'data/bot_configs/bot_{user_id}_*.json')
        
        for bot_file in bot_files:
            try:
                with open(bot_file, 'r') as f:
                    bot_config = json.load(f)
                    bots.append({
                        'id': bot_config.get('bot_id', 'unknown'),
                        'name': bot_config.get('bot_name', 'Unknown'),
                        'type': bot_config.get('bot_type', 'unknown'),
                        'status': bot_config.get('status', 'unknown'),
                        'created_at': bot_config.get('created_at', ''),
                        'last_update': bot_config.get('last_update', '')
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_file}: {e}")
        
        return jsonify({'success': True, 'bots': bots})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/balance/detailed')
@login_required
def api_balance_detailed():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        user_id = session['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_keys = get_all_user_keys(user_id)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {len(all_keys)}")
        
        if not all_keys:
            return jsonify({'success': False, 'error': 'API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        total_balance = {}
        free_balance = {}
        used_balance = {}
        currencies = []
        
        for key_data in all_keys:
            try:
                balance_manager = RealBalanceManager(
                    key_data['api_key'], 
                    key_data['secret'], 
                    key_data.get('passphrase', '')
                )
                balance_data = balance_manager.get_real_balance()
                
                mode = key_data.get('mode', 'sandbox')
                currencies.append(mode)
                total_balance[mode] = balance_data.get('total_balance', 0)
                free_balance[mode] = balance_data.get('free_balance', 0)
                used_balance[mode] = balance_data.get('used_balance', 0)
                
                logger.info(f"–î–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è {mode}: ${balance_data.get('total_balance', 0):.2f}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–ª—é—á–∞ {key_data.get('key_id')}: {e}")
                continue
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        detailed_balance = {
            'total_balance': total_balance,
            'free_balance': free_balance,
            'used_balance': used_balance,
            'currencies': currencies,
            'last_updated': datetime.now().isoformat()
        }
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {detailed_balance}")
        return jsonify({'success': True, 'balance': detailed_balance})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Enhanced Trading System Web Interface")
    app.run(host='0.0.0.0', port=5000, debug=False)
